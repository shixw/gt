{"code":0,"data":{"video_id":"","sku":"100006601","video_cover":"","author_name":"李运华","text_read_version":0,"audio_size":0,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/76\/d3\/763f7bd602be7f2bbe4ff5d488fd2fd3.jpg","subtitles":{},"product_type":"c1","audio_url":"","chapter_id":"0","column_had_sub":true,"audio_dubber":"","is_finished":false,"inline_video_subtitles":{},"like":{"had_done":false,"count":32},"neighbors":{"left":{"id":313724,"article_title":"第二季回归 | 照着做，你也能顺利晋升！"},"right":{"id":326375,"article_title":"加餐｜扒一扒中台皇帝的外衣"}},"audio_time":"","video_height":0,"rate_percent":0,"article_content":"<p>你好，我是华仔。<\/p><p>我们架构课的<a href=\"https:\/\/time.geekbang.org\/column\/article\/8697\">第18讲<\/a>和<a href=\"https:\/\/time.geekbang.org\/column\/article\/8805\">第19讲<\/a>主题是单服务器高性能模式，我们讲了PPC与TPC、Reactor与Proactor，从理论上跟你详细讲述了不同模式的实现方式和优缺点，但是并没有给出详细的测试数据对比，原因在于我自己没有整套的测试环境，也不能用公司的服务器做压力测试，因此留下了一个小小的遗憾。<\/p><p>幸运的是，最近我在学习的时候，无意中在网络上找到一份非常详尽的关于Linux服务器网络模型的详细系列文章。作者通过连载的方式，将iterative、forking（对应专栏的PPC模式）、preforked（对应专栏的prefork模式）、threaded（对应专栏的TPC模式）、prethreaded（对应专栏的prethread模式）、poll、epoll（对应专栏的Reactor模式）共7种模式的实现原理、实现代码、性能对比都详尽地进行了阐述，完美地弥补了专栏内容没有实际数据对比的遗憾。<\/p><p>因此我把核心的测试数据对比摘录出来，然后基于数据来进一步阐释，也就有了这一讲的加餐。我想第一时间分享给你，相信今天的内容可以帮助我们加深对课程里讲过的理论的理解。<\/p><p>下面是作者对7种模式的性能测试对比结果表格，作者在文章中并没有详细地介绍测试环境，只是简单提到了测试服务器是租来的云服务器，<strong>CPU只有1核<\/strong>（没有说明具体的CPU型号），对于内存、带宽、磁盘等信息并没有介绍，我们假设这些硬件相关性能都足够。从理论上来说，网络模型的核心性能部件就是CPU，因此如下数据是具备参考意义的。<\/p><!-- [[[read_end]]] --><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/21\/e5\/2121684ed5723579a817d6a47d259be5.png?wh=1426*1486\" alt=\"\"><\/p><p>这张图的数据比较多，如何去看懂这样的性能测试数据表格呢？我来分享一个有用的技巧：<strong>横向看对比，纵向看转折<\/strong>。<\/p><h3>横向看对比<\/h3><p>比如，当并发连接数是1000的时候，可以看出preforking、prethreaded、epoll三种模式性能是相近的，也意味着epoll并不是在任何场景都具备相比其它模式的性能优势。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/7a\/98\/7a85c2a05e828ca5bfb2ba98d9e0cd98.png?wh=1540*206\" alt=\"\"><\/p><h3>纵向看转折<\/h3><p>比如，prethreaded模式（作者源码中设置了100个线程）在11000并发的时候性能有2200，但12000并发连接的时候，性能急剧下降到只有970，这是什么原因呢？我推测是12000并发的时候触发了C10K问题，线程上下文切换的性能消耗超越了IO处理，成为了系统的处理瓶颈。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/3a\/08\/3acb8af02e70c68bfa00e900c0d0fe08.png?wh=1536*354?wh=1536*354\" alt=\"\"><\/p><p>按照上述“横向看对比，纵向看转折”的方式，我给你分享一下我的一些解读和发现。<\/p><ol>\n<li>创建进程的消耗是创建线程的消耗的4倍左右。<\/li>\n<\/ol><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/5e\/0f\/5ecb69f4867c1493b78d837163f4a90f.png?wh=1542*456\" alt=\"\"><\/p><ol start=\"2\">\n<li>并发2000以内时，preforked、prethreaded、epoll的性能相差无几，甚至preforked和prethreaded的性能有时候还稍微高一些。<\/li>\n<\/ol><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/af\/ea\/af8f0f78c2d9cb181a23eea955e7a8ea.png?wh=1540*550\" alt=\"\"><\/p><p>这也是内部系统、中间件等并发数并不高的系统并不一定需要epoll的原因，用preforked和prethreaded模式能够达到相同的性能，并且实现要简单。<\/p><ol start=\"3\">\n<li>当并发数达到8000以上，只有pthreaded和epoll模式能够继续运行，但性能也有下降，epoll的下降更加平稳一些。<\/li>\n<\/ol><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/94\/bc\/9420050d285f4058b2bd315cdd395cbc.png?wh=1546*398\" alt=\"\"><\/p><ol start=\"4\">\n<li>prethreaded模式在12000并发连接的时候，性能急剧下降。<\/li>\n<\/ol><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/3a\/08\/3acb8af02e70c68bfa00e900c0d0fe08.png?wh=1536*354?wh=1536*354\" alt=\"\"><\/p><p>推测是触发了C10K问题，线程上下文切换的性能消耗超越了IO处理的性能消耗。<\/p><ol start=\"5\">\n<li>poll模式随着并发数增多稳定下降，因为需要遍历的描述符越多，其性能越低。<\/li>\n<\/ol><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/d6\/52\/d64477859d784686895ac91c5224d852.png?wh=1540*610\" alt=\"\"><\/p><p>类似的还有select模式，作者没有单独写select，因为两者原理基本类似，区别是select的最大支持连接数受限于FD_SETSIZE这个参数。<\/p><ol start=\"6\">\n<li>epoll在并发数超过10000的时候性能开始下降，但下降比较平稳。<\/li>\n<\/ol><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/5b\/d2\/5b32b9d7b31df5a6067deca3ccc0f2d2.png?wh=1540*876\" alt=\"\"><\/p><p>这个结论看起来比较简单，但是却隐含着一个关键的设计点：<strong>epoll不是万能的，连接数太多的时候单进程epoll也是不行的<\/strong>。这也是为什么Redis可以用单进程Reactor模式，而Nginx必须用多进程Reactor模式，因为Redis的应用场景是内部访问，并发数一般不会超过10000；而Nginx是互联网访问，并发数很容易超过10000。<\/p><p>以上是我从性能对比数据中的一些发现，这些发现能够让我们更进一步理解专栏内容中讲到的理论知识和优缺点对比，这些数据也可以指导我们在实际的架构设计中根据应用场景来选择合适的模式。<\/p><p>最后，我也希望你能掌握“<strong>横向看对比，纵向看转折<\/strong>”这个分析技巧。这个技巧在查阅和审核性能测试数据以及各种对比数据的时候，能够帮助你发现很多数据背后隐含的观点和结论。<\/p><p>拓展阅读与学习指南：<\/p><ol>\n<li>\n<p>原作者的系列文章请参考：<a href=\"https:\/\/unixism.net\/2019\/04\/linux-applications-performance-introduction\/\">https:\/\/unixism.net\/2019\/04\/linux-applications-performance-introduction\/<\/a><\/p>\n<\/li>\n<li>\n<p>原作者的测试代码GitHub仓库地址：<a href=\"https:\/\/github.com\/shuveb\/zerohttpd\">https:\/\/github.com\/shuveb\/zerohttpd<\/a><\/p>\n<\/li>\n<li>\n<p>原作者的代码实现了一个完整的基本功能的HTTP服务器，采用的是短链接的方式，还用到了Redis来保存内容，有的代码逻辑是比较复杂的，尤其是epoll的实现部分。如果你想自己简单的只是验证网络模型的性能，可以去掉其源码中HTTP的实现部分，只是简单地返回“hello world”这样的字符串即可。<\/p>\n<\/li>\n<\/ol>","footer_cover_data":{"img_url":"","mp_url":"","link_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":false,"rate":{},"product_id":100006601,"like_count":65,"had_liked":false,"article_subtitle":"","audio_download_url":"","id":316150,"had_viewed":false,"article_title":"加餐｜单服务器高性能模式性能对比","column_bgcolor":"#a2cde8","share":{"content":"前阿里P9技术专家的实战架构心法","title":"李运华 · 从0开始学架构","poster":"https:\/\/static001.geekbang.org\/resource\/image\/ce\/db\/ceb37edc8efefc8b2cde54f6592340db.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/a9\/ed\/a96b163e2d9bf19cdfc0f5d0d69e13ed.jpg"},"is_video_preview":false,"article_summary":"如何看懂性能测试数据表格呢？我来分享一个有用的技巧：横向看对比，纵向看转折。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/7d\/ef\/7de3ad157cd144be9ed3224cbabf31ef.jpeg","column_sale_type":1,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/a9\/ed\/a96b163e2d9bf19cdfc0f5d0d69e13ed.jpg","column_id":81,"audio_time_arr":{"m":"","s":"","h":""},"video_time":"","audio_title":"","audio_md5":"","video_size":0,"text_read_percent":0,"comment_count":6,"cid":81,"article_sharetitle":"单服务器高性能模式性能对比","column_is_onboard":true,"article_cshort":"<p>你好，我是华仔。<\/p><p>我们架构课的<a href=\"https:\/\/time.geekbang.org\/column\/article\/8697\">第18讲<\/a>和<a href=\"https:\/\/time.geekbang.org\/column\/article\/8805\">第19讲<\/a>主题是单服务器高性能模式，我们讲了PPC与TPC、Reactor与Proactor，从理论上跟你详细讲述了不同模式的实现方式和优缺点，但是并没有给出详细的测试数据对比，原因在于我自己没有整套的测试环境，也不能用公司的服务器做压力测试，因此留下了一个小小的遗憾。<\/p><p>幸运的是，最近我在学习的时候，无意中在网络上找到一份非常详尽的关于Linux服务器网络模型的详细系列文章。作者通过连载的方式，将iterative、forking（对应专栏的PPC模式）、preforked（对应专栏的prefork模式）、threaded（对应专栏的TPC模式）、prethreaded（对应专栏的prethread模式）、poll、epoll（对应专栏的Reactor模式）共7种模式的实现原理、实现代码、性能对比都详尽地进行了阐述，完美地弥补了专栏内容没有实际数据对比的遗憾。<\/p><p>因此我把核心的测试数据对比摘录出来，然后基于数据来进一步阐释，也就有了这一讲的加餐。我想第一时间分享给你，相信今天的内容可以帮助我们加深对课程里讲过的理论的理解。<\/p><p>下面是作者对7种模式的性能测试对比结果表格，作者在文章中并没有详细地介绍测试环境，只是简单提到了测试服务器是租来的云服务器，<strong>CPU只有1核<\/strong>（没有说明具体的CPU型号），对于内存、带宽、磁盘等信息并没有介绍，我们假设这些硬件相关性能都足够。从理论上来说，网络模型的核心性能部件就是CPU，因此如下数据是具备参考意义的。<\/p>","video_width":0,"column_could_sub":true,"article_ctime":1606838400,"score":"71606838400","video_media_map":{},"video_preview":{},"video":0,"video_time_arr":{"m":"","s":"","h":""},"video_total_seconds":0},"extra":{},"error":{}}