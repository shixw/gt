{"code":0,"data":{"video_id":"","sku":"100006601","video_cover":"","author_name":"李运华","text_read_version":0,"audio_size":5322853,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/05\/bd\/053aba9f65421464a37dd0e71bcbbebd.jpg","subtitles":{},"product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/media\/audio\/7d\/80\/7d858422ae749d95666e7f658632ad80\/ld\/ld.m3u8","chapter_id":"0","column_had_sub":true,"audio_dubber":"黄洲君","is_finished":false,"inline_video_subtitles":{},"like":{"had_done":false,"count":422},"neighbors":{"left":{"id":6458,"article_title":"01 | 架构到底是指什么？"},"right":{"id":6472,"article_title":"03 | 架构设计的目的"}},"audio_time":"00:11:06","video_height":0,"rate_percent":0,"article_content":"<p>理解了架构的有关概念和定义之后，今天，我会给你讲讲<span class=\"orange\">架构设计的历史背景<\/span>。我认为，如果想要深入理解一个事物的本质，最好的方式就是去追寻这个事物出现的历史背景和推动因素。我们先来简单梳理一下软件开发进化的历史，探索一下软件架构出现的历史背景。<\/p>\n<h2 id=\"-1940-\">机器语言（1940年之前）<\/h2>\n<p>最早的软件开发使用的是“<strong>机器语言<\/strong>”，直接使用二进制码0和1来表示机器可以识别的指令和数据。例如，在8086机器上完成“s=768+12288-1280”的数学运算，机器码如下：<\/p>\n<pre><code>101100000000000000000011\n000001010000000000110000\n001011010000000000000101\n<\/code><\/pre><p>不用多说，不管是当时的程序员，还是现在的程序员，第一眼看到这样一串东西时，肯定是一头雾水，因为这实在是太难看懂了，这还只是一行运算，如果要输出一个“hello world”，面对几十上百行这样的0\/1串，眼睛都要花了！<\/p>\n<p>看都没法看，更何况去写这样的程序，如果不小心哪个地方敲错了，将1敲成了0，例如：<\/p>\n<pre><code>101100000000000000000011\n000001010000000000110000\n001011000000000000000101\n<\/code><\/pre><p>如果要找出这个程序中的错误，程序员的心里阴影面积有多大？<\/p>\n<p>归纳一下，机器语言的主要问题是三难：<strong>太难写、太难读、太难改<\/strong>！<\/p>\n<h2 id=\"-20-40-\">汇编语言（20世纪40年代）<\/h2>\n<p>为了解决机器语言编写、阅读、修改复杂的问题，<strong>汇编语言<\/strong>应运而生。汇编语言又叫“<strong>符号语言<\/strong>”，用助记符代替机器指令的操作码，用地址符号（Symbol）或标号（Label）代替指令或操作数的地址。<\/p>\n<p>例如，为了完成“将寄存器BX的内容送到AX中”的简单操作，汇编语言和机器语言分别如下。<\/p>\n<pre><code>机器语言：1000100111011000\n汇编语言：mov ax,bx\n<\/code><\/pre><p>相比机器语言来说，汇编语言就清晰得多了。mov是操作，ax和bx是寄存器代号，mov ax,bx语句基本上就是“将寄存器BX的内容送到AX”的简化版的翻译，即使不懂汇编，单纯看到这样一串语言，至少也能明白大概意思。<\/p>\n<p>汇编语言虽然解决了机器语言读写复杂的问题，但本质上还是<strong>面向机器<\/strong>的，因为写汇编语言需要我们精确了解计算机底层的知识。例如，CPU指令、寄存器、段地址等底层的细节。这对于程序员来说同样很复杂，因为程序员需要将现实世界中的问题和需求按照机器的逻辑进行翻译。例如，对于程序员来说，在现实世界中面对的问题是4 + 6 = ？。而要用汇编语言实现一个简单的加法运算，代码如下：<\/p>\n<pre><code>.section .data\n  a: .int 10\n  b: .int 20\n  format: .asciz &quot;%d\\n&quot;\n.section .text\n.global _start\n_start:\n  movl a, %edx　　\n  addl b, %edx　　\n  pushl %edx\n  pushl $format\n  call printf\n  movl $0, (%esp)\n  call exit\n<\/code><\/pre><p>这还只是实现一个简单的加法运算所需要的汇编程序，可以想象一下，实现一个四则运算的程序会更加复杂，更不用说用汇编写一个操作系统了！<\/p>\n<p>除了编写本身复杂，还有另外一个复杂的地方在于：不同CPU的汇编指令和结构是不同的。例如，Intel的CPU和Motorola的CPU指令不同，同样一个程序，为Intel的CPU写一次，还要为Motorola的CPU再写一次，而且指令完全不同。<\/p>\n<h2 id=\"-20-50-\">高级语言（20世纪50年代）<\/h2>\n<p>为了解决汇编语言的问题，计算机前辈们从20世纪50年代开始又设计了多个<strong>高级语言<\/strong>，最初的高级语言有下面几个，并且这些语言至今还在特定的领域继续使用。<\/p>\n<!-- [[[read_end]]] -->\n<ul>\n<li><p>Fortran：1955年，名称取自”FORmula TRANslator”，即公式翻译器，由约翰·巴科斯（John Backus）等人发明。<\/p>\n<\/li>\n<li><p>LISP：1958年，名称取自”LISt Processor”，即枚举处理器，由约翰·麦卡锡（John McCarthy）等人发明。<\/p>\n<\/li>\n<li><p>Cobol：1959年，名称取自”Common Business Oriented Language”，即通用商业导向语言，由葛丽丝·霍普（Grace Hopper）发明。<\/p>\n<\/li>\n<\/ul>\n<p>为什么称这些语言为“高级语言”呢？原因在于这些语言让程序员不需要关注机器底层的低级结构和逻辑，而只要关注具体的问题和业务即可。<\/p>\n<p>还是以4 + 6=？这个加法为例，如果用LISP语言实现，只需要简单一行代码即可：<\/p>\n<pre><code>(+ 4 6)\n<\/code><\/pre><p>除此以外，通过编译程序的处理，高级语言可以被编译为适合不同CPU指令的机器语言。程序员只要写一次程序，就可以在多个不同的机器上编译运行，无须根据不同的机器指令重写整个程序。<\/p>\n<h2 id=\"-20-60-20-70-\">第一次软件危机与结构化程序设计（20世纪60年代~20世纪70年代）<\/h2>\n<p>高级语言的出现，解放了程序员，但好景不长，随着软件的规模和复杂度的大大增加，20世纪60年代中期开始爆发了第一次软件危机，典型表现有软件质量低下、项目无法如期完成、项目严重超支等，因为软件而导致的重大事故时有发生。例如，1963年美国（<a href=\"http:\/\/en.wikipedia.org\/wiki\/Mariner_1\">http:\/\/en.wikipedia.org\/wiki\/Mariner_1<\/a>）的水手一号火箭发射失败事故，就是因为一行FORTRAN代码错误导致的。<\/p>\n<p>软件危机最典型的例子莫过于IBM的System\/360的操作系统开发。佛瑞德·布鲁克斯（Frederick P. Brooks, Jr.）作为项目主管，率领2000多个程序员夜以继日地工作，共计花费了5000人一年的工作量，写出将近100万行的源码，总共投入5亿美元，是美国的“曼哈顿”原子弹计划投入的1\/4。尽管投入如此巨大，但项目进度却一再延迟，软件质量也得不到保障。布鲁克斯后来基于这个项目经验而总结的《人月神话》一书，成了畅销的软件工程书籍。<\/p>\n<p>为了解决问题，在1968、1969年连续召开两次著名的NATO会议，会议正式创造了“软件危机”一词，并提出了针对性的解决方法“软件工程”。虽然“软件工程”提出之后也曾被视为软件领域的银弹，但后来事实证明，软件工程同样无法根除软件危机，只能在一定程度上缓解软件危机。<\/p>\n<p>差不多同一时间，“结构化程序设计”作为另外一种解决软件危机的方案被提了出来。艾兹赫尔·戴克斯特拉（Edsger Dijkstra）于1968年发表了著名的《GOTO有害论》论文，引起了长达数年的论战，并由此产生了<strong>结构化程序设计方法<\/strong>。同时，第一个结构化的程序语言Pascal也在此时诞生，并迅速流行起来。<\/p>\n<p>结构化程序设计的主要特点是抛弃goto语句，采取“自顶向下、逐步细化、模块化”的指导思想。结构化程序设计本质上还是一种面向过程的设计思想，但通过“自顶向下、逐步细化、模块化”的方法，将软件的复杂度控制在一定范围内，从而从整体上降低了软件开发的复杂度。结构化程序方法成为了20世纪70年代软件开发的潮流。<\/p>\n<h2 id=\"-20-80-\">第二次软件危机与面向对象（20世纪80年代）<\/h2>\n<p>结构化编程的风靡在一定程度上缓解了软件危机，然而随着硬件的快速发展，业务需求越来越复杂，以及编程应用领域越来越广泛，第二次软件危机很快就到来了。<\/p>\n<p>第二次软件危机的根本原因还是在于软件生产力远远跟不上硬件和业务的发展。第一次软件危机的根源在于软件的“逻辑”变得非常复杂，而第二次软件危机主要体现在软件的“扩展”变得非常复杂。结构化程序设计虽然能够解决（也许用“缓解”更合适）软件逻辑的复杂性，但是对于业务变化带来的软件扩展却无能为力，软件领域迫切希望找到新的银弹来解决软件危机，在这种背景下，<strong>面向对象的思想<\/strong>开始流行起来。<\/p>\n<p>面向对象的思想并不是在第二次软件危机后才出现的，早在1967年的Simula语言中就开始提出来了，但第二次软件危机促进了面向对象的发展。<strong>面向对象真正开始流行是在20世纪80年代，主要得益于C++的功劳，后来的Java、C#把面向对象推向了新的高峰。到现在为止，面向对象已经成为了主流的开发思想。<\/strong><\/p>\n<p>虽然面向对象开始也被当作解决软件危机的银弹，但事实证明，和软件工程一样，面向对象也不是银弹，而只是一种新的软件方法而已。<\/p>\n<h2 id=\"-\">软件架构的历史背景<\/h2>\n<p>虽然早在20世纪60年代，戴克斯特拉这位上古大神就已经涉及软件架构这个概念了，但软件架构真正流行却是从20世纪90年代开始的，由于在Rational和Microsoft内部的相关活动，软件架构的概念开始越来越流行了。<\/p>\n<p>与之前的各种新方法或者新理念不同的是，“软件架构”出现的背景并不是整个行业都面临类似相同的问题，“软件架构”也不是为了解决新的软件危机而产生的，这是怎么回事呢？<\/p>\n<p>卡内基·梅隆大学的玛丽·肖（Mary Shaw）和戴维·加兰（David Garlan）对软件架构做了很多研究，他们在1994年的一篇文章《软件架构介绍》（An Introduction to Software Architecture）中写到：<\/p>\n<blockquote>\n<p>“When systems are constructed from many components, the organization of the overall system-the software architecture-presents a new set of design problems.”<\/p>\n<\/blockquote>\n<p>简单翻译一下：随着软件系统规模的增加，计算相关的算法和数据结构不再构成主要的设计问题；当系统由许多部分组成时，整个系统的组织，也就是所说的“软件架构”，导致了一系列新的设计问题。<\/p>\n<p>这段话很好地解释了“软件架构”为何先在Rational或者Microsoft这样的大公司开始逐步流行起来。因为只有大公司开发的软件系统才具备较大规模，而只有规模较大的软件系统才会面临软件架构相关的问题，例如：<\/p>\n<ul>\n<li><p>系统规模庞大，内部耦合严重，开发效率低；<\/p>\n<\/li>\n<li><p>系统耦合严重，牵一发动全身，后续修改和扩展困难；<\/p>\n<\/li>\n<li><p>系统逻辑复杂，容易出问题，出问题后很难排查和修复。<\/p>\n<\/li>\n<\/ul>\n<p>软件架构的出现有其历史必然性。20世纪60年代第一次软件危机引出了“结构化编程”，创造了“模块”概念；20世纪80年代第二次软件危机引出了“面向对象编程”，创造了“对象”概念；到了20世纪90年代“软件架构”开始流行，创造了“组件”概念。我们可以看到，“模块”“对象”“组件”本质上都是对达到一定规模的软件进行拆分，差别只是在于随着软件的复杂度不断增加，拆分的粒度越来越粗，拆分的层次越来越高。<\/p>\n<p>《人月神话》中提到的IBM 360大型系统，开发时间是1964年，那个时候结构化编程都还没有提出来，更不用说软件架构了。如果IBM 360系统放在20世纪90年代开发，不管是质量还是效率、成本，都会比1964年开始做要好得多，当然，这样的话我们可能就看不到《人月神话》了。<\/p>\n<h2 id=\"-\">小结<\/h2>\n<p>今天我为你回顾了软件开发进化的历史，以及软件架构出现的历史背景，从历史发展的角度，希望对你深入了解架构设计的本质有所帮助。<\/p>\n<p>这就是今天的全部内容，留一道思考题给你吧。为何结构化编程、面向对象编程、软件工程、架构设计最后都没有成为软件领域的银弹？<\/p>\n<p>欢迎你把答案写到留言区，和我一起讨论。相信经过深度思考的回答，也会让你对知识的理解更加深刻。（编辑乱入：精彩的留言有机会获得丰厚福利哦！）<\/p>\n<p><\/p>\n","footer_cover_data":{"img_url":"","mp_url":"","link_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{},"product_id":100006601,"like_count":470,"had_liked":false,"article_subtitle":"无","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/7d\/80\/7d858422ae749d95666e7f658632ad80.mp3","id":6463,"had_viewed":false,"article_title":"02 | 架构设计的历史背景","column_bgcolor":"#a2cde8","share":{"content":"前阿里P9技术专家的实战架构心法","title":"李运华 · 从0开始学架构","poster":"https:\/\/static001.geekbang.org\/resource\/image\/ce\/db\/ceb37edc8efefc8b2cde54f6592340db.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/a9\/ed\/a96b163e2d9bf19cdfc0f5d0d69e13ed.jpg"},"is_video_preview":false,"article_summary":"理解了架构的有关概念和定义之后，今天，我会给你讲讲架构设计的历史背景。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/ae\/3c\/ae7c93b68f42c4c232f113b28245233c.jpeg","column_sale_type":2,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/a9\/ed\/a96b163e2d9bf19cdfc0f5d0d69e13ed.jpg","column_id":81,"audio_time_arr":{"m":"11","s":"06","h":"00"},"video_time":"","audio_title":"02架构设计的历史背景","audio_md5":"7d858422ae749d95666e7f658632ad80","video_size":0,"text_read_percent":0,"comment_count":241,"cid":81,"article_sharetitle":"架构设计的历史背景是什么？","column_is_onboard":true,"article_cshort":"<p>理解了架构的有关概念和定义之后，今天，我会给你讲讲<span class=\"orange\">架构设计的历史背景<\/span>。我认为，如果想要深入理解一个事物的本质，最好的方式就是去追寻这个事物出现的历史背景和推动因素。我们先来简单梳理一下软件开发进化的历史，探索一下软件架构出现的历史背景。<\/p>\n<h2 id=\"-1940-\">机器语言（1940年之前）<\/h2>\n<p>最早的软件开发使用的是“<strong>机器语言<\/strong>”，直接使用二进制码0和1来表示机器可以识别的指令和数据。例如，在8086机器上完成“s=768+12288-1280”的数学运算，机器码如下：<\/p>\n<pre><code>101100000000000000000011\n000001010000000000110000\n001011010000000000000101\n<\/code><\/pre><p>不用多说，不管是当时的程序员，还是现在的程序员，第一眼看到这样一串东西时，肯定是一头雾水，因为这实在是太难看懂了，这还只是一行运算，如果要输出一个“hello world”，面对几十上百行这样的0\/1串，眼睛都要花了！<\/p>\n<p>看都没法看，更何况去写这样的程序，如果不小心哪个地方敲错了，将1敲成了0，例如：<\/p>\n<pre><code>101100000000000000000011\n000001010000000000110000\n001011000000000000000101\n<\/code><\/pre><p>如果要找出这个程序中的错误，程序员的心里阴影面积有多大？<\/p>\n<p>归纳一下，机器语言的主要问题是三难：<strong>太难写、太难读、太难改<\/strong>！<\/p>\n<h2 id=\"-20-40-\">汇编语言（20世纪40年代）<\/h2>\n<p>为了解决机器语言编写、阅读、修改复杂的问题，<strong>汇编语言<\/strong>应运而生。汇编语言又叫“<strong>符号语言<\/strong>”，用助记符代替机器指令的操作码，用地址符号（Symbol）或标号（Label）代替指令或操作数的地址。<\/p>\n<p>例如，为了完成“将寄存器BX的内容送到AX中”的简单操作，汇编语言和机器语言分别如下。<\/p>\n<pre><code>机器语言：1000100111011000\n汇编语言：mov ax,bx\n<\/code><\/pre><p>相比机器语言来说，汇编语言就清晰得多了。mov是操作，ax和bx是寄存器代号，mov ax,bx语句基本上就是“将寄存器BX的内容送到AX”的简化版的翻译，即使不懂汇编，单纯看到这样一串语言，至少也能明白大概意思。<\/p>\n<p>汇编语言虽然解决了机器语言读写复杂的问题，但本质上还是<strong>面向机器<\/strong>的，因为写汇编语言需要我们精确了解计算机底层的知识。例如，CPU指令、寄存器、段地址等底层的细节。这对于程序员来说同样很复杂，因为程序员需要将现实世界中的问题和需求按照机器的逻辑进行翻译。例如，对于程序员来说，在现实世界中面对的问题是4 + 6 = ？。而要用汇编语言实现一个简单的加法运算，代码如下：<\/p>\n<pre><code>.section .data\n  a: .int 10\n  b: .int 20\n  format: .asciz &quot;%d\\n&quot;\n.section .text\n.global _start\n_start:\n  movl a, %edx　　\n  addl b, %edx　　\n  pushl %edx\n  pushl $format\n  call printf\n  movl $0, (%esp)\n  call exit\n<\/code><\/pre><p>这还只是实现一个简单的加法运算所需要的汇编程序，可以想象一下，实现一个四则运算的程序会更加复杂，更不用说用汇编写一个操作系统了！<\/p>\n<p>除了编写本身复杂，还有另外一个复杂的地方在于：不同CPU的汇编指令和结构是不同的。例如，Intel的CPU和Motorola的CPU指令不同，同样一个程序，为Intel的CPU写一次，还要为Motorola的CPU再写一次，而且指令完全不同。<\/p>\n<h2 id=\"-20-50-\">高级语言（20世纪50年代）<\/h2>\n<p>为了解决汇编语言的问题，计算机前辈们从20世纪50年代开始又设计了多个<strong>高级语言<\/strong>，最初的高级语言有下面几个，并且这些语言至今还在特定的领域继续使用。<\/p>\n","video_width":0,"column_could_sub":true,"article_ctime":1525129200,"score":"21525129200","video_media_map":{},"video_preview":{},"video":0,"video_time_arr":{"m":"","s":"","h":""},"video_total_seconds":0},"extra":{},"error":{}}