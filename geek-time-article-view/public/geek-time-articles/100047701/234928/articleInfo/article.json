{"code":0,"data":{"video_id":"","sku":"100047701","video_cover":"","author_name":"朱晔","text_read_version":0,"audio_size":19520688,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/26\/3f\/263ae1f586456ef04b74c6b5fded113f.jpg","subtitles":{},"product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/01\/24\/0141dac641c535a30a2bdafadcca2924\/ld\/ld.m3u8","chapter_id":"0","column_had_sub":true,"audio_dubber":"王少泽","is_finished":false,"inline_video_subtitles":{},"like":{"had_done":false,"count":76},"neighbors":{"left":{"id":231568,"article_title":"24 | 业务代码写完，就意味着生产就绪了？"},"right":{"id":234930,"article_title":"26 | 数据存储：NoSQL与RDBMS如何取长补短、相辅相成？"}},"audio_time":"00:20:20","video_height":0,"rate_percent":0,"article_content":"<p>你好，我是朱晔。今天，我来和你聊聊好用但容易出错的异步处理。<\/p><p>异步处理是互联网应用不可或缺的一种架构模式，大多数业务项目都是由同步处理、异步处理和定时任务处理三种模式相辅相成实现的。<\/p><p>区别于同步处理，异步处理无需同步等待流程处理完毕，因此适用场景主要包括：<\/p><ul>\n<li>服务于主流程的分支流程。比如，在注册流程中，把数据写入数据库的操作是主流程，但注册后给用户发优惠券或欢迎短信的操作是分支流程，时效性不那么强，可以进行异步处理。<\/li>\n<li>用户不需要实时看到结果的流程。比如，下单后的配货、送货流程完全可以进行异步处理，每个阶段处理完成后，再给用户发推送或短信让用户知晓即可。<\/li>\n<\/ul><p>同时，异步处理因为可以有MQ中间件的介入用于任务的缓冲的分发，所以相比于同步处理，在应对流量洪峰、实现模块解耦和消息广播方面有功能优势。<\/p><p>不过，异步处理虽然好用，但在实现的时候却有三个最容易犯的错，分别是异步处理流程的可靠性问题、消息发送模式的区分问题，以及大量死信消息堵塞队列的问题。今天，我就用三个代码案例结合目前常用的MQ系统RabbitMQ，来和你具体聊聊。<\/p><p>今天这一讲的演示，我都会使用Spring AMQP来操作RabbitMQ，所以你需要先引入amqp依赖：<\/p><!-- [[[read_end]]] --><pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-amqp&lt;\/artifactId&gt;\n&lt;\/dependency&gt;\n<\/code><\/pre><h2>异步处理需要消息补偿闭环<\/h2><p>使用类似RabbitMQ、RocketMQ等MQ系统来做消息队列实现异步处理，虽然说消息可以落地到磁盘保存，即使MQ出现问题消息数据也不会丢失，但是异步流程在消息发送、传输、处理等环节，都可能发生消息丢失。此外，任何MQ中间件都无法确保100%可用，需要考虑不可用时异步流程如何继续进行。<\/p><p>因此，<strong>对于异步处理流程，必须考虑补偿或者说建立主备双活流程<\/strong>。<\/p><p>我们来看一个用户注册后异步发送欢迎消息的场景。用户注册落数据库的流程为同步流程，会员服务收到消息后发送欢迎消息的流程为异步流程。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/62\/93\/629d9f0557cd7f06ac9ee2e871524893.png?wh=1596*836\" alt=\"\"><\/p><p>我们来分析一下：<\/p><ul>\n<li>蓝色的线，使用MQ进行的异步处理，我们称作主线，可能存在消息丢失的情况（虚线代表异步调用）；<\/li>\n<li>绿色的线，使用补偿Job定期进行消息补偿，我们称作备线，用来补偿主线丢失的消息；<\/li>\n<li>考虑到极端的MQ中间件失效的情况，我们要求备线的处理吞吐能力达到主线的能力水平。<\/li>\n<\/ul><p>我们来看一下相关的实现代码。<\/p><p>首先，定义UserController用于注册+发送异步消息。对于注册方法，我们一次性注册10个用户，用户注册消息不能发送出去的概率为50%。<\/p><pre><code>@RestController\n@Slf4j\n@RequestMapping(&quot;user&quot;)\npublic class UserController {\n    @Autowired\n    private UserService userService;\n    @Autowired\n    private RabbitTemplate rabbitTemplate;\n\n    @GetMapping(&quot;register&quot;)\n    public void register() {\n        \/\/模拟10个用户注册\n        IntStream.rangeClosed(1, 10).forEach(i -&gt; {\n            \/\/落库\n            User user = userService.register();\n            \/\/模拟50%的消息可能发送失败\n            if (ThreadLocalRandom.current().nextInt(10) % 2 == 0) {\n                \/\/通过RabbitMQ发送消息\n               rabbitTemplate.convertAndSend(RabbitConfiguration.EXCHANGE, RabbitConfiguration.ROUTING_KEY, user);\n                log.info(&quot;sent mq user {}&quot;, user.getId());\n            }\n        });\n    }\n}\n<\/code><\/pre><p>然后，定义MemberService类用于模拟会员服务。会员服务监听用户注册成功的消息，并发送欢迎短信。我们使用ConcurrentHashMap来存放那些发过短信的用户ID实现幂等，避免相同的用户进行补偿时重复发送短信：<\/p><pre><code>@Component\n@Slf4j\npublic class MemberService {\n    \/\/发送欢迎消息的状态\n    private Map&lt;Long, Boolean&gt; welcomeStatus = new ConcurrentHashMap&lt;&gt;();\n    \/\/监听用户注册成功的消息，发送欢迎消息\n    @RabbitListener(queues = RabbitConfiguration.QUEUE)\n    public void listen(User user) {\n        log.info(&quot;receive mq user {}&quot;, user.getId());\n        welcome(user);\n    }\n    \/\/发送欢迎消息\n    public void welcome(User user) {\n        \/\/去重操作\n        if (welcomeStatus.putIfAbsent(user.getId(), true) == null) {\n            try {\n                TimeUnit.SECONDS.sleep(2);\n            } catch (InterruptedException e) {\n            }\n            log.info(&quot;memberService: welcome new user {}&quot;, user.getId());\n        }\n    }\n}\n<\/code><\/pre><p>对于MQ消费程序，处理逻辑务必考虑去重（支持幂等），原因有几个：<\/p><ul>\n<li>MQ消息可能会因为中间件本身配置错误、稳定性等原因出现重复。<\/li>\n<li>自动补偿重复，比如本例，同一条消息可能既走MQ也走补偿，肯定会出现重复，而且考虑到高内聚，补偿Job本身不会做去重处理。<\/li>\n<li>人工补偿重复。出现消息堆积时，异步处理流程必然会延迟。如果我们提供了通过后台进行补偿的功能，那么在处理遇到延迟的时候，很可能会先进行人工补偿，过了一段时间后处理程序又收到消息了，重复处理。我之前就遇到过一次由MQ故障引发的事故，MQ中堆积了几十万条发放资金的消息，导致业务无法及时处理，运营以为程序出错了就先通过后台进行了人工处理，结果MQ系统恢复后消息又被重复处理了一次，造成大量资金重复发放。<\/li>\n<\/ul><p>接下来，定义补偿Job也就是备线操作。<\/p><p>我们在CompensationJob中定义一个@Scheduled定时任务，5秒做一次补偿操作，因为Job并不知道哪些用户注册的消息可能丢失，所以是全量补偿，补偿逻辑是：每5秒补偿一次，按顺序一次补偿5个用户，下一次补偿操作从上一次补偿的最后一个用户ID开始；对于补偿任务我们提交到线程池进行“异步”处理，提高处理能力。<\/p><pre><code>@Component\n@Slf4j\npublic class CompensationJob {\n    \/\/补偿Job异步处理线程池\n    private static ThreadPoolExecutor compensationThreadPool = new ThreadPoolExecutor(\n            10, 10,\n            1, TimeUnit.HOURS,\n            new ArrayBlockingQueue&lt;&gt;(1000),\n            new ThreadFactoryBuilder().setNameFormat(&quot;compensation-threadpool-%d&quot;).get());\n    @Autowired\n    private UserService userService;\n    @Autowired\n    private MemberService memberService;\n    \/\/目前补偿到哪个用户ID\n    private long offset = 0;\n\n    \/\/10秒后开始补偿，5秒补偿一次\n    @Scheduled(initialDelay = 10_000, fixedRate = 5_000)\n    public void compensationJob() {\n        log.info(&quot;开始从用户ID {} 补偿&quot;, offset);\n        \/\/获取从offset开始的用户\n        userService.getUsersAfterIdWithLimit(offset, 5).forEach(user -&gt; {\n            compensationThreadPool.execute(() -&gt; memberService.welcome(user));\n            offset = user.getId();\n        });\n    }\n}\n<\/code><\/pre><p>为了实现高内聚，主线和备线处理消息，最好使用同一个方法。比如，本例中MemberService监听到MQ消息和CompensationJob补偿，调用的都是welcome方法。<\/p><p>此外值得一说的是，Demo中的补偿逻辑比较简单，生产级的代码应该在以下几个方面进行加强：<\/p><ul>\n<li>考虑配置补偿的频次、每次处理数量，以及补偿线程池大小等参数为合适的值，以满足补偿的吞吐量。<\/li>\n<li>考虑备线补偿数据进行适当延迟。比如，对注册时间在30秒之前的用户再进行补偿，以方便和主线MQ实时流程错开，避免冲突。<\/li>\n<li>诸如当前补偿到哪个用户的offset数据，需要落地数据库。<\/li>\n<li>补偿Job本身需要高可用，可以使用类似XXLJob或ElasticJob等任务系统。<\/li>\n<\/ul><p>运行程序，执行注册方法注册10个用户，输出如下：<\/p><pre><code>[17:01:16.570] [http-nio-45678-exec-1] [INFO ] [o.g.t.c.a.compensation.UserController:28  ] - sent mq user 1\n[17:01:16.571] [http-nio-45678-exec-1] [INFO ] [o.g.t.c.a.compensation.UserController:28  ] - sent mq user 5\n[17:01:16.572] [http-nio-45678-exec-1] [INFO ] [o.g.t.c.a.compensation.UserController:28  ] - sent mq user 7\n[17:01:16.573] [http-nio-45678-exec-1] [INFO ] [o.g.t.c.a.compensation.UserController:28  ] - sent mq user 8\n[17:01:16.594] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [INFO ] [o.g.t.c.a.compensation.MemberService:18  ] - receive mq user 1\n[17:01:18.597] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [INFO ] [o.g.t.c.a.compensation.MemberService:28  ] - memberService: welcome new user 1\n[17:01:18.601] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [INFO ] [o.g.t.c.a.compensation.MemberService:18  ] - receive mq user 5\n[17:01:20.603] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [INFO ] [o.g.t.c.a.compensation.MemberService:28  ] - memberService: welcome new user 5\n[17:01:20.604] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [INFO ] [o.g.t.c.a.compensation.MemberService:18  ] - receive mq user 7\n[17:01:22.605] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [INFO ] [o.g.t.c.a.compensation.MemberService:28  ] - memberService: welcome new user 7\n[17:01:22.606] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [INFO ] [o.g.t.c.a.compensation.MemberService:18  ] - receive mq user 8\n[17:01:24.611] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [INFO ] [o.g.t.c.a.compensation.MemberService:28  ] - memberService: welcome new user 8\n[17:01:25.498] [scheduling-1] [INFO ] [o.g.t.c.a.compensation.CompensationJob:29  ] - 开始从用户ID 0 补偿\n[17:01:27.510] [compensation-threadpool-1] [INFO ] [o.g.t.c.a.compensation.MemberService:28  ] - memberService: welcome new user 2\n[17:01:27.510] [compensation-threadpool-3] [INFO ] [o.g.t.c.a.compensation.MemberService:28  ] - memberService: welcome new user 4\n[17:01:27.511] [compensation-threadpool-2] [INFO ] [o.g.t.c.a.compensation.MemberService:28  ] - memberService: welcome new user 3\n[17:01:30.496] [scheduling-1] [INFO ] [o.g.t.c.a.compensation.CompensationJob:29  ] - 开始从用户ID 5 补偿\n[17:01:32.500] [compensation-threadpool-6] [INFO ] [o.g.t.c.a.compensation.MemberService:28  ] - memberService: welcome new user 6\n[17:01:32.500] [compensation-threadpool-9] [INFO ] [o.g.t.c.a.compensation.MemberService:28  ] - memberService: welcome new user 9\n[17:01:35.496] [scheduling-1] [INFO ] [o.g.t.c.a.compensation.CompensationJob:29  ] - 开始从用户ID 9 补偿\n[17:01:37.501] [compensation-threadpool-0] [INFO ] [o.g.t.c.a.compensation.MemberService:28  ] - memberService: welcome new user 10\n[17:01:40.495] [scheduling-1] [INFO ] [o.g.t.c.a.compensation.CompensationJob:29  ] - 开始从用户ID 10 补偿\n<\/code><\/pre><p>可以看到：<\/p><ul>\n<li>总共10个用户，MQ发送成功的用户有四个，分别是用户1、5、7、8。<\/li>\n<li>补偿任务第一次运行，补偿了用户2、3、4，第二次运行补偿了用户6、9，第三次运行补充了用户10。<\/li>\n<\/ul><p>最后提一下，针对消息的补偿闭环处理的最高标准是，能够达到补偿全量数据的吞吐量。也就是说，如果补偿备线足够完善，即使直接把MQ停机，虽然会略微影响处理的及时性，但至少确保流程都能正常执行。<\/p><h2>注意消息模式是广播还是工作队列<\/h2><p>在今天这一讲的一开始，我们提到异步处理的一个重要优势，是实现消息广播。<\/p><p>消息广播，和我们平时说的“广播”意思差不多，就是希望同一条消息，不同消费者都能分别消费；而队列模式，就是不同消费者共享消费同一个队列的数据，相同消息只能被某一个消费者消费一次。<\/p><p>比如，同一个用户的注册消息，会员服务需要监听以发送欢迎短信，营销服务同样需要监听以发送新用户小礼物。但是，会员服务、营销服务都可能有多个实例，我们期望的是同一个用户的消息，可以同时广播给不同的服务（广播模式），但对于同一个服务的不同实例（比如会员服务1和会员服务2），不管哪个实例来处理，处理一次即可（工作队列模式）：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/79\/14\/79994116247045ff90652254770a6d14.png?wh=1548*814\" alt=\"\"><\/p><p>在实现代码的时候，我们务必确认MQ系统的机制，确保消息的路由按照我们的期望。<\/p><p>对于类似RocketMQ这样的MQ来说，实现类似功能比较简单直白：如果消费者属于一个组，那么消息只会由同一个组的一个消费者来消费；如果消费者属于不同组，那么每个组都能消费一遍消息。<\/p><p>而对于RabbitMQ来说，消息路由的模式采用的是队列+交换器，队列是消息的载体，交换器决定了消息路由到队列的方式，配置比较复杂，容易出错。所以，接下来我重点和你讲讲RabbitMQ的相关代码实现。<\/p><p>我们还是以上面的架构图为例，来演示使用RabbitMQ实现广播模式和工作队列模式的坑。<\/p><p><strong>第一步，实现会员服务监听用户服务发出的新用户注册消息的那部分逻辑。<\/strong><\/p><p>如果我们启动两个会员服务，那么同一个用户的注册消息应该只能被其中一个实例消费。<\/p><p>我们分别实现RabbitMQ队列、交换器、绑定三件套。其中，队列用的是匿名队列，交换器用的是直接交换器DirectExchange，交换器绑定到匿名队列的路由Key是空字符串。在收到消息之后，我们会打印所在实例使用的端口：<\/p><pre><code>\/\/为了代码简洁直观，我们把消息发布者、消费者、以及MQ的配置代码都放在了一起\n@Slf4j\n@Configuration\n@RestController\n@RequestMapping(&quot;workqueuewrong&quot;)\npublic class WorkQueueWrong {\n\n    private static final String EXCHANGE = &quot;newuserExchange&quot;;\n    @Autowired\n    private RabbitTemplate rabbitTemplate;\n\n    @GetMapping\n    public void sendMessage() {\n        rabbitTemplate.convertAndSend(EXCHANGE, &quot;&quot;, UUID.randomUUID().toString());\n    }\n\n    \/\/使用匿名队列作为消息队列\n    @Bean\n    public Queue queue() {\n        return new AnonymousQueue();\n    }\n  \n    \/\/声明DirectExchange交换器，绑定队列到交换器\n    @Bean\n    public Declarables declarables() {\n        DirectExchange exchange = new DirectExchange(EXCHANGE);\n        return new Declarables(queue(), exchange,\n                BindingBuilder.bind(queue()).to(exchange).with(&quot;&quot;));\n    }\n\n    \/\/监听队列，队列名称直接通过SpEL表达式引用Bean\n    @RabbitListener(queues = &quot;#{queue.name}&quot;)\n    public void memberService(String userName) {\n        log.info(&quot;memberService: welcome message sent to new user {} from {}&quot;, userName, System.getProperty(&quot;server.port&quot;));\n\n    }\n}   \n<\/code><\/pre><p>使用12345和45678两个端口启动两个程序实例后，调用sendMessage接口发送一条消息，输出的日志，显示<strong>同一个会员服务两个实例都收到了消息<\/strong>：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/bd\/5f\/bd649f78f2f3a7c732b8883fd4d5255f.png?wh=2918*120\" alt=\"\"><\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/96\/04\/96278ba64ac411d5910d7ce8073c7304.png?wh=2898*126\" alt=\"\"><\/p><p><strong>出现这个问题的原因是，我们没有理清楚RabbitMQ直接交换器和队列的绑定关系。<\/strong><\/p><p>如下图所示，RabbitMQ的直接交换器根据routingKey对消息进行路由。由于我们的程序每次启动都会创建匿名（随机命名）的队列，所以相当于每一个会员服务实例都对应独立的队列，以空routingKey绑定到直接交换器。用户服务发出消息的时候也设置了routingKey为空，所以直接交换器收到消息之后，发现有两条队列匹配，于是都转发了消息：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/c6\/f8\/c685c1a07347b040ee5ba1b48ce00af8.png?wh=1864*446\" alt=\"\"><\/p><p>要修复这个问题其实很简单，对于会员服务不要使用匿名队列，而是使用同一个队列即可。把上面代码中的匿名队列替换为一个普通队列：<\/p><pre><code>private static final String QUEUE = &quot;newuserQueue&quot;;\n@Bean\npublic Queue queue() {\n    return new Queue(QUEUE);\n}\n<\/code><\/pre><p>测试发现，对于同一条消息来说，两个实例中只有一个实例可以收到，不同的消息按照轮询分发给不同的实例。现在，交换器和队列的关系是这样的：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/65\/7b\/65205002a2cdde62d55330263afd317b.png?wh=1724*424\" alt=\"\"><\/p><p><strong>第二步，进一步完整实现用户服务需要广播消息给会员服务和营销服务的逻辑。<\/strong><\/p><p>我们希望会员服务和营销服务都可以收到广播消息，但会员服务或营销服务中的每个实例只需要收到一次消息。<\/p><p>代码如下，我们声明了一个队列和一个广播交换器FanoutExchange，然后模拟两个用户服务和两个营销服务：<\/p><pre><code>@Slf4j\n@Configuration\n@RestController\n@RequestMapping(&quot;fanoutwrong&quot;)\npublic class FanoutQueueWrong {\n    private static final String QUEUE = &quot;newuser&quot;;\n    private static final String EXCHANGE = &quot;newuser&quot;;\n    @Autowired\n    private RabbitTemplate rabbitTemplate;\n\n    @GetMapping\n    public void sendMessage() {\n        rabbitTemplate.convertAndSend(EXCHANGE, &quot;&quot;, UUID.randomUUID().toString());\n    }\n    \/\/声明FanoutExchange，然后绑定到队列，FanoutExchange绑定队列的时候不需要routingKey\n    @Bean\n    public Declarables declarables() {\n        Queue queue = new Queue(QUEUE);\n        FanoutExchange exchange = new FanoutExchange(EXCHANGE);\n        return new Declarables(queue, exchange,\n                BindingBuilder.bind(queue).to(exchange));\n    }\n    \/\/会员服务实例1\n    @RabbitListener(queues = QUEUE)\n    public void memberService1(String userName) {\n        log.info(&quot;memberService1: welcome message sent to new user {}&quot;, userName);\n\n    }\n    \/\/会员服务实例2\n    @RabbitListener(queues = QUEUE)\n    public void memberService2(String userName) {\n        log.info(&quot;memberService2: welcome message sent to new user {}&quot;, userName);\n\n    }\n    \/\/营销服务实例1\n    @RabbitListener(queues = QUEUE)\n    public void promotionService1(String userName) {\n        log.info(&quot;promotionService1: gift sent to new user {}&quot;, userName);\n    }\n    \/\/营销服务实例2\n    @RabbitListener(queues = QUEUE)\n    public void promotionService2(String userName) {\n        log.info(&quot;promotionService2: gift sent to new user {}&quot;, userName);\n    }\n}\n<\/code><\/pre><p>我们请求四次sendMessage接口，注册四个用户。通过日志可以发现，<strong>一条用户注册的消息，要么被会员服务收到，要么被营销服务收到，显然这不是广播<\/strong>。那，我们使用的FanoutExchange，看名字就应该是实现广播的交换器，为什么根本没有起作用呢？<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/34\/6d\/34e2ea5e0f38ac029ff3d909d8b9606d.png?wh=2974*390\" alt=\"\"><\/p><p>其实，广播交换器非常简单，它会忽略routingKey，广播消息到所有绑定的队列。在这个案例中，两个会员服务和两个营销服务都绑定了同一个队列，所以这四个服务只能收到一次消息：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/20\/cb\/20adae38645d1cc169756fb4888211cb.png?wh=1656*462\" alt=\"\"><\/p><p>修改方式很简单，我们把队列进行拆分，会员和营销两组服务分别使用一条独立队列绑定到广播交换器即可：<\/p><pre><code>@Slf4j\n@Configuration\n@RestController\n@RequestMapping(&quot;fanoutright&quot;)\npublic class FanoutQueueRight {\n    private static final String MEMBER_QUEUE = &quot;newusermember&quot;;\n    private static final String PROMOTION_QUEUE = &quot;newuserpromotion&quot;;\n    private static final String EXCHANGE = &quot;newuser&quot;;\n    @Autowired\n    private RabbitTemplate rabbitTemplate;\n    @GetMapping\n    public void sendMessage() {\n        rabbitTemplate.convertAndSend(EXCHANGE, &quot;&quot;, UUID.randomUUID().toString());\n    }\n    @Bean\n    public Declarables declarables() {\n        \/\/会员服务队列\n        Queue memberQueue = new Queue(MEMBER_QUEUE);\n        \/\/营销服务队列\n        Queue promotionQueue = new Queue(PROMOTION_QUEUE);\n        \/\/广播交换器\n        FanoutExchange exchange = new FanoutExchange(EXCHANGE);\n        \/\/两个队列绑定到同一个交换器\n        return new Declarables(memberQueue, promotionQueue, exchange,\n                BindingBuilder.bind(memberQueue).to(exchange),\n                BindingBuilder.bind(promotionQueue).to(exchange));\n    }\n    @RabbitListener(queues = MEMBER_QUEUE)\n    public void memberService1(String userName) {\n        log.info(&quot;memberService1: welcome message sent to new user {}&quot;, userName);\n    }\n    @RabbitListener(queues = MEMBER_QUEUE)\n    public void memberService2(String userName) {\n        log.info(&quot;memberService2: welcome message sent to new user {}&quot;, userName);\n    }\n    @RabbitListener(queues = PROMOTION_QUEUE)\n    public void promotionService1(String userName) {\n        log.info(&quot;promotionService1: gift sent to new user {}&quot;, userName);\n    }\n    @RabbitListener(queues = PROMOTION_QUEUE)\n    public void promotionService2(String userName) {\n        log.info(&quot;promotionService2: gift sent to new user {}&quot;, userName);\n    }\n}\n<\/code><\/pre><p>现在，交换器和队列的结构是这样的：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/9a\/78\/9a3b06605913aa17025854dfbe6a5778.png?wh=1640*434\" alt=\"\"><\/p><p>从日志输出可以验证，对于每一条MQ消息，会员服务和营销服务分别都会收到一次，一条消息广播到两个服务的同时，在每一个服务的两个实例中通过轮询接收：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/29\/63\/2975386cec273f3ca54b42872d9f4b63.png?wh=2886*390\" alt=\"\"><\/p><p>所以说，理解了RabbitMQ直接交换器、广播交换器的工作方式之后，我们对消息的路由方式了解得很清晰了，实现代码就不会出错。<\/p><p>对于异步流程来说，消息路由模式一旦配置出错，轻则可能导致消息的重复处理，重则可能导致重要的服务无法接收到消息，最终造成业务逻辑错误。<\/p><p>每个MQ中间件对消息的路由处理的配置各不相同，我们一定要先了解原理再着手编码。<\/p><h2>别让死信堵塞了消息队列<\/h2><p>我们在介绍<a href=\"https:\/\/time.geekbang.org\/column\/article\/210337\">线程池<\/a>的时候提到，如果线程池的任务队列没有上限，那么最终可能会导致OOM。使用消息队列处理异步流程的时候，我们也同样要注意消息队列的任务堆积问题。对于突发流量引起的消息队列堆积，问题并不大，适当调整消费者的消费能力应该就可以解决。<strong>但在很多时候，消息队列的堆积堵塞，是因为有大量始终无法处理的消息<\/strong>。<\/p><p>比如，用户服务在用户注册后发出一条消息，会员服务监听到消息后给用户派发优惠券，但因为用户并没有保存成功，会员服务处理消息始终失败，消息重新进入队列，然后还是处理失败。这种在MQ中像幽灵一样回荡的同一条消息，就是死信。<\/p><p>随着MQ被越来越多的死信填满，消费者需要花费大量时间反复处理死信，导致正常消息的消费受阻，<strong>最终MQ可能因为数据量过大而崩溃<\/strong>。<\/p><p>我们来测试一下这个场景。首先，定义一个队列、一个直接交换器，然后把队列绑定到交换器：<\/p><pre><code>@Bean\npublic Declarables declarables() {\n    \/\/队列\n    Queue queue = new Queue(Consts.QUEUE);\n    \/\/交换器\n    DirectExchange directExchange = new DirectExchange(Consts.EXCHANGE);\n    \/\/快速声明一组对象，包含队列、交换器，以及队列到交换器的绑定\n    return new Declarables(queue, directExchange,\n            BindingBuilder.bind(queue).to(directExchange).with(Consts.ROUTING_KEY));\n}\n<\/code><\/pre><p>然后，实现一个sendMessage方法来发送消息到MQ，访问一次提交一条消息，使用自增标识作为消息内容：<\/p><pre><code>\/\/自增消息标识\nAtomicLong atomicLong = new AtomicLong();\n@Autowired\nprivate RabbitTemplate rabbitTemplate;\n\n@GetMapping(&quot;sendMessage&quot;)\npublic void sendMessage() {\n    String msg = &quot;msg&quot; + atomicLong.incrementAndGet();\n    log.info(&quot;send message {}&quot;, msg);\n    \/\/发送消息\n    rabbitTemplate.convertAndSend(Consts.EXCHANGE, msg);\n}\n<\/code><\/pre><p>收到消息后，直接抛出空指针异常，模拟处理出错的情况：<\/p><pre><code>@RabbitListener(queues = Consts.QUEUE)\npublic void handler(String data) {\n    log.info(&quot;got message {}&quot;, data);\n    throw new NullPointerException(&quot;error&quot;);\n}\n<\/code><\/pre><p>调用sendMessage接口发送两条消息，然后来到RabbitMQ管理台，可以看到这两条消息始终在队列中，不断被重新投递，导致重新投递QPS达到了1063。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/11\/54\/1130fc65dee6acba4df08227baf4d554.jpg?wh=2284*1281\" alt=\"\"><\/p><p>同时，在日志中可以看到大量异常信息：<\/p><pre><code>[20:02:31.533] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [WARN ] [o.s.a.r.l.ConditionalRejectingErrorHandler:129 ] - Execution of Rabbit message listener failed.\norg.springframework.amqp.rabbit.support.ListenerExecutionFailedException: Listener method 'public void org.geekbang.time.commonmistakes.asyncprocess.deadletter.MQListener.handler(java.lang.String)' threw exception\n\tat org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:219)\n\tat org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandlerAndProcessResult(MessagingMessageListenerAdapter.java:143)\n\tat org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.onMessage(MessagingMessageListenerAdapter.java:132)\n\tat org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:1569)\n\tat org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.actualInvokeListener(AbstractMessageListenerContainer.java:1488)\n\tat org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:1476)\n\tat org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:1467)\n\tat org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.executeListener(AbstractMessageListenerContainer.java:1411)\n\tat org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.doReceiveAndExecute(SimpleMessageListenerContainer.java:958)\n\tat org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.receiveAndExecute(SimpleMessageListenerContainer.java:908)\n\tat org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.access$1600(SimpleMessageListenerContainer.java:81)\n\tat org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer$AsyncMessageProcessingConsumer.mainLoop(SimpleMessageListenerContainer.java:1279)\n\tat org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer$AsyncMessageProcessingConsumer.run(SimpleMessageListenerContainer.java:1185)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: java.lang.NullPointerException: error\n\tat org.geekbang.time.commonmistakes.asyncprocess.deadletter.MQListener.handler(MQListener.java:14)\n\tat sun.reflect.GeneratedMethodAccessor46.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:171)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:120)\n\tat org.springframework.amqp.rabbit.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:50)\n\tat org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:211)\n\t... 13 common frames omitted\n<\/code><\/pre><p>解决死信无限重复进入队列最简单的方式是，在程序处理出错的时候，直接抛出AmqpRejectAndDontRequeueException异常，避免消息重新进入队列：<\/p><pre><code>throw new AmqpRejectAndDontRequeueException(&quot;error&quot;);\n<\/code><\/pre><p>但，我们更希望的逻辑是，对于同一条消息，能够先进行几次重试，解决因为网络问题导致的偶发消息处理失败，如果还是不行的话，再把消息投递到专门的一个死信队列。对于来自死信队列的数据，我们可能只是记录日志发送报警，即使出现异常也不会再重复投递。整个逻辑如下图所示：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/40\/28\/40f0cf14933178fd07690372199e8428.png?wh=1478*684\" alt=\"\"><\/p><p>针对这个问题，Spring AMQP提供了非常方便的解决方案：<\/p><ul>\n<li>首先，定义死信交换器和死信队列。其实，这些都是普通的交换器和队列，只不过被我们专门用于处理死信消息。<\/li>\n<li>然后，通过RetryInterceptorBuilder构建一个RetryOperationsInterceptor，用于处理失败时候的重试。这里的策略是，最多尝试5次（重试4次）；并且采取指数退避重试，首次重试延迟1秒，第二次2秒，以此类推，最大延迟是10秒；如果第4次重试还是失败，则使用RepublishMessageRecoverer把消息重新投入一个“死信交换器”中。<\/li>\n<li>最后，定义死信队列的处理程序。这个案例中，我们只是简单记录日志。<\/li>\n<\/ul><p>对应的实现代码如下：<\/p><pre><code>\/\/定义死信交换器和队列，并且进行绑定\n@Bean\npublic Declarables declarablesForDead() {\n    Queue queue = new Queue(Consts.DEAD_QUEUE);\n    DirectExchange directExchange = new DirectExchange(Consts.DEAD_EXCHANGE);\n    return new Declarables(queue, directExchange,\n            BindingBuilder.bind(queue).to(directExchange).with(Consts.DEAD_ROUTING_KEY));\n}\n\/\/定义重试操作拦截器\n@Bean\npublic RetryOperationsInterceptor interceptor() {\n    return RetryInterceptorBuilder.stateless()\n            .maxAttempts(5) \/\/最多尝试（不是重试）5次\n            .backOffOptions(1000, 2.0, 10000) \/\/指数退避重试\n            .recoverer(new RepublishMessageRecoverer(rabbitTemplate, Consts.DEAD_EXCHANGE, Consts.DEAD_ROUTING_KEY)) \/\/重新投递重试达到上限的消息\n            .build();\n}\n\/\/通过定义SimpleRabbitListenerContainerFactory，设置其adviceChain属性为之前定义的RetryOperationsInterceptor来启用重试拦截器\n@Bean\npublic SimpleRabbitListenerContainerFactory rabbitListenerContainerFactory(ConnectionFactory connectionFactory) {\n    SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory();\n    factory.setConnectionFactory(connectionFactory);\n    factory.setAdviceChain(interceptor());\n    return factory;\n}\n\/\/死信队列处理程序\n@RabbitListener(queues = Consts.DEAD_QUEUE)\npublic void deadHandler(String data) {\n    log.error(&quot;got dead message {}&quot;, data);\n}\n<\/code><\/pre><p>执行程序，发送两条消息，日志如下：<\/p><pre><code>[11:22:02.193] [http-nio-45688-exec-1] [INFO ] [o.g.t.c.a.d.DeadLetterController:24  ] - send message msg1\n[11:22:02.219] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [INFO ] [o.g.t.c.a.deadletter.MQListener:13  ] - got message msg1\n[11:22:02.614] [http-nio-45688-exec-2] [INFO ] [o.g.t.c.a.d.DeadLetterController:24  ] - send message msg2\n[11:22:03.220] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [INFO ] [o.g.t.c.a.deadletter.MQListener:13  ] - got message msg1\n[11:22:05.221] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [INFO ] [o.g.t.c.a.deadletter.MQListener:13  ] - got message msg1\n[11:22:09.223] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [INFO ] [o.g.t.c.a.deadletter.MQListener:13  ] - got message msg1\n[11:22:17.224] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [INFO ] [o.g.t.c.a.deadletter.MQListener:13  ] - got message msg1\n[11:22:17.226] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [WARN ] [o.s.a.r.retry.RepublishMessageRecoverer:172 ] - Republishing failed message to exchange 'deadtest' with routing key deadtest\n[11:22:17.227] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [INFO ] [o.g.t.c.a.deadletter.MQListener:13  ] - got message msg2\n[11:22:17.229] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#1-1] [ERROR] [o.g.t.c.a.deadletter.MQListener:20  ] - got dead message msg1\n[11:22:18.232] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [INFO ] [o.g.t.c.a.deadletter.MQListener:13  ] - got message msg2\n[11:22:20.237] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [INFO ] [o.g.t.c.a.deadletter.MQListener:13  ] - got message msg2\n[11:22:24.241] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [INFO ] [o.g.t.c.a.deadletter.MQListener:13  ] - got message msg2\n[11:22:32.245] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [INFO ] [o.g.t.c.a.deadletter.MQListener:13  ] - got message msg2\n[11:22:32.246] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [WARN ] [o.s.a.r.retry.RepublishMessageRecoverer:172 ] - Republishing failed message to exchange 'deadtest' with routing key deadtest\n[11:22:32.250] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#1-1] [ERROR] [o.g.t.c.a.deadletter.MQListener:20  ] - got dead message msg2\n<\/code><\/pre><p>可以看到：<\/p><ul>\n<li>msg1的4次重试间隔分别是1秒、2秒、4秒、8秒，再加上首次的失败，所以最大尝试次数是5。<\/li>\n<li>4次重试后，RepublishMessageRecoverer把消息发往了死信交换器。<\/li>\n<li>死信处理程序输出了got dead message日志。<\/li>\n<\/ul><p>这里需要尤其注意的一点是，虽然我们几乎同时发送了两条消息，但是msg2是在msg1的四次重试全部结束后才开始处理。原因是，<strong>默认情况下SimpleMessageListenerContainer只有一个消费线程<\/strong>。可以通过增加消费线程来避免性能问题，如下我们直接设置concurrentConsumers参数为10，来增加到10个工作线程：<\/p><pre><code>@Bean\npublic SimpleRabbitListenerContainerFactory rabbitListenerContainerFactory(ConnectionFactory connectionFactory) {\n    SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory();\n    factory.setConnectionFactory(connectionFactory);\n    factory.setAdviceChain(interceptor());\n    factory.setConcurrentConsumers(10);\n    return factory;\n}\n<\/code><\/pre><p>当然，我们也可以设置maxConcurrentConsumers参数，来让SimpleMessageListenerContainer自己动态地调整消费者线程数。不过，我们需要特别注意它的动态开启新线程的策略。你可以通过<a href=\"https:\/\/docs.spring.io\/spring-amqp\/docs\/2.2.1.RELEASE\/reference\/html\/#listener-concurrency\">官方文档<\/a>，来了解这个策略。<\/p><h2>重点回顾<\/h2><p>在使用异步处理这种架构模式的时候，我们一般都会使用MQ中间件配合实现异步流程，需要重点考虑四个方面的问题。<\/p><p>第一，要考虑异步流程丢消息或处理中断的情况，异步流程需要有备线进行补偿。比如，我们今天介绍的全量补偿方式，即便异步流程彻底失效，通过补偿也能让业务继续进行。<\/p><p>第二，异步处理的时候需要考虑消息重复的可能性，处理逻辑需要实现幂等，防止重复处理。<\/p><p>第三，微服务场景下不同服务多个实例监听消息的情况，一般不同服务需要同时收到相同的消息，而相同服务的多个实例只需要轮询接收消息。我们需要确认MQ的消息路由配置是否满足需求，以避免消息重复或漏发问题。<\/p><p>第四，要注意始终无法处理的死信消息，可能会引发堵塞MQ的问题。一般在遇到消息处理失败的时候，我们可以设置一定的重试策略。如果重试还是不行，那可以把这个消息扔到专有的死信队列特别处理，不要让死信影响到正常消息的处理。<\/p><p>今天用到的代码，我都放在了GitHub上，你可以点击<a href=\"https:\/\/github.com\/JosephZhu1983\/java-common-mistakes\">这个链接<\/a>查看。<\/p><h2>思考与讨论<\/h2><ol>\n<li>在用户注册后发送消息到MQ，然后会员服务监听消息进行异步处理的场景下，有些时候我们会发现，虽然用户服务先保存数据再发送MQ，但会员服务收到消息后去查询数据库，却发现数据库中还没有新用户的信息。你觉得，这可能是什么问题呢，又该如何解决呢？<\/li>\n<li>除了使用Spring AMQP实现死信消息的重投递外，RabbitMQ 2.8.0 后支持的死信交换器DLX也可以实现类似功能。你能尝试用DLX实现吗，并比较下这两种处理机制？<\/li>\n<\/ol><p>关于使用MQ进行异步处理流程，你还遇到过其他问题吗？我是朱晔，欢迎在评论区与我留言分享你的想法，也欢迎你把今天的内容分享给你的朋友或同事，一起交流。<\/p>","footer_cover_data":{"img_url":"","mp_url":"","link_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{},"product_id":100047701,"like_count":98,"had_liked":false,"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/01\/24\/0141dac641c535a30a2bdafadcca2924.mp3","id":234928,"had_viewed":false,"article_title":"25 | 异步处理好用，但非常容易用错","column_bgcolor":"#F6F7FB","share":{"content":"全面避坑 + 最佳实践=健壮代码","title":"朱晔 · Java业务开发常见错误100例","poster":"https:\/\/static001.geekbang.org\/resource\/image\/e8\/54\/e8431409c7d415a2216c38c3c0a74254.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/da\/da\/da765d454b0e5172a07d8a0c085b66da.jpg"},"is_video_preview":false,"article_summary":"异步处理虽然好用，但实现时却容易犯三个错：异步处理流程的可靠性问题、消息发送模式的区分问题、大量死信消息堵塞队列的问题。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/d2\/91\/d29ed3b1323cf15d85c6b67857051491.jpeg","column_sale_type":2,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/da\/da\/da765d454b0e5172a07d8a0c085b66da.jpg","column_id":294,"audio_time_arr":{"m":"20","s":"20","h":"00"},"video_time":"","audio_title":"25-zy","audio_md5":"0141dac641c535a30a2bdafadcca2924","video_size":0,"text_read_percent":0,"comment_count":22,"cid":294,"article_sharetitle":"异步处理好用，但写Java业务代码时非常容易用错","column_is_onboard":true,"article_cshort":"<p>你好，我是朱晔。今天，我来和你聊聊好用但容易出错的异步处理。<\/p><p>异步处理是互联网应用不可或缺的一种架构模式，大多数业务项目都是由同步处理、异步处理和定时任务处理三种模式相辅相成实现的。<\/p><p>区别于同步处理，异步处理无需同步等待流程处理完毕，因此适用场景主要包括：<\/p><ul>\n<li>服务于主流程的分支流程。比如，在注册流程中，把数据写入数据库的操作是主流程，但注册后给用户发优惠券或欢迎短信的操作是分支流程，时效性不那么强，可以进行异步处理。<\/li>\n<li>用户不需要实时看到结果的流程。比如，下单后的配货、送货流程完全可以进行异步处理，每个阶段处理完成后，再给用户发推送或短信让用户知晓即可。<\/li>\n<\/ul><p>同时，异步处理因为可以有MQ中间件的介入用于任务的缓冲的分发，所以相比于同步处理，在应对流量洪峰、实现模块解耦和消息广播方面有功能优势。<\/p><p>不过，异步处理虽然好用，但在实现的时候却有三个最容易犯的错，分别是异步处理流程的可靠性问题、消息发送模式的区分问题，以及大量死信消息堵塞队列的问题。今天，我就用三个代码案例结合目前常用的MQ系统RabbitMQ，来和你具体聊聊。<\/p><p>今天这一讲的演示，我都会使用Spring AMQP来操作RabbitMQ，所以你需要先引入amqp依赖：<\/p>","video_width":0,"column_could_sub":true,"article_ctime":1589212800,"score":"31589212800","video_media_map":{},"video_preview":{},"video":0,"video_time_arr":{"m":"","s":"","h":""},"video_total_seconds":0},"extra":{},"error":{}}