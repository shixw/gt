{"code":0,"data":{"video_id":"","sku":"100002201","video_cover":"","author_name":"陈皓","text_read_version":0,"audio_size":6601315,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/0e\/74\/0ee1af55904044560462120a5519fe74.jpg","subtitles":{},"product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/media\/audio\/c5\/0a\/c5abfc6b2bc1ec1b944517363558cc0a\/ld\/ld.m3u8","chapter_id":"0","column_had_sub":true,"audio_dubber":"杨超","is_finished":false,"inline_video_subtitles":{},"like":{"had_done":false,"count":6},"neighbors":{"left":{"id":332606,"article_title":"111 | Go 编程模式：Map-Reduce"},"right":{"id":332608,"article_title":"113 | Go编程模式：修饰器"}},"audio_time":"00:06:54","video_height":0,"rate_percent":0,"article_content":"<p>你好，我是陈皓，网名左耳朵耗子。<\/p><p>这节课，我们来学习一下Go语言的代码生成的玩法。<\/p><p>Go语言的代码生成主要还是用来解决编程泛型的问题。泛型编程主要是解决这样一个问题：因为静态类型语言有类型，所以，相关的算法或是对数据处理的程序会因为类型不同而需要复制一份，这样会导致数据类型和算法功能耦合。<\/p><p>我之所以说泛型编程可以解决这样的问题，就是说，在写代码的时候，不用关心处理数据的类型，只需要关心相关的处理逻辑。<\/p><p>泛型编程是静态语言中非常非常重要的特征，如果没有泛型，我们就很难做到多态，也很难完成抽象，这就会导致我们的代码冗余量很大。<\/p><h2>现实中的类比<\/h2><p>为了帮你更好地理解，我举个现实当中的例子。我们用螺丝刀来做打比方，螺丝刀本来只有一个拧螺丝的作用，但是因为螺丝的类型太多，有平口的，有十字口的，有六角的……螺丝还有不同的尺寸，这就导致我们的螺丝刀为了要适配各种千奇百怪的螺丝类型（样式和尺寸），也是各种样式的。<\/p><p>而真正的抽象是，螺丝刀不应该关心螺丝的类型，它只要关注自己的功能是不是完备，并且让自己可以适配不同类型的螺丝就行了，这就是所谓的泛型编程要解决的实际问题。<\/p><h2>Go语方的类型检查<\/h2><p>因为Go语言目前并不支持真正的泛型，所以，只能用 <code>interface{}<\/code> 这样的类似于 <code>void*<\/code>  的过度泛型来玩，这就导致我们要在实际过程中进行类型检查。<\/p><!-- [[[read_end]]] --><p>Go语言的类型检查有两种技术，一种是 Type Assert，一种是Reflection。<\/p><h3>Type Assert<\/h3><p>这种技术，一般是对某个变量进行 <code>.(type)<\/code>的转型操作，它会返回两个值，分别是variable和error。  variable是被转换好的类型，error表示如果不能转换类型，则会报错。<\/p><p>在下面的示例中，我们有一个通用类型的容器，可以进行 <code>Put(val)<\/code>和 <code>Get()<\/code>，注意，这里使用了 <code>interface{}<\/code>做泛型。<\/p><pre><code>\/\/Container is a generic container, accepting anything.\ntype Container []interface{}\n\n\/\/Put adds an element to the container.\nfunc (c *Container) Put(elem interface{}) {\n    *c = append(*c, elem)\n}\n\/\/Get gets an element from the container.\nfunc (c *Container) Get() interface{} {\n    elem := (*c)[0]\n    *c = (*c)[1:]\n    return elem\n}\n<\/code><\/pre><p>我们可以这样使用：<\/p><pre><code>intContainer := &amp;Container{}\nintContainer.Put(7)\nintContainer.Put(42)\n<\/code><\/pre><p>但是，在把数据取出来时，因为类型是 <code>interface{}<\/code> ，所以，你还要做一个转型，只有转型成功，才能进行后续操作（因为 <code>interface{}<\/code>太泛了，泛到什么类型都可以放）。<\/p><p>下面是一个Type Assert的示例：<\/p><pre><code>\/\/ assert that the actual type is int\nelem, ok := intContainer.Get().(int)\nif !ok {\n    fmt.Println(&quot;Unable to read an int from intContainer&quot;)\n}\n\nfmt.Printf(&quot;assertExample: %d (%T)\\n&quot;, elem, elem)\n<\/code><\/pre><h3>Reflection<\/h3><p>对于Reflection，我们需要把上面的代码修改如下：<\/p><pre><code>type Container struct {\n    s reflect.Value\n}\nfunc NewContainer(t reflect.Type, size int) *Container {\n    if size &lt;=0  { size=64 }\n    return &amp;Container{\n        s: reflect.MakeSlice(reflect.SliceOf(t), 0, size), \n    }\n}\nfunc (c *Container) Put(val interface{})  error {\n    if reflect.ValueOf(val).Type() != c.s.Type().Elem() {\n        return fmt.Errorf(“Put: cannot put a %T into a slice of %s&quot;, \n            val, c.s.Type().Elem()))\n    }\n    c.s = reflect.Append(c.s, reflect.ValueOf(val))\n    return nil\n}\nfunc (c *Container) Get(refval interface{}) error {\n    if reflect.ValueOf(refval).Kind() != reflect.Ptr ||\n        reflect.ValueOf(refval).Elem().Type() != c.s.Type().Elem() {\n        return fmt.Errorf(&quot;Get: needs *%s but got %T&quot;, c.s.Type().Elem(), refval)\n    }\n    reflect.ValueOf(refval).Elem().Set( c.s.Index(0) )\n    c.s = c.s.Slice(1, c.s.Len())\n    return nil\n}\n<\/code><\/pre><p>这里的代码并不难懂，这是完全使用 Reflection的玩法，我简单解释下。<\/p><ul>\n<li>在 <code>NewContainer()<\/code>时，会根据参数的类型初始化一个Slice。<\/li>\n<li>在 <code>Put()<\/code>时，会检查 <code>val<\/code> 是否和Slice的类型一致。<\/li>\n<li>在 <code>Get()<\/code>时，我们需要用一个入参的方式，因为我们没有办法返回 <code>reflect.Value<\/code> 或 <code>interface{}<\/code>，不然还要做Type Assert。<\/li>\n<li>不过有类型检查，所以，必然会有检查不对的时候，因此，需要返回 <code>error<\/code>。<\/li>\n<\/ul><p>于是，在使用这段代码的时候，会是下面这个样子：<\/p><pre><code>f1 := 3.1415926\nf2 := 1.41421356237\n\nc := NewMyContainer(reflect.TypeOf(f1), 16)\n\nif err := c.Put(f1); err != nil {\n  panic(err)\n}\nif err := c.Put(f2); err != nil {\n  panic(err)\n}\n\ng := 0.0\n\nif err := c.Get(&amp;g); err != nil {\n  panic(err)\n}\nfmt.Printf(&quot;%v (%T)\\n&quot;, g, g) \/\/3.1415926 (float64)\nfmt.Println(c.s.Index(0)) \/\/1.4142135623\n<\/code><\/pre><p>可以看到，Type Assert是不用了，但是用反射写出来的代码还是有点复杂的。那么，有没有什么好的方法？<\/p><h2>他山之石<\/h2><p>对于泛型编程最牛的语言 C++ 来说，这类问题都是使用 Template解决的。<\/p><pre><code>\/\/用&lt;class T&gt;来描述泛型\ntemplate &lt;class T&gt; \nT GetMax (T a, T b)  { \n    T result; \n    result = (a&gt;b)? a : b; \n    return (result); \n} \n<\/code><\/pre><pre><code>int i=5, j=6, k; \n\/\/生成int类型的函数\nk=GetMax&lt;int&gt;(i,j);\n \nlong l=10, m=5, n; \n\/\/生成long类型的函数\nn=GetMax&lt;long&gt;(l,m); \n<\/code><\/pre><p>C++的编译器会在编译时分析代码，根据不同的变量类型来自动化生成相关类型的函数或类，在C++里，叫模板的具体化。<\/p><p>这个技术是编译时的问题，所以，我们不需要在运行时进行任何的类型识别，我们的程序也会变得比较干净。<\/p><p>那么，我们是否可以在Go中使用C++的这种技术呢？答案是肯定的，只是Go的编译器不会帮你干，你需要自己动手。<\/p><h2>Go Generator<\/h2><p>要玩 Go的代码生成，你需要三个东西：<\/p><ol>\n<li>一个函数模板，在里面设置好相应的占位符；<\/li>\n<li>一个脚本，用于按规则来替换文本并生成新的代码；<\/li>\n<li>一行注释代码。<\/li>\n<\/ol><h3>函数模板<\/h3><p>我们把之前的示例改成模板，取名为 <code>container.tmp.go<\/code> 放在 <code>.\/template\/<\/code>下：<\/p><pre><code>package PACKAGE_NAME\ntype GENERIC_NAMEContainer struct {\n    s []GENERIC_TYPE\n}\nfunc NewGENERIC_NAMEContainer() *GENERIC_NAMEContainer {\n    return &amp;GENERIC_NAMEContainer{s: []GENERIC_TYPE{}}\n}\nfunc (c *GENERIC_NAMEContainer) Put(val GENERIC_TYPE) {\n    c.s = append(c.s, val)\n}\nfunc (c *GENERIC_NAMEContainer) Get() GENERIC_TYPE {\n    r := c.s[0]\n    c.s = c.s[1:]\n    return r\n}\n<\/code><\/pre><p>可以看到，函数模板中我们有如下的占位符：<\/p><ul>\n<li><code>PACKAGE_NAME<\/code>：包名<\/li>\n<li><code>GENERIC_NAME<\/code>  ：名字<\/li>\n<li><code>GENERIC_TYPE<\/code>  ：实际的类型<\/li>\n<\/ul><p>其它的代码都是一样的。<\/p><h3>函数生成脚本<\/h3><p>然后，我们有一个叫<code>gen.sh<\/code>的生成脚本，如下所示：<\/p><pre><code>#!\/bin\/bash\n\nset -e\n\nSRC_FILE=${1}\nPACKAGE=${2}\nTYPE=${3}\nDES=${4}\n#uppcase the first char\nPREFIX=&quot;$(tr '[:lower:]' '[:upper:]' &lt;&lt;&lt; ${TYPE:0:1})${TYPE:1}&quot;\n\nDES_FILE=$(echo ${TYPE}| tr '[:upper:]' '[:lower:]')_${DES}.go\n\nsed 's\/PACKAGE_NAME\/'&quot;${PACKAGE}&quot;'\/g' ${SRC_FILE} | \\\n    sed 's\/GENERIC_TYPE\/'&quot;${TYPE}&quot;'\/g' | \\\n    sed 's\/GENERIC_NAME\/'&quot;${PREFIX}&quot;'\/g' &gt; ${DES_FILE}\n<\/code><\/pre><p>这里需要4个参数：<\/p><ul>\n<li>模板源文件；<\/li>\n<li>包名；<\/li>\n<li>实际需要具体化的类型；<\/li>\n<li>用于构造目标文件名的后缀。<\/li>\n<\/ul><p>然后，我们用 <code>sed<\/code> 命令去替换刚刚的函数模板，并生成到目标文件中（关于sed命令，我给你推荐一篇文章：《<a href=\"https:\/\/coolshell.cn\/articles\/9104.html\">sed 简明教程<\/a>》）。<\/p><h3>生成代码<\/h3><p>接下来，我们只需要在代码中打一个特殊的注释：<\/p><pre><code>\/\/go:generate .\/gen.sh .\/template\/container.tmp.go gen uint32 container\nfunc generateUint32Example() {\n    var u uint32 = 42\n    c := NewUint32Container()\n    c.Put(u)\n    v := c.Get()\n    fmt.Printf(&quot;generateExample: %d (%T)\\n&quot;, v, v)\n}\n\n\/\/go:generate .\/gen.sh .\/template\/container.tmp.go gen string container\nfunc generateStringExample() {\n    var s string = &quot;Hello&quot;\n    c := NewStringContainer()\n    c.Put(s)\n    v := c.Get()\n    fmt.Printf(&quot;generateExample: %s (%T)\\n&quot;, v, v)\n}\n<\/code><\/pre><p>其中，<\/p><ul>\n<li>第一个注释是生成包名gen，类型是uint32，目标文件名以container为后缀。<\/li>\n<li>第二个注释是生成包名gen，类型是string，目标文件名是以container为后缀。<\/li>\n<\/ul><p>然后，在工程目录中直接执行 <code>go generate<\/code> 命令，就会生成两份代码：<\/p><p>一份文件名为uint32_container.go：<\/p><pre><code>package gen\n\ntype Uint32Container struct {\n    s []uint32\n}\nfunc NewUint32Container() *Uint32Container {\n    return &amp;Uint32Container{s: []uint32{}}\n}\nfunc (c *Uint32Container) Put(val uint32) {\n    c.s = append(c.s, val)\n}\nfunc (c *Uint32Container) Get() uint32 {\n    r := c.s[0]\n    c.s = c.s[1:]\n    return r\n}\n<\/code><\/pre><p>另一份的文件名为 string_container.go：<\/p><pre><code>package gen\n\ntype StringContainer struct {\n    s []string\n}\nfunc NewStringContainer() *StringContainer {\n    return &amp;StringContainer{s: []string{}}\n}\nfunc (c *StringContainer) Put(val string) {\n    c.s = append(c.s, val)\n}\nfunc (c *StringContainer) Get() string {\n    r := c.s[0]\n    c.s = c.s[1:]\n    return r\n}\n<\/code><\/pre><p>这两份代码可以让我们的代码完全编译通过，付出的代价就是需要多执行一步 <code>go generate<\/code> 命令。<\/p><h2>新版Filter<\/h2><p>现在我们再回头看看上节课里的那些用反射整出来的例子，你就会发现，有了这样的技术，我们就不用在代码里，用那些晦涩难懂的反射来做运行时的类型检查了。我们可以写出很干净的代码，让编译器在编译时检查类型对不对。<\/p><p>下面是一个Fitler的模板文件 <code>filter.tmp.go<\/code>：<\/p><pre><code>package PACKAGE_NAME\n\ntype GENERIC_NAMEList []GENERIC_TYPE\n\ntype GENERIC_NAMEToBool func(*GENERIC_TYPE) bool\n\nfunc (al GENERIC_NAMEList) Filter(f GENERIC_NAMEToBool) GENERIC_NAMEList {\n    var ret GENERIC_NAMEList\n    for _, a := range al {\n        if f(&amp;a) {\n            ret = append(ret, a)\n        }\n    }\n    return ret\n}\n<\/code><\/pre><p>这样，我们可以在需要使用这个的地方，加上相关的 Go Generate 的注释：<\/p><pre><code>type Employee struct {\n  Name     string\n  Age      int\n  Vacation int\n  Salary   int\n}\n\n\/\/go:generate .\/gen.sh .\/template\/filter.tmp.go gen Employee filter\nfunc filterEmployeeExample() {\n\n  var list = EmployeeList{\n    {&quot;Hao&quot;, 44, 0, 8000},\n    {&quot;Bob&quot;, 34, 10, 5000},\n    {&quot;Alice&quot;, 23, 5, 9000},\n    {&quot;Jack&quot;, 26, 0, 4000},\n    {&quot;Tom&quot;, 48, 9, 7500},\n  }\n\n  var filter EmployeeList\n  filter = list.Filter(func(e *Employee) bool {\n    return e.Age &gt; 40\n  })\n\n  fmt.Println(&quot;----- Employee.Age &gt; 40 ------&quot;)\n  for _, e := range filter {\n    fmt.Println(e)\n  }\n\n  filter = list.Filter(func(e *Employee) bool {\n    return e.Salary &lt;= 5000\n  })\n\n  fmt.Println(&quot;----- Employee.Salary &lt;= 5000 ------&quot;)\n  for _, e := range filter {\n    fmt.Println(e)\n  }\n}\n<\/code><\/pre><h2>第三方工具<\/h2><p>我们并不需要自己手写 <code>gen.sh<\/code> 这样的工具类，我们可以直接使用第三方已经写好的工具。我给你提供一个列表。<\/p><ul>\n<li><a href=\"https:\/\/github.com\/cheekybits\/genny\">Genny<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/taylorchu\/generic\">Generic<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/joeshaw\/gengen\">GenGen<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/clipperhouse\/gen\">Gen<\/a><\/li>\n<\/ul><p>好了，这节课就到这里。如果你觉得今天的内容对你有所帮助，欢迎你帮我分享给更多人。<\/p>","footer_cover_data":{"img_url":"","mp_url":"","link_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":false,"rate":{},"product_id":100002201,"like_count":19,"had_liked":false,"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/c5\/0a\/c5abfc6b2bc1ec1b944517363558cc0a.mp3","id":332607,"had_viewed":false,"article_title":"112 | Go 编程模式：Go Generation","column_bgcolor":"#6091b2","share":{"content":"左耳朵耗子的专栏，20年骨灰级程序员，专栏涵盖程序员练级攻略、全栈程序员的体系化学习路线与进阶底图。专栏已有32000人加入学习，可以说是程序员必备宝典。","title":"陈皓 · 左耳听风","poster":"https:\/\/static001.geekbang.org\/resource\/image\/08\/c1\/084b2e8b8757ccb8401d6e6501ef8bc1.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/21\/da\/216b472de3f9027371576e107601c2da.jpg"},"is_video_preview":false,"article_summary":"这节课，我们来学习一下Go语言的代码生成的玩法。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/5d\/c7\/5d271d9eee6367dbccabbf2df51b8dc7.jpeg","column_sale_type":2,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/21\/da\/216b472de3f9027371576e107601c2da.jpg","column_id":48,"audio_time_arr":{"m":"06","s":"54","h":"00"},"video_time":"","audio_title":"6.28 杨超 112_01.MP3","audio_md5":"c5abfc6b2bc1ec1b944517363558cc0a","video_size":0,"text_read_percent":0,"comment_count":4,"cid":48,"article_sharetitle":"Go 编程模式：Go Generation","column_is_onboard":true,"article_cshort":"<p>你好，我是陈皓，网名左耳朵耗子。<\/p><p>这节课，我们来学习一下Go语言的代码生成的玩法。<\/p><p>Go语言的代码生成主要还是用来解决编程泛型的问题。泛型编程主要是解决这样一个问题：因为静态类型语言有类型，所以，相关的算法或是对数据处理的程序会因为类型不同而需要复制一份，这样会导致数据类型和算法功能耦合。<\/p><p>我之所以说泛型编程可以解决这样的问题，就是说，在写代码的时候，不用关心处理数据的类型，只需要关心相关的处理逻辑。<\/p><p>泛型编程是静态语言中非常非常重要的特征，如果没有泛型，我们就很难做到多态，也很难完成抽象，这就会导致我们的代码冗余量很大。<\/p><h2>现实中的类比<\/h2><p>为了帮你更好地理解，我举个现实当中的例子。我们用螺丝刀来做打比方，螺丝刀本来只有一个拧螺丝的作用，但是因为螺丝的类型太多，有平口的，有十字口的，有六角的……螺丝还有不同的尺寸，这就导致我们的螺丝刀为了要适配各种千奇百怪的螺丝类型（样式和尺寸），也是各种样式的。<\/p><p>而真正的抽象是，螺丝刀不应该关心螺丝的类型，它只要关注自己的功能是不是完备，并且让自己可以适配不同类型的螺丝就行了，这就是所谓的泛型编程要解决的实际问题。<\/p><h2>Go语方的类型检查<\/h2><p>因为Go语言目前并不支持真正的泛型，所以，只能用 <code>interface{}<\/code> 这样的类似于 <code>void*<\/code>  的过度泛型来玩，这就导致我们要在实际过程中进行类型检查。<\/p>","video_width":0,"column_could_sub":true,"article_ctime":1610618700,"score":"121610618700","video_media_map":{},"video_preview":{},"video":0,"video_time_arr":{"m":"","s":"","h":""},"video_total_seconds":0},"extra":{},"error":{}}