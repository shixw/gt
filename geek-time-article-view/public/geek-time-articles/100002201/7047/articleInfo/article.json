{"code":0,"data":{"video_id":"","sku":"100002201","video_cover":"","author_name":"陈皓","text_read_version":0,"audio_size":8592907,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/48\/f2\/4890392a8784580a8d6d2dbfb89fe3f2.jpg","subtitles":{},"product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/media\/audio\/f5\/32\/f5681c7f53aa74e9cb5e778d213f9d32\/ld\/ld.m3u8","chapter_id":"0","column_had_sub":true,"audio_dubber":"杨超","is_finished":false,"inline_video_subtitles":{},"like":{"had_done":false,"count":218},"neighbors":{"left":{"id":7045,"article_title":"60 | 性能设计篇之“数据库扩展”"},"right":{"id":7086,"article_title":"62 | 性能设计篇之“边缘计算”"}},"audio_time":"00:08:58","video_height":0,"rate_percent":0,"article_content":"<p>你好，我是陈皓，网名左耳朵耗子。<\/p>\n<p>一说起秒杀，大家都觉得这事很有技术含量。实际上，并不是这个样子的，秒杀这种互联网的交易方式其实并没有我们想象中的那么复杂。下面先让我们来系统地看一下，秒杀是怎么做的。<\/p>\n<h1>秒杀的流程<\/h1>\n<p>“秒杀”其实是商家为了促销，使用非常低的价格销售商品，比如，1元卖iPhone，100台，于是来了一百万人抢购。<\/p>\n<p>我们把技术挑战放在一边，先从用户或是产品的角度来看一下，秒杀的流程是什么样的。<\/p>\n<ul>\n<li>首先，你需要一个秒杀的landing page，在这个秒杀页上有一个倒计时的按钮。<\/li>\n<li>一旦这个倒计时的时间到了，按钮就被点亮，让你可以点击按钮下单。<\/li>\n<li>一般来说下单时需要你填写一个校验码，以防止是机器来抢。<\/li>\n<\/ul>\n<p>从技术上来说，这个倒计时按钮上的时间和按钮可以被点击的时间是需要后台服务器来校准的，这意味着：<\/p>\n<ul>\n<li>前端页面要不断地向后端来请求，开没开始，开没开始……<\/li>\n<li>每次询问的时候，后端都会给前端一个时间，以校准前端的时间。<\/li>\n<li>一旦后端服务器表示OK可以开始，后端服务会返回一个URL。<\/li>\n<li>这个URL会被安置在那个按钮上，就可以点击了。<\/li>\n<li>点击后，如果抢到了库存，就进入支付页面，如果没有则返回秒杀已结束。<\/li>\n<\/ul>\n<p>这个不断轮询的过程，就好像大家等着抢。你想想，有100万人来不停地询问有没有开始了这个事，估计后端也扛不住。<\/p>\n<!-- [[[read_end]]] -->\n<h1>秒杀的技术挑战<\/h1>\n<p>接下来，我们需要来看一下“秒杀”的技术挑战。<\/p>\n<p>面对上面我们要解决的技术问题，我们的技术上的挑战就是怎么应对这100万人同时下单请求？100万的同时并发会导致我们的网站瞬间就崩溃了，一方面是100万人同时请求，我们的网络带宽不够，另一方面是理论上来说要扛100万的TPS，需要非常多的机器。<\/p>\n<p>但是最恐怖的是，所有的请求都会集中在同一条数据库记录上，无论是怎么分库分表，还是使用了分布式数据库都无济于事，因为你面对的是单条的热点数据。<\/p>\n<p>这几乎是一件无法解决的技术问题。<\/p>\n<h1>秒杀的解决方案<\/h1>\n<p>很明显，要让100万用户能够在同一时间打开一个页面，这个时候，我们就需要用到CDN了。数据中心肯定是扛不住的，所以，我们要引入CDN。<\/p>\n<p>在CDN上，这100万个用户就会被几十个甚至上百个CDN的边缘结点给分担了，于是就能够扛得住。然后，我们还需要在这些CDN结点上做点小文章。<\/p>\n<p>一方面，我们需要把小服务部署到CDN结点上去，这样，当前端页面来问开没开始时，这个小服务除了告诉前端开没开始外，它还可以统计下有多少人在线。每个小服务会把当前在线等待秒杀的人数每隔一段时间就回传给我们的数据中心，于是我们就知道全网总共在线的人数有多少。<\/p>\n<p>假设，我们知道有大约100万的人在线等着抢，那么，在我们快要开始的时候，由数据中心向各个部署在CDN结点上的小服务上传递一个概率值，比如说是0.02%。<\/p>\n<p>于是，当秒杀开始的时候，这100万用户都在点下单按钮，首先他们请求到的是CDN上的这些服务，这些小服务按照0.02%的量把用户放到后面的数据中心，也就是1万个人放过去两个，剩下的9998个都直接返回秒杀已结束。<\/p>\n<p>于是，100万用户被放过了0.02%的用户，也就是200个左右，而这200个人在数据中心抢那100个iPhone，也就是200 TPS，这个并发量怎么都应该能扛住了。<\/p>\n<p>这就是整个“秒杀”的技术细节，是不是有点不敢相信？<\/p>\n<p>说到这里，我相信你一定会问我12306和奥运会抢票的问题。我觉得2008年奥运会抢票把服务器抢挂了是可以使用秒杀这个解决方案的。而12306则不行，因为他们完全不知道用户来是要买哪张火车票的。不知道这个信息，很不好过滤用户，而且用户在买票前需要有很多查询操作，然后在查询中选择自己的车票。<\/p>\n<p>对此，12306最好的应对方式，除了不要一次把所有的票放出来，而是分批在不同的时间段把票放出来，这样可以让人们不要集中在一个时间点来抢票，做到人肉分流，可以降低一些并发度。<\/p>\n<p>另外，我一直觉得，12306最好是用预售的方式，让大家把自己的购票先输入到系统中。系统并不真正放票，而是把大家的需求都收集好，然后做整体统筹安排，该增加车次的增加车次，该加车厢的加车厢，这样可以确保大家都能走。实在不行，那就抽签了。<\/p>\n<h1>更多的思考<\/h1>\n<p>我们可以看到，解决秒杀这种特定业务场景，可以使用CDN的边缘结点来扛流量，然后过滤用户请求（限流用户请求），来保护数据中心的系统，这样才让整个秒杀得以顺利进行。<\/p>\n<p>那么，如果我们像双11那样，想尽可能多地卖出商品，那么就不像秒杀了。这是要尽可能多地收订单，但又不能超过库存，其中还有大量的银行支付，各大仓库的库存查询和分配，这些都是非常慢的操作。为了保证一致性，还要能够扛得住像双11这样的大规模并发访问，那么，应该怎么做呢？<\/p>\n<p>使用秒杀这样的解决方案基本上不太科学了。这个时候就需要认认真真地做高并发的架构和测试了，需要各个系统把自己的性能调整上去，还要小心地做性能规划，更要把分布式的弹力设计做好，最后是要不停地做性能测试，找到整个架构的系统瓶颈，然后不断地做水平扩展，以解决大规模的并发。<\/p>\n<p>但是，从另一方面来说，像我们用边缘结点来解决秒杀这样的场景的玩法，是否也有一定的普适性？这里，我想说，一定是有的。<\/p>\n<p>有些时候，我们总是在想数据中心的解决方案。其实，我们有时候也需要换一换思路，也许，在数据中心解决并不一定是最好的方式，放在边缘来解决可能会更好一些。尤其是针对一些有地域特征的业务，比如像外卖、共享单车、打车这样的业务。其实，把一些简单的业务逻辑放在边缘，比放在数据中心不但能够有更好的性能，还有更便宜的成本。<\/p>\n<p>我觉得，随着请求量越来越大，数据也越来越多，数据中心是有点到瓶颈了，而需要边缘结点来帮忙了。而且，这个边缘化解决方案的趋势也会越来越有优势。<\/p>\n<p>在这里，我先按住不表，因为这是我的创业方向，我会在下一篇文章，也是本系列的最后一篇文章，向你介绍边缘计算以及我想用边缘计算干些什么事。<\/p>\n<h1>小结<\/h1>\n<p>好了，我们来总结一下今天分享的主要内容。首先，我介绍了秒杀。先是分析了其业务流程，并列举了其所面临的技术挑战，随后介绍了其解决方案。接着，分析了相关的奥运会和12306抢票问题，以及双十一购物节问题。<\/p>\n<p>它们各自有不同的解决思路，其中双十一则要求我们必须认认真真地用高并发架构来应对。最后，从秒杀解决方案中的CDN边缘节点计算，我引出了普适的边缘节点计算。下节课，我们详细讲述边缘计算。希望对你有帮助。<\/p>\n<p>也欢迎你分享一下你参与过秒杀系统的构建吗？双十一呢？解决方案是怎样的呢？<\/p>\n<p>文末给出了《分布式系统设计模式》系列文章的目录，希望你能在这个列表里找到自己感兴趣的内容。<\/p>\n<ul>\n<li>弹力设计篇\n<ul>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/3912\">认识故障和弹力设计<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/3917\">隔离设计Bulkheads<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/3926\">异步通讯设计Asynchronous<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/4050\">幂等性设计Idempotency<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/4086\">服务的状态State<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/4087\">补偿事务Compensating Transaction<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/4121\">重试设计Retry<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/4241\">熔断设计Circuit Breaker<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/4245\">限流设计Throttle<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/4252\">降级设计degradation<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/4253\">弹力设计总结<\/a><\/li>\n<\/ul>\n<\/li>\n<li>管理设计篇\n<ul>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/5175\">分布式锁Distributed Lock<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/5819\">配置中心Configuration Management<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/5909\">边车模式Sidecar<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/5920\">服务网格Service Mesh<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/6086\">网关模式Gateway<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/6283\">部署升级策略<\/a><\/li>\n<\/ul>\n<\/li>\n<li>性能设计篇\n<ul>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/6282\">缓存Cache<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/7036\">异步处理Asynchronous<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/7045\">数据库扩展<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/7047\">秒杀Flash Sales<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/7086\">边缘计算Edge Computing<\/a><\/li>\n<\/ul>\n<\/li>\n<\/ul>\n","footer_cover_data":{"img_url":"","mp_url":"","link_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{},"product_id":100002201,"like_count":245,"had_liked":false,"article_subtitle":"无","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/f5\/32\/f5681c7f53aa74e9cb5e778d213f9d32.mp3","id":7047,"had_viewed":false,"article_title":"61 | 性能设计篇之“秒杀”","column_bgcolor":"#6091b2","share":{"content":"左耳朵耗子的专栏，20年骨灰级程序员，专栏涵盖程序员练级攻略、全栈程序员的体系化学习路线与进阶底图。专栏已有32000人加入学习，可以说是程序员必备宝典。","title":"陈皓 · 左耳听风","poster":"https:\/\/static001.geekbang.org\/resource\/image\/08\/c1\/084b2e8b8757ccb8401d6e6501ef8bc1.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/21\/da\/216b472de3f9027371576e107601c2da.jpg"},"is_video_preview":false,"article_summary":"解决秒杀这种特定业务场景，可以使用 CDN 的边缘结点来扛流量，然后过滤用户请求，来保护数据中心的系统。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/f1\/27\/f10aa0ad2e78dfaeb7786b9a403b1e27.jpeg","column_sale_type":2,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/21\/da\/216b472de3f9027371576e107601c2da.jpg","column_id":48,"audio_time_arr":{"m":"08","s":"58","h":"00"},"video_time":"","audio_title":"4.25 杨超 061_01.MP3","audio_md5":"f5681c7f53aa74e9cb5e778d213f9d32","video_size":0,"text_read_percent":0,"comment_count":41,"cid":48,"article_sharetitle":"分布式系统设计模式 | 性能设计篇之“秒杀”","column_is_onboard":true,"article_cshort":"<p>你好，我是陈皓，网名左耳朵耗子。<\/p>\n<p>一说起秒杀，大家都觉得这事很有技术含量。实际上，并不是这个样子的，秒杀这种互联网的交易方式其实并没有我们想象中的那么复杂。下面先让我们来系统地看一下，秒杀是怎么做的。<\/p>\n<h1>秒杀的流程<\/h1>\n<p>“秒杀”其实是商家为了促销，使用非常低的价格销售商品，比如，1元卖iPhone，100台，于是来了一百万人抢购。<\/p>\n<p>我们把技术挑战放在一边，先从用户或是产品的角度来看一下，秒杀的流程是什么样的。<\/p>\n<ul>\n<li>首先，你需要一个秒杀的landing page，在这个秒杀页上有一个倒计时的按钮。<\/li>\n<li>一旦这个倒计时的时间到了，按钮就被点亮，让你可以点击按钮下单。<\/li>\n<li>一般来说下单时需要你填写一个校验码，以防止是机器来抢。<\/li>\n<\/ul>\n<p>从技术上来说，这个倒计时按钮上的时间和按钮可以被点击的时间是需要后台服务器来校准的，这意味着：<\/p>\n<ul>\n<li>前端页面要不断地向后端来请求，开没开始，开没开始……<\/li>\n<li>每次询问的时候，后端都会给前端一个时间，以校准前端的时间。<\/li>\n<li>一旦后端服务器表示OK可以开始，后端服务会返回一个URL。<\/li>\n<li>这个URL会被安置在那个按钮上，就可以点击了。<\/li>\n<li>点击后，如果抢到了库存，就进入支付页面，如果没有则返回秒杀已结束。<\/li>\n<\/ul>\n<p>这个不断轮询的过程，就好像大家等着抢。你想想，有100万人来不停地询问有没有开始了这个事，估计后端也扛不住。<\/p>\n","video_width":0,"column_could_sub":true,"article_ctime":1525129200,"score":"61525129200","video_media_map":{},"video_preview":{},"video":0,"video_time_arr":{"m":"","s":"","h":""},"video_total_seconds":0},"extra":{},"error":{}}