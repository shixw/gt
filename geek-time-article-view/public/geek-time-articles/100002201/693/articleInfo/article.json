{"code":0,"data":{"video_id":"","sku":"100002201","video_cover":"","author_name":"陈皓","text_read_version":0,"audio_size":11569453,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/f1\/25\/f12cabc0eb86787aa8302230e46e5a25.jpg","subtitles":{},"product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/media\/audio\/08\/40\/0897e3e86e42ce127a69dba273d66740\/ld\/ld.m3u8","chapter_id":"0","column_had_sub":true,"audio_dubber":"杨超","is_finished":false,"inline_video_subtitles":{},"like":{"had_done":false,"count":534},"neighbors":{"left":{"id":675,"article_title":"11 | 程序中的错误处理：错误返回码和异常捕捉"},"right":{"id":730,"article_title":"13 | 魔数 0x5f3759df"}},"audio_time":"00:12:05","video_height":0,"rate_percent":0,"article_content":"<p>你好，我是陈皓，网名左耳朵耗子。<\/p><p>上节课中，我们讨论了错误返回码和异常捕捉，以及在不同情况下该如何选择和使用。这节课会接着讲两个有趣的话题：异步编程世界里的错误处理方法，以及我在实战中总结出来的错误处理最佳实践。<\/p><h1>异步编程世界里的错误处理<\/h1><p>在异步编程的世界里，因为被调用的函数是被放到了另外一个线程里运行，这将导致：<\/p><ul>\n<li>\n<p><strong>无法使用返回码<\/strong>。因为函数在“被”异步运行中，所谓的返回只是把处理权交给下一条指令，而不是把函数运行完的结果返回。<strong>所以，函数返回的语义完全变了，返回码也没有用了<\/strong>。<\/p>\n<\/li>\n<li>\n<p><strong>无法使用抛异常的方式<\/strong>。因为除了上述的函数立马返回的原因之外，抛出的异常也在另外一个线程中，不同线程中的栈是完全不一样的，所以主线程的 <code>catch<\/code> 完全看不到另外一个线程中的异常。<\/p>\n<\/li>\n<\/ul><p>对此，在异步编程的世界里，我们也会有好几种处理错误的方法，最常用的就是 <code>callback<\/code> 方式。在做异步请求的时候，注册几个 <code>OnSuccess()<\/code>、 <code>OnFailure()<\/code> 这样的函数，让在另一个线程中运行的异步代码回调过来。<\/p><h2>JavaScript异步编程的错误处理<\/h2><p>比如，下面这个JavaScript示例：<\/p><pre><code class=\"language-JavaScript\">function successCallback(result) {\n  console.log(\"It succeeded with \" + result);\n}\n\nfunction failureCallback(error) {\n  console.log(\"It failed with \" + error);\n}\n\ndoSomething(successCallback, failureCallback);\n<\/code><\/pre><!-- [[[read_end]]] --><p>通过注册错误处理的回调函数，让异步执行的函数在出错的时候，调用被注册进来的错误处理函数，这样的方式比较好地解决了程序的错误处理。<strong>而出错的语义从返回码、异常捕捉到了直接耦合错误出处函数的样子<\/strong>，挺好的。<\/p><p>但是， 如果我们需要把几个异步函数顺序执行的话（异步程序中，程序执行的顺序是不可预测的、也是不确定的，而有时候，函数被调用的上下文是有相互依赖的，所以，我们希望它们能按一定的顺序处理），就会出现了所谓的Callback Hell的问题。如下所示：<\/p><pre><code class=\"language-javascript\">doSomething(function(result) {\n  doSomethingElse(result, function(newResult) {\n    doThirdThing(newResult, function(finalResult) {\n      console.log('Got the final result: ' + finalResult);\n    }, failureCallback);\n  }, failureCallback);\n}, failureCallback);\n<\/code><\/pre><p>而这样层层嵌套中需要注册的错误处理函数也有可能是完全不一样的，而且会导致代码非常混乱，难以阅读和维护。<\/p><p>所以，一般来说，在异步编程的实践里，我们会用Promise模式来处理。如下所示（箭头表达式）：<\/p><pre><code class=\"language-JavaScript\">doSomething()\n.then(result =&gt; doSomethingElse(result))\n.then(newResult =&gt; doThirdThing(newResult))\n.then(finalResult =&gt; {\n  console.log(`Got the final result: ${finalResult}`);\n}).catch(failureCallback);\n<\/code><\/pre><p>上面代码中的 <code>then()<\/code> 和 <code>catch()<\/code> 方法就是Promise对象的方法，<code>then()<\/code>方法可以把各个异步的函数给串联起来，而<code>catch()<\/code> 方法则是出错的处理。<\/p><p>看到上面的那个级联式的调用方式，这就要我们的 <code>doSomething()<\/code> 函数返回Promise对象，下面是这个函数的相关代码示例：<\/p><p>比如：<\/p><pre><code class=\"language-JavaScript\">function doSomething() {\n\tlet promise = new Promise();\n\tlet xhr = new XMLHttpRequest();\n\txhr.open('GET', 'http:\/\/coolshell.cn\/....', true);\n\n\txhr.onload = function (e) {\n        if (this.status === 200) {\n            results = JSON.parse(this.responseText);\n            promise.resolve(results); \/\/成功时，调用resolve()方法\n        }\n    };\n\n    xhr.onerror = function (e) {\n        promise.reject(e); \/\/失败时，调用reject()方法\n    };\n\n    xhr.send();\n    return promise;\n}\n<\/code><\/pre><p>从上面的代码示例中，我们可以看到，如果成功了，要调用<br>\n<code>Promise.resolve()<\/code> 方法，这样Promise对象会继续调用下一个 <code>then()<\/code>。如果出错了就调用 <code>Promise.reject()<\/code> 方法，这样就会忽略后面的 <code>then()<\/code> 直到 <code>catch()<\/code> 方法。<\/p><p>我们可以看到 <code>Promise.reject()<\/code> 就像是抛异常一样。这个编程模式让我们的代码组织方便了很多。<\/p><p>另外，多说一句，Promise还可以同时等待两个不同的异步方法。比如下面的代码所展示的方式：<\/p><pre><code class=\"language-JavaScript\">promise1 = doSomething();\npromise2 = doSomethingElse();\nPromise.when(promise1, promise2).then( function (result1, result2) {\n\t... \/\/处理 result1 和 result2 的代码\n}, handleError);\n<\/code><\/pre><p>在ECMAScript 2017的标准中，我们可以使用<code>async<\/code>\/<code>await<\/code>这两个关键字来取代Promise对象，这样可以让我们的代码更易读。<\/p><p>比如下面的代码示例：<\/p><pre><code class=\"language-JavaScript\">async function foo() {\n  try {\n    let result = await doSomething();\n    let newResult = await doSomethingElse(result);\n    let finalResult = await doThirdThing(newResult);\n    console.log(`Got the final result: ${finalResult}`);\n  } catch(error) {\n    failureCallback(error);\n  }\n}\n<\/code><\/pre><p>如果在函数定义之前使用了 <code>async<\/code> 关键字，就可以在函数内使用 <code>await<\/code>。 当在 <code>await<\/code> 某个 <code>Promise<\/code> 时，函数暂停执行，直至该  <code>Promise<\/code> 产生结果，并且暂停不会阻塞主线程。 如果 <code>Promise<\/code> resolve，则会返回值。 如果 <code>Promise<\/code> reject，则会抛出拒绝的值。<\/p><p>而我们的异步代码完全可以放在一个 <code>try - catch<\/code> 语句块内，在有语言支持了以后，我们又可以使用 <code>try - catch<\/code> 语句块了。<\/p><p>下面我们来看一下pipeline的代码。所谓pipeline就是把一串函数给编排起来，从而形成更为强大的功能。这个玩法是函数式编程中经常用到的方法。<\/p><p>比如，下面这个pipeline的代码（注意，其上使用了 <code>reduce()<\/code> 函数）：<\/p><pre><code class=\"language-JavaScript\">[func1, func2].reduce((p, f) =&gt; p.then(f), Promise.resolve());\n<\/code><\/pre><p>其等同于：<\/p><pre><code class=\"language-JavaScript\">Promise.resolve().then(func1).then(func2);\n<\/code><\/pre><p>我们可以抽象成：<\/p><pre><code class=\"language-JavaScript\">let applyAsync = (acc,val) =&gt; acc.then(val);\nlet composeAsync = (...funcs) =&gt; x =&gt; funcs.reduce(applyAsync, Promise.resolve(x));\n<\/code><\/pre><p>于是，可以这样使用：<\/p><pre><code class=\"language-JavaScript\">let transformData = composeAsync(func1, asyncFunc1, asyncFunc2, func2);\ntransformData(data);\n<\/code><\/pre><p>但是，在ECMAScript 2017的 <code>async<\/code>\/<code>await<\/code> 语法糖下，这事儿就变得更简单了。<\/p><pre><code class=\"language-JavaScript\">for (let f of [func1, func2]) {\n  await f();\n}\n<\/code><\/pre><h2>Java异步编程的Promise模式<\/h2><p>在Java中，在JDK 1.8里也引入了类似JavaScript的玩法 —— <code>CompletableFuture<\/code>。这个类提供了大量的异步编程中Promise的各种方式。下面我列举几个。<\/p><p>链式处理：<\/p><pre><code class=\"language-Java\">CompletableFuture.supplyAsync(this::findReceiver)\n                 .thenApply(this::sendMsg)\n                 .thenAccept(this::notify);\n<\/code><\/pre><p>上面的这个链式处理和JavaScript中的<code>then()<\/code>方法很像，其中的<br>\n<code>supplyAsync()<\/code> 表示执行一个异步方法，而 <code>thenApply()<\/code> 表示执行成功后再串联另外一个异步方法，最后是 <code>thenAccept()<\/code> 来处理最终结果。<\/p><p>下面这个例子是要合并两个异步函数的结果：<\/p><pre><code class=\"language-Java\">String result = CompletableFuture.supplyAsync(() -&gt; {\n         return \"hello\";\n     }).thenCombine(CompletableFuture.supplyAsync(() -&gt; {\n         return \"world\";\n     }), (s1, s2) -&gt; s1 + \" \" + s2).join());\nSystem.out.println(result);\n\n<\/code><\/pre><p>接下来，我们再来看一下，Java这个类相关的异常处理：<\/p><pre><code class=\"language-Java\">CompletableFuture.supplyAsync(Integer::parseInt) \/\/输入: \"ILLEGAL\"\n\t\t\t     .thenApply(r -&gt; r * 2 * Math.PI)\n\t\t\t     .thenApply(s -&gt; \"apply&gt;&gt; \" + s)\n\t\t\t     .exceptionally(ex -&gt; \"Error: \" + ex.getMessage());\n<\/code><\/pre><p>我们要注意到上面代码里的 <code>exceptionally()<\/code> 方法，这个和JavaScript Promise中的 <code>catch()<\/code> 方法相似。<\/p><p>运行上面的代码，会出现如下输出：<\/p><pre><code class=\"language-Java\">Error: java.lang.NumberFormatException: For input string: \"ILLEGAL\"\n<\/code><\/pre><p>也可以这样：<\/p><pre><code class=\"language-Java\">CompletableFuture.supplyAsync(Integer::parseInt) \/\/ 输入: \"ILLEGAL\"\n\t\t\t\t .thenApply(r -&gt; r * 2 * Math.PI)\n\t\t\t\t .thenApply(s -&gt; \"apply&gt;&gt; \" + s)\n\t\t\t\t .handle((result, ex) -&gt; {\n\t\t\t\t \tif (result != null) {\n\t\t\t\t \t\treturn result;\n\t\t\t\t \t} else {\n\t\t\t\t \t\treturn \"Error handling: \" + ex.getMessage();\n\t\t\t\t \t}\n\t\t\t\t });\n<\/code><\/pre><p>上面代码中，你可以看到，其使用了 <code>handle()<\/code> 方法来处理最终的结果，其中包含了异步函数中的错误处理。<\/p><h2>Go语言的Promise<\/h2><p>在Go语言中，如果你想实现一个简单的Promise模式，也是可以的。下面的代码纯属示例，只为说明问题。如果你想要更好的代码，可以上GitHub上搜一下Go语言Promise的相关代码库。<\/p><p>首先，先声明一个结构体。其中有三个成员：第一个 <code>wg<\/code> 用于多线程同步；第二个 <code>res<\/code> 用于存放执行结果；第三个 <code>err<\/code> 用于存放相关的错误。<\/p><pre><code class=\"language-Go\">type Promise struct {\n\twg  sync.WaitGroup\n\tres string\n\terr error\n}\n<\/code><\/pre><p>然后，定义一个初始函数，来初始化Promise对象。其中可以看到，需要把一个函数 <code>f()<\/code> 传进来，然后调用 <code>wg.Add(1)<\/code> 对waitGroup做加一操作，新开一个Goroutine通过异步去执行用户传入的函数 <code>f()<\/code> ，然后记录这个函数的成功或错误，并把waitGroup做减一操作。<\/p><pre><code class=\"language-Go\">func NewPromise(f func() (string, error)) *Promise {\n\tp := &amp;Promise{}\n\tp.wg.Add(1)\n\tgo func() {\n\t\tp.res, p.err = f()\n\t\tp.wg.Done()\n\t}()\n\treturn p\n}\n<\/code><\/pre><p>然后，我们需要定义Promise的Then方法。其中需要传入一个函数，以及一个错误处理的函数。并且调用 <code>wg.Wait()<\/code> 方法来阻塞（因为之前被<code>wg.Add(1)<\/code>)，一旦上一个方法被调用了 <code>wg.Done()<\/code>，这个Then方法就会被唤醒。<\/p><p>唤醒的第一件事是，检查一下之前的方法有没有错误。如果有，那么就调用错误处理函数。如果之前成功了，就把之前的结果以参数的方式传入到下一个函数中。<\/p><pre><code class=\"language-Go\">func (p *Promise) Then(r func(string), e func(error)) (*Promise){\n\tgo func() {\n\t\tp.wg.Wait()\n\t\tif p.err != nil {\n\t\t\te(p.err)\n\t\t\treturn \n\t\t}\n\t\tr(p.res)\n\t}()\n\treturn p\n}\n<\/code><\/pre><p>下面，我们定义一个用于测试的异步方法。这个方法很简单，就是在数数，然后，有一半的几率会出错。<\/p><pre><code class=\"language-Go\">func exampleTicker() (string, error) {\n\tfor i := 0; i &lt; 3; i++ {\n\t\tfmt.Println(i)\n\t\t&lt;-time.Tick(time.Second * 1)\n\t}\n\t\n\trand.Seed(time.Now().UTC().UnixNano())\n\tr:=rand.Intn(100)%2\n\tfmt.Println(r)\n\tif  r != 0 {\n\t\treturn \"hello, world\", nil\n\t} else {\n\t\treturn \"\", fmt.Errorf(\"error\")\n\t}\n}\n\n<\/code><\/pre><p>下面，我们来看看我们实现的Go语言Promise是怎么使用的。代码还是比较直观的，我就不做更多的解释了。<\/p><pre><code class=\"language-Go\">func main() {\n\tdoneChan := make(chan int)\n\t\n\tvar p = NewPromise(exampleTicker)\n\tp.Then(func(result string) { fmt.Println(result); doneChan &lt;- 1 }, \n\t\t\tfunc(err error) { fmt.Println(err); doneChan &lt;-1 })\n\t\t\t\n\t&lt;-doneChan\n}\n<\/code><\/pre><p>当然，如果你需要更好的Go语言Promise，可以到GitHub上找，上面好些代码都是实现得很不错的。上面的这个示例，实现得比较简陋，仅仅是为了说明问题。<\/p><h1>错误处理的最佳实践<\/h1><p>下面是我个人总结的几个错误处理的最佳实践。如果你知道更好的，请一定告诉我。<\/p><ul>\n<li>\n<p><strong>统一分类的错误字典<\/strong>。无论你是使用错误码还是异常捕捉，都需要认真并统一地做好错误的分类。最好是在一个地方定义相关的错误。比如，HTTP的4XX表示客户端有问题，5XX则表示服务端有问题。也就是说，你要建立一个错误字典。<\/p>\n<\/li>\n<li>\n<p><strong>同类错误的定义最好是可以扩展的<\/strong>。这一点非常重要，而对于这一点，通过面向对象的继承或是像Go语言那样的接口多态可以很好地做到。这样可以方便地重用已有的代码。<\/p>\n<\/li>\n<li>\n<p><strong>定义错误的严重程度<\/strong>。比如，Fatal表示重大错误，Error表示资源或需求得不到满足，Warning表示并不一定是个错误但还是需要引起注意，Info表示不是错误只是一个信息，Debug表示这是给内部开发人员用于调试程序的。<\/p>\n<\/li>\n<li>\n<p><strong>错误日志的输出最好使用错误码，而不是错误信息<\/strong>。打印错误日志的时候，应该使用统一的格式。但最好不要用错误信息，而应使用相应的错误码，错误码不一定是数字，也可以是一个能从错误字典里找到的一个唯一的可以让人读懂的关键字。这样，会非常有利于日志分析软件进行自动化监控，而不是要从错误信息中做语义分析。比如：HTTP的日志中就会有HTTP的返回码，如：<code>404<\/code>。但我更推荐使用像<code>PageNotFound<\/code>这样的标识，这样人和机器都很容易处理。<\/p>\n<\/li>\n<li>\n<p><strong>忽略错误最好有日志<\/strong>。不然会给维护带来很大的麻烦。<\/p>\n<\/li>\n<li>\n<p><strong>对于同一个地方不停的报错，最好不要都打到日志里<\/strong>。不然这样会导致其它日志被淹没了，也会导致日志文件太大。最好的实践是，打出一个错误以及出现的次数。<\/p>\n<\/li>\n<li>\n<p><strong>不要用错误处理逻辑来处理业务逻辑<\/strong>。也就是说，不要使用异常捕捉这样的方式来处理业务逻辑，而是应该用条件判断。如果一个逻辑控制可以用if - else清楚地表达，那就不建议使用异常方式处理。异常捕捉是用来处理不期望发生的事情，而错误码则用来处理可能会发生的事。<\/p>\n<\/li>\n<li>\n<p><strong>对于同类的错误处理，用一样的模式<\/strong>。比如，对于<code>null<\/code>对象的错误，要么都用返回null，加上条件检查的模式，要么都用抛NullPointerException的方式处理。不要混用，这样有助于代码规范。<\/p>\n<\/li>\n<li>\n<p><strong>尽可能在错误发生的地方处理错误<\/strong>。因为这样会让调用者变得更简单。<\/p>\n<\/li>\n<li>\n<p><strong>向上尽可能地返回原始的错误<\/strong>。如果一定要把错误返回到更高层去处理，那么，应该返回原始的错误，而不是重新发明一个错误。<\/p>\n<\/li>\n<li>\n<p><strong>处理错误时，总是要清理已分配的资源<\/strong>。这点非常关键，使用RAII技术，或是<code>try-catch-finally<\/code>，或是Go的defer都可以容易地做到。<\/p>\n<\/li>\n<li>\n<p><strong>不推荐在循环体里处理错误<\/strong>。这里说的是<code>try-catch<\/code>，绝大多数的情况你不需要这样做。最好把整个循环体外放在try语句块内，而在外面做catch。<\/p>\n<\/li>\n<li>\n<p><strong>不要把大量的代码都放在一个try语句块内<\/strong>。一个try语句块内的语句应该是完成一个简单单一的事情。<\/p>\n<\/li>\n<li>\n<p><strong>为你的错误定义提供清楚的文档以及每种错误的代码示例<\/strong>。如果你是做RESTful API方面的，使用Swagger会帮你很容易搞定这个事。<\/p>\n<\/li>\n<li>\n<p><strong>对于异步的方式，推荐使用Promise模式处理错误<\/strong>。对于这一点，JavaScript中有很好的实践。<\/p>\n<\/li>\n<li>\n<p><strong>对于分布式的系统，推荐使用APM相关的软件<\/strong>。尤其是使用Zipkin这样的服务调用跟踪的分析来关联错误。<\/p>\n<\/li>\n<\/ul><p>好了。关于程序中的错误处理，我主要总结了这些。如果你有更好的想法和经验，欢迎来评论区跟我交流。<\/p>","footer_cover_data":{"img_url":"","mp_url":"","link_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{},"product_id":100002201,"like_count":587,"had_liked":false,"article_subtitle":"无","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/08\/40\/0897e3e86e42ce127a69dba273d66740.mp3","id":693,"had_viewed":false,"article_title":"12 | 程序中的错误处理：异步编程以及我的最佳实践","column_bgcolor":"#6091b2","share":{"content":"左耳朵耗子的专栏，20年骨灰级程序员，专栏涵盖程序员练级攻略、全栈程序员的体系化学习路线与进阶底图。专栏已有32000人加入学习，可以说是程序员必备宝典。","title":"陈皓 · 左耳听风","poster":"https:\/\/static001.geekbang.org\/resource\/image\/08\/c1\/084b2e8b8757ccb8401d6e6501ef8bc1.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/21\/da\/216b472de3f9027371576e107601c2da.jpg"},"is_video_preview":false,"article_summary":"对于同一个地方不停的报错，最好不要都打到日志里。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/b8\/ac\/b84356d9c71ca6f33aed62b3ae8536ac.jpeg","column_sale_type":2,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/21\/da\/216b472de3f9027371576e107601c2da.jpg","column_id":48,"audio_time_arr":{"m":"12","s":"05","h":"00"},"video_time":"","audio_title":"12.12 陈皓 杨超 012_01.MP3","audio_md5":"0897e3e86e42ce127a69dba273d66740","video_size":0,"text_read_percent":0,"comment_count":50,"cid":48,"article_sharetitle":"程序中的错误处理：异步编程以及我的最佳实践","column_is_onboard":true,"article_cshort":"<p>你好，我是陈皓，网名左耳朵耗子。<\/p><p>上节课中，我们讨论了错误返回码和异常捕捉，以及在不同情况下该如何选择和使用。这节课会接着讲两个有趣的话题：异步编程世界里的错误处理方法，以及我在实战中总结出来的错误处理最佳实践。<\/p><h1>异步编程世界里的错误处理<\/h1><p>在异步编程的世界里，因为被调用的函数是被放到了另外一个线程里运行，这将导致：<\/p><ul>\n<li>\n<p><strong>无法使用返回码<\/strong>。因为函数在“被”异步运行中，所谓的返回只是把处理权交给下一条指令，而不是把函数运行完的结果返回。<strong>所以，函数返回的语义完全变了，返回码也没有用了<\/strong>。<\/p>\n<\/li>\n<li>\n<p><strong>无法使用抛异常的方式<\/strong>。因为除了上述的函数立马返回的原因之外，抛出的异常也在另外一个线程中，不同线程中的栈是完全不一样的，所以主线程的 <code>catch<\/code> 完全看不到另外一个线程中的异常。<\/p>\n<\/li>\n<\/ul><p>对此，在异步编程的世界里，我们也会有好几种处理错误的方法，最常用的就是 <code>callback<\/code> 方式。在做异步请求的时候，注册几个 <code>OnSuccess()<\/code>、 <code>OnFailure()<\/code> 这样的函数，让在另一个线程中运行的异步代码回调过来。<\/p><h2>JavaScript异步编程的错误处理<\/h2><p>比如，下面这个JavaScript示例：<\/p><pre><code class=\"language-JavaScript\">function successCallback(result) {\n  console.log(\"It succeeded with \" + result);\n}\n\nfunction failureCallback(error) {\n  console.log(\"It failed with \" + error);\n}\n\ndoSomething(successCallback, failureCallback);\n<\/code><\/pre>","video_width":0,"column_could_sub":true,"article_ctime":1510182000,"score":"11510182000","video_media_map":{},"video_preview":{},"video":0,"video_time_arr":{"m":"","s":"","h":""},"video_total_seconds":0},"extra":{},"error":{}}