{"code":0,"data":{"video_id":"","sku":"100002201","video_cover":"","author_name":"陈皓","text_read_version":0,"audio_size":4394551,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/d3\/04\/d391bef23ad0df90f3c4a0ae206cde04.jpg","subtitles":{},"product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/media\/audio\/de\/da\/de70209d81cac3fb2345627dcf7d14da\/ld\/ld.m3u8","chapter_id":"0","column_had_sub":true,"audio_dubber":"杨超","is_finished":false,"inline_video_subtitles":{},"like":{"had_done":false,"count":54},"neighbors":{"left":{"id":2751,"article_title":"38 | 编程范式游记（9）- 编程的本质"},"right":{"id":2754,"article_title":"40 | 编程范式游记（11）- 程序世界里的编程范式"}},"audio_time":"00:04:35","video_height":0,"rate_percent":0,"article_content":"<p>你好，我是陈皓，网名左耳朵耗子。<\/p><p>这节课重点介绍Prolog语言。Prolog（Programming in Logic）是一种逻辑编程语言，它创建在逻辑学的理论基础之上，最初被运用于自然语言等研究领域。现在它已被广泛地应用在人工智能的研究中，可以用来建造专家系统、自然语言理解、智能知识库等。<\/p><p>Prolog语言最早由艾克斯马赛大学（Aix-Marseille University）的Alain Colmerauer与Philippe Roussel等人于20世纪60年代末研究开发的。1972年被公认为是Prolog语言正式诞生的年份，自1972年以后，分支出多种Prolog的方言。<\/p><p>最主要的两种方言为Edinburgh和Aix-Marseille。最早的Prolog解释器由Roussel建造，而第一个Prolog编译器则是David Warren编写的。<\/p><p>Prolog一直在北美和欧洲被广泛使用。日本政府曾经为了建造智能计算机而用Prolog来开发ICOT第五代计算机系统。在早期的机器智能研究领域，Prolog曾经是主要的开发工具。<\/p><p>20世纪80年代Borland开发的Turbo Prolog，进一步普及了Prolog的使用。1995年确定了ISO Prolog标准。<\/p><!-- [[[read_end]]] --><p>有别于一般的函数式语言，Prolog的程序是基于谓词逻辑的理论。最基本的写法是定立对象与对象之间的关系，之后可以用询问目标的方式来查询各种对象之间的关系。系统会自动进行匹配及回溯，找出所询问的答案。<\/p><p>Prolog代码中以大写字母开头的元素是变量，字符串、数字或以小写字母开头的元素是常量，下划线（_）被称为匿名变量。<\/p><h1>Prolog的语言特征<\/h1><p>逻辑编程是靠推理，比如下面的示例：<\/p><pre><code>program mortal(X) :- philosopher(X).\n\nphilosopher(Socrates).\nphilosopher(Plato).\nphilosopher(Aristotle).\n\nmortal_report:-\nwrite('Known mortals are:'), nl, mortal(X),\nwrite(X),nl,\nfail.\n<\/code><\/pre><p>我们可以看到下面的几个步骤。<\/p><ol>\n<li>先定义一个规则：哲学家是人类。<\/li>\n<li>然后陈述事实：苏格拉底、亚里士多德、柏拉图都是哲学家。<\/li>\n<li>然后，我们问，谁是人类？于是就会输出苏格拉底、亚里士多德、柏拉图。<\/li>\n<\/ol><p>下面是逻辑编程范式的几个特征。<\/p><ul>\n<li>逻辑编程的要点是将正规的逻辑风格带入计算机程序设计之中。<\/li>\n<li>逻辑编程建立了描述一个问题里的世界的逻辑模型。<\/li>\n<li>逻辑编程的目标是对它的模型建立新的陈述。<\/li>\n<li>通过陈述事实——因果关系。<\/li>\n<li>程序自动推导出相关的逻辑。<\/li>\n<\/ul><h1>经典问题：地图着色问题<\/h1><p>我们再来看一个经典的四色地图问题。任何一个地图，相邻区域不能用相同颜色，只要用四种不同的颜色就够了。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/db\/cb\/db670cfbe7497d71eba70d60d8aa0fcb.png?wh=935*484\" alt=\"\"><\/p><p>首先，定义四种颜色。<\/p><pre><code>color(red).\ncolor(green).\ncolor(blue).\ncolor(yellow).\n<\/code><\/pre><p>然后，定义一个规则：相邻的两个地区不能用相同的颜色。<\/p><pre><code>neighbor(StateAColor, StateBColor) :- color(StateAColor), color(StateBColor), \n    StateAColor \\= StateBColor. \/* \\= is the not equal operator *\/\n<\/code><\/pre><p>最前面的两个条件：<code>color(StateAColor)<\/code> 和 <code>color(StateBColor)<\/code> 表明了两个变量 <code>StateAColor<\/code> 和 <code>StateBColor<\/code>。然后，第三个条件： <code>StateAColor \\= StateBColor<\/code> 表示颜色不能相同。<\/p><p>接下来的事就比较简单了。我们描述事实就好了，描述哪些区域是相邻的事实。<\/p><p>比如，下面描述了 BW 和 BY 是相邻的。<\/p><p><code>germany(BW, BY) :- neighbor(BW, BY).<\/code><\/p><p>下面则描述多个区 BW、 BY、 SL、 RP、 和 ND 的相邻关系：<\/p><p><code>germany(BW, BY, SL, RP, HE) :- neighbor(BW, BY), neighbor(BW, RP), neighbor(BW, HE).<\/code><\/p><p>于是，我们就可以描述整个德国地图的相邻关系了。<\/p><pre><code>germany(SH, MV, HH, HB, NI, ST, BE, BB, SN, NW, HE, TH, RP, SL, BW, BY) :- \nneighbor(SH, NI), neighbor(SH, HH), neighbor(SH, MV),\nneighbor(HH, NI),\nneighbor(MV, NI), neighbor(MV, BB),\nneighbor(NI, HB), neighbor(NI, BB), neighbor(NI, ST), neighbor(NI, TH),\nneighbor(NI, HE), neighbor(NI, NW),\nneighbor(ST, BB), neighbor(ST, SN), neighbor(ST, TH),\nneighbor(BB, BE), neighbor(BB, SN),\nneighbor(NW, HE), neighbor(NW, RP),\nneighbor(SN, TH), neighbor(SN, BY),\nneighbor(RP, SL), neighbor(RP, HE), neighbor(RP, BW),\nneighbor(HE, BW), neighbor(HE, TH), neighbor(HE, BY),\nneighbor(TH, BY),\nneighbor(BW, BY).\n<\/code><\/pre><p>最后，我们使用如下语句，就可以让Prolog推导到各个地区的颜色。<\/p><pre><code>?- germany(SH, MV, HH, HB, NI, ST, BE, BB, SN, NW, HE, TH, RP, SL, BW, BY).\n<\/code><\/pre><h1>小结<\/h1><p>Prolog这种逻辑编程，把业务逻辑或是说算法抽象成只关心规则、事实和问题的推导这样的标准方式，不需要关心程序控制，也不需要关心具体的实现算法。只需要给出可以用于推导的规则和相关的事实，问题就可以被通过逻辑推导来解决掉。是不是很有意思，也很好玩？<\/p><p>如果有兴趣，你可以学习一下，这里推荐两个学习资源：<\/p><ul>\n<li><a href=\"http:\/\/www.doc.gold.ac.uk\/~mas02gw\/prolog_tutorial\/prologpages\/\">Prolog Tutorial<\/a><\/li>\n<li><a href=\"http:\/\/www.learnprolognow.org\">Learn Prolog Now!<\/a><\/li>\n<\/ul><p>以下是《编程范式游记》系列文章的目录，方便你了解这一系列内容的全貌。<\/p><ul>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/301\">01 | 编程范式游记：起源<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/303\">02 | 编程范式游记：泛型编程<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/2017\">03 | 编程范式游记：类型系统和泛型的本质<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/2711\">04 | 编程范式游记：函数式编程<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/2723\">05 | 编程范式游记：修饰器模式<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/2729\">06 | 编程范式游记：面向对象编程<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/2741\">07 | 编程范式游记：基于原型的编程范式<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/2748\">08 | 编程范式游记：Go 语言的委托模式<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/2751\">09 | 编程范式游记：编程的本质<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/2752\">10 | 编程范式游记：逻辑编程范式<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/2754\">11 | 编程范式游记：程序世界里的编程范式<\/a><\/li>\n<\/ul>","footer_cover_data":{"img_url":"","mp_url":"","link_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{},"product_id":100002201,"like_count":63,"had_liked":false,"article_subtitle":"无","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/de\/da\/de70209d81cac3fb2345627dcf7d14da.mp3","id":2752,"had_viewed":false,"article_title":"39 | 编程范式游记（10）- 逻辑编程范式","column_bgcolor":"#6091b2","share":{"content":"左耳朵耗子的专栏，20年骨灰级程序员，专栏涵盖程序员练级攻略、全栈程序员的体系化学习路线与进阶底图。专栏已有32000人加入学习，可以说是程序员必备宝典。","title":"陈皓 · 左耳听风","poster":"https:\/\/static001.geekbang.org\/resource\/image\/08\/c1\/084b2e8b8757ccb8401d6e6501ef8bc1.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/21\/da\/216b472de3f9027371576e107601c2da.jpg"},"is_video_preview":false,"article_summary":"逻辑编程的要点是将正规的逻辑风格带入计算机程序设计之中。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/4e\/76\/4e7bf4f8d02b3faef1f047690f87cf76.jpeg","column_sale_type":2,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/21\/da\/216b472de3f9027371576e107601c2da.jpg","column_id":48,"audio_time_arr":{"m":"04","s":"35","h":"00"},"video_time":"","audio_title":"2.9 杨超 039_01.MP3","audio_md5":"de70209d81cac3fb2345627dcf7d14da","video_size":0,"text_read_percent":0,"comment_count":10,"cid":48,"article_sharetitle":"左耳朵耗子的编程范式游记（10）- 逻辑编程范式","column_is_onboard":true,"article_cshort":"<p>你好，我是陈皓，网名左耳朵耗子。<\/p><p>这节课重点介绍Prolog语言。Prolog（Programming in Logic）是一种逻辑编程语言，它创建在逻辑学的理论基础之上，最初被运用于自然语言等研究领域。现在它已被广泛地应用在人工智能的研究中，可以用来建造专家系统、自然语言理解、智能知识库等。<\/p><p>Prolog语言最早由艾克斯马赛大学（Aix-Marseille University）的Alain Colmerauer与Philippe Roussel等人于20世纪60年代末研究开发的。1972年被公认为是Prolog语言正式诞生的年份，自1972年以后，分支出多种Prolog的方言。<\/p><p>最主要的两种方言为Edinburgh和Aix-Marseille。最早的Prolog解释器由Roussel建造，而第一个Prolog编译器则是David Warren编写的。<\/p><p>Prolog一直在北美和欧洲被广泛使用。日本政府曾经为了建造智能计算机而用Prolog来开发ICOT第五代计算机系统。在早期的机器智能研究领域，Prolog曾经是主要的开发工具。<\/p><p>20世纪80年代Borland开发的Turbo Prolog，进一步普及了Prolog的使用。1995年确定了ISO Prolog标准。<\/p>","video_width":0,"column_could_sub":true,"article_ctime":1518476400,"score":"31518476400","video_media_map":{},"video_preview":{},"video":0,"video_time_arr":{"m":"","s":"","h":""},"video_total_seconds":0},"extra":{},"error":{}}