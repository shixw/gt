{"code":0,"data":{"video_id":"","sku":"100028001","video_cover":"","author_name":"刘超","text_read_version":0,"audio_size":12685824,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/73\/0a\/7352703652a56ce13ea52486c737a00a.jpg","subtitles":{},"product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/b6\/c3\/b65d73406af694be02901d943d1c52c3\/ld\/ld.m3u8","chapter_id":"0","column_had_sub":true,"audio_dubber":"李良","is_finished":false,"inline_video_subtitles":{},"like":{"had_done":false,"count":226},"neighbors":{"left":{"id":100861,"article_title":"11 | 答疑课堂：深入了解NIO的优化实现原理"},"right":{"id":101651,"article_title":"13 | 多线程之锁优化（中）：深入了解Lock同步锁的优化方法"}},"audio_time":"00:13:13","video_height":0,"rate_percent":0,"article_content":"<p>你好，我是刘超。从这讲开始，我们就正式进入到第三模块——多线程性能调优。<\/p><p><strong>在并发编程中，多个线程访问同一个共享资源时，我们必须考虑如何维护数据的原子性。<\/strong>在JDK1.5之前，Java是依靠Synchronized关键字实现锁功能来做到这点的。Synchronized是JVM实现的一种内置锁，锁的获取和释放是由JVM隐式实现。<\/p><p>到了JDK1.5版本，并发包中新增了Lock接口来实现锁功能，它提供了与Synchronized关键字类似的同步功能，只是在使用时需要显式获取和释放锁。<\/p><p>Lock同步锁是基于Java实现的，而Synchronized是基于底层操作系统的Mutex Lock实现的，每次获取和释放锁操作都会带来用户态和内核态的切换，从而增加系统性能开销。因此，在锁竞争激烈的情况下，Synchronized同步锁在性能上就表现得非常糟糕，它也常被大家称为重量级锁。<\/p><p><span class=\"orange\">特别是在单个线程重复申请锁的情况下，JDK1.5版本的Synchronized锁性能要比Lock的性能差很多。<\/span>例如，在Dubbo基于Netty实现的通信中，消费端向服务端通信之后，由于接收返回消息是异步，所以需要一个线程轮询监听返回信息。而在接收消息时，就需要用到锁来确保request session的原子性。如果我们这里使用Synchronized同步锁，那么每当同一个线程请求锁资源时，都会发生一次用户态和内核态的切换。<\/p><!-- [[[read_end]]] --><p>到了JDK1.6版本之后，Java对Synchronized同步锁做了充分的优化，甚至在某些场景下，它的性能已经超越了Lock同步锁。这一讲我们就来看看Synchronized同步锁究竟是通过了哪些优化，实现了性能地提升。<\/p><h2>Synchronized同步锁实现原理<\/h2><p>了解Synchronized同步锁优化之前，我们先来看看它的底层实现原理，这样可以帮助我们更好地理解后面的内容。<\/p><p><strong>通常Synchronized实现同步锁的方式有两种，一种是修饰方法，一种是修饰方法块。<\/strong>以下就是通过Synchronized实现的两种同步方法加锁的方式：<\/p><pre><code>\/\/ 关键字在实例方法上，锁为当前实例\n\tpublic synchronized void method1() {\n\t    \/\/ code\n\t}\n\t\n\t\/\/ 关键字在代码块上，锁为括号里面的对象\n\tpublic void method2() {\n\t    Object o = new Object();\n\t    synchronized (o) {\n\t        \/\/ code\n\t    }\n\t}\n<\/code><\/pre><p>下面我们可以通过反编译看下具体字节码的实现，运行以下反编译命令，就可以输出我们想要的字节码：<\/p><pre><code>javac -encoding UTF-8 SyncTest.java  \/\/先运行编译class文件命令\n<\/code><\/pre><pre><code>javap -v SyncTest.class \/\/再通过javap打印出字节文件\n<\/code><\/pre><p>通过输出的字节码，你会发现：Synchronized在修饰同步代码块时，是由 monitorenter和monitorexit指令来实现同步的。进入monitorenter 指令后，线程将持有Monitor对象，退出monitorenter指令后，线程将释放该Monitor对象。<\/p><pre><code>  public void method2();\n    descriptor: ()V\n    flags: ACC_PUBLIC\n    Code:\n      stack=2, locals=4, args_size=1\n         0: new           #2                  \n         3: dup\n         4: invokespecial #1                  \n         7: astore_1\n         8: aload_1\n         9: dup\n        10: astore_2\n        11: monitorenter \/\/monitorenter 指令\n        12: aload_2\n        13: monitorexit  \/\/monitorexit  指令\n        14: goto          22\n        17: astore_3\n        18: aload_2\n        19: monitorexit\n        20: aload_3\n        21: athrow\n        22: return\n      Exception table:\n         from    to  target type\n            12    14    17   any\n            17    20    17   any\n      LineNumberTable:\n        line 18: 0\n        line 19: 8\n        line 21: 12\n        line 22: 22\n      StackMapTable: number_of_entries = 2\n        frame_type = 255 \/* full_frame *\/\n          offset_delta = 17\n          locals = [ class com\/demo\/io\/SyncTest, class java\/lang\/Object, class java\/lang\/Object ]\n          stack = [ class java\/lang\/Throwable ]\n        frame_type = 250 \/* chop *\/\n          offset_delta = 4\n<\/code><\/pre><p>再来看以下同步方法的字节码，你会发现：当Synchronized修饰同步方法时，并没有发现monitorenter和monitorexit指令，而是出现了一个ACC_SYNCHRONIZED标志。<\/p><p><span class=\"orange\">这是因为JVM使用了ACC_SYNCHRONIZED访问标志来区分一个方法是否是同步方法。<\/span>当方法调用时，调用指令将会检查该方法是否被设置ACC_SYNCHRONIZED访问标志。如果设置了该标志，执行线程将先持有Monitor对象，然后再执行方法。在该方法运行期间，其它线程将无法获取到该Mointor对象，当方法执行完成后，再释放该Monitor对象。<\/p><pre><code>   public synchronized void method1();\n    descriptor: ()V\n    flags: ACC_PUBLIC, ACC_SYNCHRONIZED \/\/ ACC_SYNCHRONIZED 标志\n    Code:\n      stack=0, locals=1, args_size=1\n         0: return\n      LineNumberTable:\n        line 8: 0\n\n<\/code><\/pre><p>通过以上的源码，我们再来看看Synchronized修饰方法是怎么实现锁原理的。<\/p><p>JVM中的同步是基于进入和退出管程（Monitor）对象实现的。每个对象实例都会有一个Monitor，Monitor可以和对象一起创建、销毁。Monitor是由ObjectMonitor实现，而ObjectMonitor是由C++的ObjectMonitor.hpp文件实现，如下所示：<\/p><pre><code>ObjectMonitor() {\n   _header = NULL;\n   _count = 0; \/\/记录个数\n   _waiters = 0,\n   _recursions = 0;\n   _object = NULL;\n   _owner = NULL;\n   _WaitSet = NULL; \/\/处于wait状态的线程，会被加入到_WaitSet\n   _WaitSetLock = 0 ;\n   _Responsible = NULL ;\n   _succ = NULL ;\n   _cxq = NULL ;\n   FreeNext = NULL ;\n   _EntryList = NULL ; \/\/处于等待锁block状态的线程，会被加入到该列表\n   _SpinFreq = 0 ;\n   _SpinClock = 0 ;\n   OwnerIsThread = 0 ;\n}\n<\/code><\/pre><p>当多个线程同时访问一段同步代码时，多个线程会先被存放在ContentionList和_EntryList 集合中，处于block状态的线程，都会被加入到该列表。接下来当线程获取到对象的Monitor时，Monitor是依靠底层操作系统的Mutex Lock来实现互斥的，线程申请Mutex成功，则持有该Mutex，其它线程将无法获取到该Mutex，竞争失败的线程会再次进入ContentionList被挂起。<\/p><p>如果线程调用wait() 方法，就会释放当前持有的Mutex，并且该线程会进入WaitSet集合中，等待下一次被唤醒。如果当前线程顺利执行完方法，也将释放Mutex。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/f7\/08\/f78e6979c424cce677add97080811308.jpg?wh=2354*784\" alt=\"\"><\/p><p>看完上面的讲解，相信你对同步锁的实现原理已经有个深入的了解了。总结来说就是，同步锁在这种实现方式中，因Monitor是依赖于底层的操作系统实现，存在用户态与内核态之间的切换，所以增加了性能开销。<\/p><h2>锁升级优化<\/h2><p>为了提升性能，JDK1.6引入了偏向锁、轻量级锁、重量级锁概念，来减少锁竞争带来的上下文切换，而正是新增的Java对象头实现了锁升级功能。<\/p><p>当Java对象被Synchronized关键字修饰成为同步锁后，围绕这个锁的一系列升级操作都将和Java对象头有关。<\/p><h3>Java对象头<\/h3><p>在JDK1.6 JVM中，对象实例在堆内存中被分为了三个部分：对象头、实例数据和对齐填充。其中Java对象头由Mark Word、指向类的指针以及数组长度三部分组成。<\/p><p>Mark Word记录了对象和锁有关的信息。Mark Word在64位JVM中的长度是64bit，我们可以一起看下64位JVM的存储结构是怎么样的。如下图所示：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/fd\/f8\/fd86f1b5cbac1f652bea58b039fbc8f8.jpg?wh=1426*478\" alt=\"\"><\/p><p>锁升级功能主要依赖于Mark Word中的锁标志位和释放偏向锁标志位，<span class=\"orange\">Synchronized同步锁就是从偏向锁开始的，随着竞争越来越激烈，偏向锁升级到轻量级锁，最终升级到重量级锁。<\/span>下面我们就沿着这条优化路径去看下具体的内容。<\/p><h3>1.偏向锁<\/h3><p>偏向锁主要用来优化同一线程多次申请同一个锁的竞争。在某些情况下，大部分时间是同一个线程竞争锁资源，例如，在创建一个线程并在线程中执行循环监听的场景下，或单线程操作一个线程安全集合时，同一线程每次都需要获取和释放锁，每次操作都会发生用户态与内核态的切换。<\/p><p>偏向锁的作用就是，当一个线程再次访问这个同步代码或方法时，该线程只需去对象头的Mark Word中去判断一下是否有偏向锁指向它的ID，无需再进入Monitor去竞争对象了。<strong>当对象被当做同步锁并有一个线程抢到了锁时，锁标志位还是01，“是否偏向锁”标志位设置为1，并且记录抢到锁的线程ID，表示进入偏向锁状态。<\/strong><\/p><p>一旦出现其它线程竞争锁资源时，偏向锁就会被撤销。偏向锁的撤销需要等待全局安全点，暂停持有该锁的线程，同时检查该线程是否还在执行该方法，如果是，则升级锁，反之则被其它线程抢占。<\/p><p><strong>下图中红线流程部分为偏向锁获取和撤销流程：<\/strong><\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/d9\/a2\/d9f1e7fae6996a940e9471c47a455ba2.png?wh=1045*2091\" alt=\"\"><\/p><p>因此，在高并发场景下，当大量线程同时竞争同一个锁资源时，偏向锁就会被撤销，发生stop the word后， 开启偏向锁无疑会带来更大的性能开销，这时我们可以通过添加JVM参数关闭偏向锁来调优系统性能，示例代码如下：<\/p><pre><code>-XX:-UseBiasedLocking \/\/关闭偏向锁（默认打开）\n<\/code><\/pre><p>或<\/p><pre><code>-XX:+UseHeavyMonitors  \/\/设置重量级锁\n<\/code><\/pre><h3>2.轻量级锁<\/h3><p>当有另外一个线程竞争获取这个锁时，由于该锁已经是偏向锁，当发现对象头Mark Word中的线程ID不是自己的线程ID，就会进行CAS操作获取锁，如果获取成功，直接替换Mark Word中的线程ID为自己的ID，该锁会保持偏向锁状态；如果获取锁失败，代表当前锁有一定的竞争，偏向锁将升级为轻量级锁。<\/p><p>轻量级锁适用于线程交替执行同步块的场景，绝大部分的锁在整个同步周期内都不存在长时间的竞争。<\/p><p><strong>下图中红线流程部分为升级轻量级锁及操作流程：<\/strong><\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/84\/f0\/84f4d5dd908788fec0940431b4b912f0.png?wh=1053*2076\" alt=\"\"><\/p><h3>3.自旋锁与重量级锁<\/h3><p>轻量级锁CAS抢锁失败，线程将会被挂起进入阻塞状态。如果正在持有锁的线程在很短的时间内释放资源，那么进入阻塞状态的线程无疑又要申请锁资源。<\/p><p>JVM提供了一种自旋锁，可以通过自旋方式不断尝试获取锁，从而避免线程被挂起阻塞。这是基于大多数情况下，线程持有锁的时间都不会太长，毕竟线程被挂起阻塞可能会得不偿失。<\/p><p>从JDK1.7开始，自旋锁默认启用，自旋次数由JVM设置决定，这里我不建议设置的重试次数过多，因为CAS重试操作意味着长时间地占用CPU。<\/p><p>自旋锁重试之后如果抢锁依然失败，同步锁就会升级至重量级锁，锁标志位改为10。在这个状态下，未抢到锁的线程都会进入Monitor，之后会被阻塞在_WaitSet队列中。<\/p><p><strong>下图中红线流程部分为自旋后升级为重量级锁的流程：<\/strong><\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/2e\/99\/2e912fc6de6faeb1713a10959e5f1e99.png?wh=1041*2075\" alt=\"\"><\/p><p><span class=\"orange\">在锁竞争不激烈且锁占用时间非常短的场景下，自旋锁可以提高系统性能。<\/span>一旦锁竞争激烈或锁占用的时间过长，自旋锁将会导致大量的线程一直处于CAS重试状态，占用CPU资源，反而会增加系统性能开销。所以自旋锁和重量级锁的使用都要结合实际场景。<\/p><p>在高负载、高并发的场景下，我们可以通过设置JVM参数来关闭自旋锁，优化系统性能，示例代码如下：<\/p><pre><code>-XX:-UseSpinning \/\/参数关闭自旋锁优化(默认打开) \n-XX:PreBlockSpin \/\/参数修改默认的自旋次数。JDK1.7后，去掉此参数，由jvm控制\n<\/code><\/pre><h2>动态编译实现锁消除\/锁粗化<\/h2><p>除了锁升级优化，Java还使用了编译器对锁进行优化。JIT 编译器在动态编译同步块的时候，借助了一种被称为逃逸分析的技术，来判断同步块使用的锁对象是否只能够被一个线程访问，而没有被发布到其它线程。<\/p><p>确认是的话，那么 JIT 编译器在编译这个同步块的时候不会生成 synchronized 所表示的锁的申请与释放的机器码，即消除了锁的使用。在 Java7 之后的版本就不需要手动配置了，该操作可以自动实现。<\/p><p>锁粗化同理，就是在 JIT 编译器动态编译时，如果发现几个相邻的同步块使用的是同一个锁实例，那么 JIT 编译器将会把这几个同步块合并为一个大的同步块，从而避免一个线程“反复申请、释放同一个锁”所带来的性能开销。<\/p><h2>减小锁粒度<\/h2><p>除了锁内部优化和编译器优化之外，我们还可以通过代码层来实现锁优化，减小锁粒度就是一种惯用的方法。<\/p><p>当我们的锁对象是一个数组或队列时，集中竞争一个对象的话会非常激烈，锁也会升级为重量级锁。<span class=\"orange\">我们可以考虑将一个数组和队列对象拆成多个小对象，来降低锁竞争，提升并行度。<\/span><\/p><p>最经典的减小锁粒度的案例就是JDK1.8之前实现的ConcurrentHashMap版本。我们知道，HashTable是基于一个数组+链表实现的，所以在并发读写操作集合时，存在激烈的锁资源竞争，也因此性能会存在瓶颈。而ConcurrentHashMap就很很巧妙地使用了分段锁Segment来降低锁资源竞争，如下图所示：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/c8\/92\/c8306510d7562eb96c6f6b22a75e7592.png?wh=1042*650\" alt=\"\"><\/p><h2>总结<\/h2><p>JVM在JDK1.6中引入了分级锁机制来优化Synchronized，当一个线程获取锁时，首先对象锁将成为一个偏向锁，这样做是为了优化同一线程重复获取导致的用户态与内核态的切换问题；其次如果有多个线程竞争锁资源，锁将会升级为轻量级锁，它适用于在短时间内持有锁，且分锁有交替切换的场景；轻量级锁还使用了自旋锁来避免线程用户态与内核态的频繁切换，大大地提高了系统性能；但如果锁竞争太激烈了，那么同步锁将会升级为重量级锁。<\/p><p><span class=\"orange\">减少锁竞争，是优化Synchronized同步锁的关键。<\/span>我们应该尽量使Synchronized同步锁处于轻量级锁或偏向锁，这样才能提高Synchronized同步锁的性能；通过减小锁粒度来降低锁竞争也是一种最常用的优化方法；另外我们还可以通过减少锁的持有时间来提高Synchronized同步锁在自旋时获取锁资源的成功率，避免Synchronized同步锁升级为重量级锁。<\/p><p>这一讲我们重点了解了Synchronized同步锁优化，这里由于字数限制，也为了你能更好地理解内容，目录中12讲的内容我拆成了两讲，在下一讲中，我会重点讲解Lock同步锁的优化方法。<\/p><h2>思考题<\/h2><p>请问以下Synchronized同步锁对普通方法和静态方法的修饰有什么区别？<\/p><pre><code>\/\/ 修饰普通方法\n\tpublic synchronized void method1() {\n\t    \/\/ code\n\t}\n\t\n\t\/\/ 修饰静态方法\n\tpublic  synchronized static void method2() {\n\t    \/\/ code\n\t}\n<\/code><\/pre><p>期待在留言区看到你的答案。也欢迎你点击“请朋友读”，把今天的内容分享给身边的朋友，邀请他一起学习。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/bb\/67\/bbe343640d6b708832c4133ec53ed967.jpg?wh=1110*659\" alt=\"unpreview\"><\/p>","footer_cover_data":{"img_url":"","mp_url":"","link_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{},"product_id":100028001,"like_count":279,"had_liked":false,"article_subtitle":"无","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/b6\/c3\/b65d73406af694be02901d943d1c52c3.mp3","id":101244,"had_viewed":false,"article_title":"12 | 多线程之锁优化（上）：深入了解Synchronized同步锁的优化方法","column_bgcolor":"#F6F7FB","share":{"content":"覆盖80%以上Java应用调优场景","title":"刘超 · Java性能调优实战","poster":"https:\/\/static001.geekbang.org\/resource\/image\/ed\/99\/edfa939ff065cb8368ed4227930df399.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/b2\/01\/b2f97b2cbefe40e19af4d28508387e01.jpg"},"is_video_preview":false,"article_summary":"减少锁竞争，是优化Synchronized同步锁的关键。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/32\/ec\/32755540196e6ae2cb9e886e0a40c1ec.jpeg","column_sale_type":2,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/b2\/01\/b2f97b2cbefe40e19af4d28508387e01.jpg","column_id":185,"audio_time_arr":{"m":"13","s":"13","h":"00"},"video_time":"","audio_title":"刘超-12","audio_md5":"b65d73406af694be02901d943d1c52c3","video_size":0,"text_read_percent":0,"comment_count":118,"cid":185,"article_sharetitle":"深入了解Synchronized同步锁的优化方法","column_is_onboard":true,"article_cshort":"<p>你好，我是刘超。从这讲开始，我们就正式进入到第三模块——多线程性能调优。<\/p><p><strong>在并发编程中，多个线程访问同一个共享资源时，我们必须考虑如何维护数据的原子性。<\/strong>在JDK1.5之前，Java是依靠Synchronized关键字实现锁功能来做到这点的。Synchronized是JVM实现的一种内置锁，锁的获取和释放是由JVM隐式实现。<\/p><p>到了JDK1.5版本，并发包中新增了Lock接口来实现锁功能，它提供了与Synchronized关键字类似的同步功能，只是在使用时需要显式获取和释放锁。<\/p><p>Lock同步锁是基于Java实现的，而Synchronized是基于底层操作系统的Mutex Lock实现的，每次获取和释放锁操作都会带来用户态和内核态的切换，从而增加系统性能开销。因此，在锁竞争激烈的情况下，Synchronized同步锁在性能上就表现得非常糟糕，它也常被大家称为重量级锁。<\/p><p><span class=\"orange\">特别是在单个线程重复申请锁的情况下，JDK1.5版本的Synchronized锁性能要比Lock的性能差很多。<\/span>例如，在Dubbo基于Netty实现的通信中，消费端向服务端通信之后，由于接收返回消息是异步，所以需要一个线程轮询监听返回信息。而在接收消息时，就需要用到锁来确保request session的原子性。如果我们这里使用Synchronized同步锁，那么每当同一个线程请求锁资源时，都会发生一次用户态和内核态的切换。<\/p>","video_width":0,"column_could_sub":true,"article_ctime":1560528000,"score":"41560528000","video_media_map":{},"video_preview":{},"video":0,"video_time_arr":{"m":"","s":"","h":""},"video_total_seconds":0},"extra":{},"error":{}}