{"code":0,"data":{"video_id":"","sku":"100028001","video_cover":"","author_name":"刘超","text_read_version":0,"audio_size":13765632,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/d7\/28\/d728e71a998a8ab6f9d97460afe22428.jpg","subtitles":{},"product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/1a\/a9\/1a5716c9c47742935200869724cee5a9\/ld\/ld.m3u8","chapter_id":"0","column_had_sub":true,"audio_dubber":"李良","is_finished":false,"inline_video_subtitles":{},"like":{"had_done":false,"count":67},"neighbors":{"left":{"id":104521,"article_title":"19 | 如何用协程来优化多线程业务？"},"right":{"id":105756,"article_title":"加餐 | 什么是数据的强、弱一致性？"}},"audio_time":"00:07:11","video_height":0,"rate_percent":0,"article_content":"<p>你好，我是刘超。<\/p><p>不知不觉“多线程性能优化“已经讲完了，今天这讲我来解答下各位同学在这个模块集中提出的两大问题，<span class=\"orange\">第一个是有关监测上下文切换异常的命令排查工具，第二个是有关blockingQueue的内容。<\/span><\/p><p>也欢迎你积极留言给我，让我知晓你想了解的内容，或者说出你的困惑，我们共同探讨。下面我就直接切入今天的主题了。<\/p><h2>使用系统命令查看上下文切换<\/h2><p>在第15讲中我提到了上下文切换，其中有用到一些工具进行监测，由于篇幅关系就没有详细介绍，今天我就补充总结几个常用的工具给你。<\/p><h3>1. Linux命令行工具之vmstat命令<\/h3><p>vmstat是一款指定采样周期和次数的功能性监测工具，我们可以<span class=\"orange\">使用它监控进程上下文切换的情况。<\/span><\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/13\/71\/13eeee053c553863b3bdd95c07cb3b71.jpg?wh=1362*166\" alt=\"\"><\/p><p>vmstat 1 3  命令行代表每秒收集一次性能指标，总共获取3次。以下为上图中各个性能指标的注释：<\/p><ul>\n<li><strong>procs<\/strong><br>\nr：等待运行的进程数<br>\nb：处于非中断睡眠状态的进程数<\/li>\n<li><strong>memory<\/strong><br>\nswpd：虚拟内存使用情况<br>\nfree：空闲的内存<br>\nbuff：用来作为缓冲的内存数<br>\ncache：缓存大小<\/li>\n<li><strong>swap<\/strong><br>\nsi：从磁盘交换到内存的交换页数量<br>\nso：从内存交换到磁盘的交换页数量<\/li>\n<li><strong>io<\/strong><br>\nbi：发送到块设备的块数<br>\nbo：从块设备接收到的块数<\/li>\n<li><strong>system<\/strong><br>\nin：每秒中断数<br>\ncs：每秒上下文切换次数<\/li>\n<li><strong>cpu<\/strong><br>\nus：用户CPU使用时间<br>\nsy：内核CPU系统使用时间<br>\nid：空闲时间<br>\nwa：等待I\/O时间<br>\nst：运行虚拟机窃取的时间<\/li>\n<\/ul><!-- [[[read_end]]] --><h3>2. Linux命令行工具之pidstat命令<\/h3><p>我们通过上述的vmstat命令只能观察到哪个进程的上下文切换出现了异常，那如果是要查看哪个线程的上下文出现了异常呢？<\/p><p><span class=\"orange\">pidstat命令就可以帮助我们监测到具体线程的上下文切换。<\/span>pidstat是Sysstat中一个组件，也是一款功能强大的性能监测工具。我们可以通过命令  yum install sysstat  安装该监控组件。<\/p><p>通过pidstat -help命令，我们可以查看到有以下几个常用参数可以监测线程的性能：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/7a\/d1\/7a93cba1673119e4c9162a29e9875dd1.jpg?wh=1316*170\" alt=\"\"><\/p><p>常用参数：<\/p><ul>\n<li>-u：默认参数，显示各个进程的cpu使用情况；<\/li>\n<li>-r：显示各个进程的内存使用情况；<\/li>\n<li>-d：显示各个进程的I\/O使用情况；<\/li>\n<li>-w：显示每个进程的上下文切换情况；<\/li>\n<li>-p：指定进程号；<\/li>\n<li>-t：显示进程中线程的统计信息<\/li>\n<\/ul><p>首先，通过pidstat -w -p pid 命令行，我们可以查看到进程的上下文切换：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/3e\/4f\/3e6cee25e85826aa5d4f8f480535234f.jpg?wh=1524*140\" alt=\"\"><\/p><ul>\n<li>cswch\/s：每秒主动任务上下文切换数量<\/li>\n<li>nvcswch\/s：每秒被动任务上下文切换数量<\/li>\n<\/ul><p>之后，通过pidstat -w -p pid -t 命令行，我们可以查看到具体线程的上下文切换：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/72\/6f\/728b1634e3e9971307264b5736cb1c6f.jpg?wh=1572*918\" alt=\"\"><\/p><h3>3. JDK工具之jstack命令<\/h3><p>查看具体线程的上下文切换异常，我们还<span class=\"orange\">可以使用jstack命令查看线程堆栈的运行情况<\/span>。jstack是JDK自带的线程堆栈分析工具，使用该命令可以查看或导出 Java 应用程序中的线程堆栈信息。<\/p><p>jstack最常用的功能就是使用 jstack pid 命令查看线程堆栈信息，通常是结合pidstat -p pid -t一起查看具体线程的状态，也经常用来排查一些死锁的异常。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/0e\/1d\/0e61a2f4eb945f5a26bd7987d0babd1d.jpg?wh=2224*382\" alt=\"\"><\/p><p>每个线程堆栈的信息中，都可以查看到线程ID、线程状态（wait、sleep、running等状态）以及是否持有锁等。<\/p><p>我们可以通过jstack 16079 &gt; \/usr\/dump将线程堆栈信息日志dump下来，之后打开dump文件，通过查看线程的状态变化，就可以找出导致上下文切换异常的具体原因。例如，系统出现了大量处于BLOCKED状态的线程，我们就需要立刻分析代码找出原因。<\/p><h2>多线程队列<\/h2><p>针对这讲的第一个问题，一份上下文切换的命令排查工具就总结完了。下面我来解答第二个问题，是在17讲中呼声比较高的有关blockingQueue的内容。<\/p><p>在Java多线程应用中，特别是在线程池中，队列的使用率非常高。Java提供的线程安全队列又分为了阻塞队列和非阻塞队列。<\/p><h3>1.阻塞队列<\/h3><p>我们先来看下阻塞队列。阻塞队列可以很好地支持生产者和消费者模式的相互等待，当队列为空的时候，消费线程会阻塞等待队列不为空；当队列满了的时候，生产线程会阻塞直到队列不满。<\/p><p>在Java线程池中，也用到了阻塞队列。当创建的线程数量超过核心线程数时，新建的任务将会被放到阻塞队列中。我们可以根据自己的业务需求来选择使用哪一种阻塞队列，阻塞队列通常包括以下几种：<\/p><ul>\n<li><strong> ArrayBlockingQueue：<\/strong>一个基于数组结构实现的有界阻塞队列，按 FIFO（先进先出）原则对元素进行排序，使用ReentrantLock、Condition来实现线程安全；<\/li>\n<li><strong> LinkedBlockingQueue：<\/strong>一个基于链表结构实现的阻塞队列，同样按FIFO （先进先出） 原则对元素进行排序，使用ReentrantLock、Condition来实现线程安全，吞吐量通常要高于ArrayBlockingQueue；<\/li>\n<li><strong>PriorityBlockingQueue：<\/strong>一个具有优先级的无限阻塞队列，基于二叉堆结构实现的无界限（最大值Integer.MAX_VALUE - 8）阻塞队列，队列没有实现排序，但每当有数据变更时，都会将最小或最大的数据放在堆最上面的节点上，该队列也是使用了ReentrantLock、Condition实现的线程安全；<\/li>\n<li><strong>DelayQueue：<\/strong>一个支持延时获取元素的无界阻塞队列，基于PriorityBlockingQueue扩展实现，与其不同的是实现了Delay延时接口；<\/li>\n<li><strong>SynchronousQueue：<\/strong>一个不存储多个元素的阻塞队列，每次进行放入数据时, 必须等待相应的消费者取走数据后，才可以再次放入数据，该队列使用了两种模式来管理元素，一种是使用先进先出的队列，一种是使用后进先出的栈，使用哪种模式可以通过构造函数来指定。<\/li>\n<\/ul><p>Java线程池Executors还实现了以下四种类型的ThreadPoolExecutor，分别对应以上队列，详情如下：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/59\/da\/59e1d01c8a60fe722aae01db86a913da.jpg?wh=958*332\" alt=\"\"><\/p><h3>2.非阻塞队列<\/h3><p>我们常用的线程安全的非阻塞队列是ConcurrentLinkedQueue，它是一种无界线程安全队列(FIFO)，基于链表结构实现，利用CAS乐观锁来保证线程安全。<\/p><p>下面我们通过源码来分析下该队列的构造、入列以及出列的具体实现。<\/p><p><strong>构造函数：<\/strong>ConcurrentLinkedQueue由head 、tail节点组成，每个节点（Node）由节点元素（item）和指向下一个节点的引用 (next) 组成，节点与节点之间通过 next 关联，从而组成一张链表结构的队列。在队列初始化时， head  节点存储的元素为空，tail 节点等于 head 节点。<\/p><pre><code>public ConcurrentLinkedQueue() {\n   head = tail = new Node&lt;E&gt;(null);\n}\n\nprivate static class Node&lt;E&gt; {\n        volatile E item;\n        volatile Node&lt;E&gt; next;\n            .\n            .\n}\n<\/code><\/pre><p><strong>入列：<\/strong>当一个线程入列一个数据时，会将该数据封装成一个Node节点，并先获取到队列的队尾节点，当确定此时队尾节点的next值为null之后，再通过CAS将新队尾节点的next值设为新节点。此时p != t，也就是设置next值成功，然后再通过CAS将队尾节点设置为当前节点即可。<\/p><pre><code>public boolean offer(E e) {\n        checkNotNull(e);\n        \/\/创建入队节点\n        final Node&lt;E&gt; newNode = new Node&lt;E&gt;(e);\n        \/\/t，p为尾节点，默认相等，采用失败即重试的方式，直到入队成功         \n        for (Node&lt;E&gt; t = tail, p = t;;) {\n            \/\/获取队尾节点的下一个节点\n            Node&lt;E&gt; q = p.next;\n            \/\/如果q为null，则代表p就是队尾节点\n            if (q == null) {\n                \/\/将入列节点设置为当前队尾节点的next节点\n                if (p.casNext(null, newNode)) {\n                    \/\/判断tail节点和p节点距离达到两个节点\n                    if (p != t) \/\/ hop two nodes at a time\n                        \/\/如果tail不是尾节点则将入队节点设置为tail。\n                        \/\/ 如果失败了，那么说明有其他线程已经把tail移动过 \n                        casTail(t, newNode);  \/\/ Failure is OK.\n                    return true;\n                }\n            }\n            \/\/ 如果p节点等于p的next节点，则说明p节点和q节点都为空，表示队列刚初始化，所以返回  \n            else if (p == q)\n                p = (t != (t = tail)) ? t : head;\n            else\n                \/\/ Check for tail updates after two hops.\n                p = (p != t &amp;&amp; t != (t = tail)) ? t : q;\n        }\n    }\n<\/code><\/pre><p><strong>出列：<\/strong>首先获取head节点，并判断item是否为null，如果为空，则表示已经有一个线程刚刚进行了出列操作，然后更新head节点；如果不为空，则使用CAS操作将head节点设置为null，CAS就会成功地直接返回节点元素，否则还是更新head节点。<\/p><pre><code>    public E poll() {\n        \/\/ 设置起始点\n        restartFromHead:\n        for (;;) {\n            \/\/p获取head节点\n            for (Node&lt;E&gt; h = head, p = h, q;;) {\n                \/\/获取头节点元素\n                E item = p.item;\n                \/\/如果头节点元素不为null，通过cas设置p节点引用的元素为null\n                if (item != null &amp;&amp; p.casItem(item, null)) {\n                    \/\/ Successful CAS is the linearization point\n                    \/\/ for item to be removed from this queue.\n                    if (p != h) \/\/ hop two nodes at a time\n                        updateHead(h, ((q = p.next) != null) ? q : p);\n                    return item;\n                }\n                \/\/如果p节点的下一个节点为null，则说明这个队列为空，更新head结点\n                else if ((q = p.next) == null) {\n                    updateHead(h, p);\n                    return null;\n                }\n                \/\/节点出队失败，重新跳到restartFromHead来进行出队\n                else if (p == q)\n                    continue restartFromHead;\n                else\n                    p = q;\n            }\n        }\n    }\n<\/code><\/pre><p>ConcurrentLinkedQueue是基于CAS乐观锁实现的，在并发时的性能要好于其它阻塞队列，因此<span class=\"orange\">很适合作为高并发场景下的排队队列。<\/span><\/p><p>今天的答疑就到这里，如果你还有其它问题，请在留言区中提出，我会一一解答。最后欢迎你点击“请朋友读”，把今天的内容分享给身边的朋友，邀请他加入讨论。<\/p><p><\/p>","footer_cover_data":{"img_url":"","mp_url":"","link_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{},"product_id":100028001,"like_count":77,"had_liked":false,"article_subtitle":"无","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/1a\/a9\/1a5716c9c47742935200869724cee5a9.mp3","id":105234,"had_viewed":false,"article_title":"20 | 答疑课堂：模块三热点问题解答","column_bgcolor":"#F6F7FB","share":{"content":"覆盖80%以上Java应用调优场景","title":"刘超 · Java性能调优实战","poster":"https:\/\/static001.geekbang.org\/resource\/image\/ed\/99\/edfa939ff065cb8368ed4227930df399.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/b2\/01\/b2f97b2cbefe40e19af4d28508387e01.jpg"},"is_video_preview":false,"article_summary":"今天这讲是解答模块三比较集中的一些问题，有关监测上下文切换异常的命令排查工具以及blockingQueue。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/0a\/3c\/0abcb7a0b6dd63e73166d3a9b4e0983c.jpeg","column_sale_type":2,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/b2\/01\/b2f97b2cbefe40e19af4d28508387e01.jpg","column_id":185,"audio_time_arr":{"m":"07","s":"11","h":"00"},"video_time":"","audio_title":"Java性能-答疑课堂2","audio_md5":"1a5716c9c47742935200869724cee5a9","video_size":0,"text_read_percent":0,"comment_count":13,"cid":185,"article_sharetitle":"Java多线程性能调优之热点问题答疑","column_is_onboard":true,"article_cshort":"<p>你好，我是刘超。<\/p><p>不知不觉“多线程性能优化“已经讲完了，今天这讲我来解答下各位同学在这个模块集中提出的两大问题，<span class=\"orange\">第一个是有关监测上下文切换异常的命令排查工具，第二个是有关blockingQueue的内容。<\/span><\/p><p>也欢迎你积极留言给我，让我知晓你想了解的内容，或者说出你的困惑，我们共同探讨。下面我就直接切入今天的主题了。<\/p><h2>使用系统命令查看上下文切换<\/h2><p>在第15讲中我提到了上下文切换，其中有用到一些工具进行监测，由于篇幅关系就没有详细介绍，今天我就补充总结几个常用的工具给你。<\/p><h3>1. Linux命令行工具之vmstat命令<\/h3><p>vmstat是一款指定采样周期和次数的功能性监测工具，我们可以<span class=\"orange\">使用它监控进程上下文切换的情况。<\/span><\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/13\/71\/13eeee053c553863b3bdd95c07cb3b71.jpg?wh=1362*166\" alt=\"\"><\/p><p>vmstat 1 3  命令行代表每秒收集一次性能指标，总共获取3次。以下为上图中各个性能指标的注释：<\/p><ul>\n<li><strong>procs<\/strong><br>\nr：等待运行的进程数<br>\nb：处于非中断睡眠状态的进程数<\/li>\n<li><strong>memory<\/strong><br>\nswpd：虚拟内存使用情况<br>\nfree：空闲的内存<br>\nbuff：用来作为缓冲的内存数<br>\ncache：缓存大小<\/li>\n<li><strong>swap<\/strong><br>\nsi：从磁盘交换到内存的交换页数量<br>\nso：从内存交换到磁盘的交换页数量<\/li>\n<li><strong>io<\/strong><br>\nbi：发送到块设备的块数<br>\nbo：从块设备接收到的块数<\/li>\n<li><strong>system<\/strong><br>\nin：每秒中断数<br>\ncs：每秒上下文切换次数<\/li>\n<li><strong>cpu<\/strong><br>\nus：用户CPU使用时间<br>\nsy：内核CPU系统使用时间<br>\nid：空闲时间<br>\nwa：等待I\/O时间<br>\nst：运行虚拟机窃取的时间<\/li>\n<\/ul>","video_width":0,"column_could_sub":true,"article_ctime":1562169600,"score":"41562169600","video_media_map":{},"video_preview":{},"video":0,"video_time_arr":{"m":"","s":"","h":""},"video_total_seconds":0},"extra":{},"error":{}}