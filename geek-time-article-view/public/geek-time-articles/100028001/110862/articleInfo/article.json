{"code":0,"data":{"video_id":"","sku":"100028001","video_cover":"","author_name":"刘超","text_read_version":0,"audio_size":6132715,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/e2\/32\/e2093283463c8b42914e0180db2ff532.jpg","subtitles":{},"product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/a5\/3f\/a577e2871067b9b8d5ec54fbf241483f\/ld\/ld.m3u8","chapter_id":"0","column_had_sub":true,"audio_dubber":"李良","is_finished":false,"inline_video_subtitles":{},"like":{"had_done":false,"count":37},"neighbors":{"left":{"id":109980,"article_title":"28 | 原型模式与享元模式：提升系统性能的利器"},"right":{"id":111288,"article_title":"30 | 生产者消费者模式：电商库存设计优化"}},"audio_time":"00:06:24","video_height":0,"rate_percent":0,"article_content":"<p>你好，我是刘超。<\/p><p>在我们使用多线程编程时，很多时候需要根据业务场景设计一套业务功能。其实，在多线程编程中，本身就存在很多成熟的功能设计模式，学好它们，用好它们，那就是如虎添翼了。今天我就带你了解几种并发编程中常用的设计模式。<\/p><h2>线程上下文设计模式<\/h2><p>线程上下文是指贯穿线程整个生命周期的对象中的一些全局信息。例如，我们比较熟悉的Spring中的ApplicationContext就是一个关于上下文的类，它在整个系统的生命周期中保存了配置信息、用户信息以及注册的bean等上下文信息。<\/p><p>这样的解释可能有点抽象，我们不妨通过一个具体的案例，来看看到底在什么的场景下才需要上下文呢？<\/p><p>在执行一个比较长的请求任务时，这个请求可能会经历很多层的方法调用，假设我们需要将最开始的方法的中间结果传递到末尾的方法中进行计算，一个简单的实现方式就是在每个函数中新增这个中间结果的参数，依次传递下去。代码如下：<\/p><pre><code>public class ContextTest {\n\n\t\/\/ 上下文类\n\tpublic class Context {\n\t\tprivate String name;\n\t\tprivate long id\n\n\t\tpublic long getId() {\n\t\t\treturn id;\n\t\t}\n\n\t\tpublic void setId(long id) {\n\t\t\tthis.id = id;\n\t\t}\n\n\t\tpublic String getName() {\n\t\t\treturn this.name;\n\t\t}\n\n\t\tpublic void setName(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\t}\n\n\t\/\/ 设置上下文名字\n\tpublic class QueryNameAction {\n\t\tpublic void execute(Context context) {\n\t\t\ttry {\n\t\t\t\tThread.sleep(1000L);\n\t\t\t\tString name = Thread.currentThread().getName();\n\t\t\t\tcontext.setName(name);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n\t\/\/ 设置上下文ID\n\tpublic class QueryIdAction {\n\t\tpublic void execute(Context context) {\n\t\t\ttry {\n\t\t\t\tThread.sleep(1000L);\n\t\t\t\tlong id = Thread.currentThread().getId();\n\t\t\t\tcontext.setId(id);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n\t\/\/ 执行方法\n\tpublic class ExecutionTask implements Runnable {\n\n\t\tprivate QueryNameAction queryNameAction = new QueryNameAction();\n\t\tprivate QueryIdAction queryIdAction = new QueryIdAction();\n\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tfinal Context context = new Context();\n\t\t\tqueryNameAction.execute(context);\n\t\t\tSystem.out.println(&quot;The name query successful&quot;);\n\t\t\tqueryIdAction.execute(context);\n\t\t\tSystem.out.println(&quot;The id query successful&quot;);\n\n\t\t\tSystem.out.println(&quot;The Name is &quot; + context.getName() + &quot; and id &quot; + context.getId());\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tIntStream.range(1, 5).forEach(i -&gt; new Thread(new ContextTest().new ExecutionTask()).start());\n\t}\n}\n<\/code><\/pre><p>执行结果：<\/p><pre><code>The name query successful\nThe name query successful\nThe name query successful\nThe name query successful\nThe id query successful\nThe id query successful\nThe id query successful\nThe id query successful\nThe Name is Thread-1 and id 11\nThe Name is Thread-2 and id 12\nThe Name is Thread-3 and id 13\nThe Name is Thread-0 and id 10\n<\/code><\/pre><p>然而这种方式太笨拙了，每次调用方法时，都需要传入Context作为参数，而且影响一些中间公共方法的封装。<\/p><p>那能不能设置一个全局变量呢？如果是在多线程情况下，需要考虑线程安全，这样的话就又涉及到了锁竞争。<\/p><!-- [[[read_end]]] --><p>除了以上这些方法，其实我们还可以使用ThreadLocal实现上下文。ThreadLocal是线程本地变量，可以实现多线程的数据隔离。<span class=\"orange\">ThreadLocal为每一个使用该变量的线程都提供一份独立的副本，线程间的数据是隔离的，每一个线程只能访问各自内部的副本变量。<\/span><\/p><p>ThreadLocal中有三个常用的方法：set、get、initialValue，我们可以通过以下一个简单的例子来看看ThreadLocal的使用：<\/p><pre><code>private void testThreadLocal() {\n    Thread t = new Thread() {\n        ThreadLocal&lt;String&gt; mStringThreadLocal = new ThreadLocal&lt;String&gt;();\n\n        @Override\n        public void run() {\n            super.run();\n            mStringThreadLocal.set(&quot;test&quot;);\n            mStringThreadLocal.get();\n        }\n    };\n\n    t.start();\n}\n<\/code><\/pre><p>接下来，我们使用ThreadLocal来重新实现最开始的上下文设计。你会发现，我们在两个方法中并没有通过变量来传递上下文，只是通过ThreadLocal获取了当前线程的上下文信息：<\/p><pre><code>public class ContextTest {\n\t\/\/ 上下文类\n\tpublic static class Context {\n\t\tprivate String name;\n\t\tprivate long id;\n\n\t\tpublic long getId() {\n\t\t\treturn id;\n\t\t}\n\n\t\tpublic void setId(long id) {\n\t\t\tthis.id = id;\n\t\t}\n\n\t\tpublic String getName() {\n\t\t\treturn this.name;\n\t\t}\n\n\t\tpublic void setName(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\t}\n\n\t\/\/ 复制上下文到ThreadLocal中\n\tpublic final static class ActionContext {\n\n\t\tprivate static final ThreadLocal&lt;Context&gt; threadLocal = new ThreadLocal&lt;Context&gt;() {\n\t\t\t@Override\n\t\t\tprotected Context initialValue() {\n\t\t\t\treturn new Context();\n\t\t\t}\n\t\t};\n\n\t\tpublic static ActionContext getActionContext() {\n\t\t\treturn ContextHolder.actionContext;\n\t\t}\n\n\t\tpublic Context getContext() {\n\t\t\treturn threadLocal.get();\n\t\t}\n\n\t\t\/\/ 获取ActionContext单例\n\t\tpublic static class ContextHolder {\n\t\t\tprivate final static ActionContext actionContext = new ActionContext();\n\t\t}\n\t}\n\n\t\/\/ 设置上下文名字\n\tpublic class QueryNameAction {\n\t\tpublic void execute() {\n\t\t\ttry {\n\t\t\t\tThread.sleep(1000L);\n\t\t\t\tString name = Thread.currentThread().getName();\n\t\t\t\tActionContext.getActionContext().getContext().setName(name);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n\t\/\/ 设置上下文ID\n\tpublic class QueryIdAction {\n\t\tpublic void execute() {\n\t\t\ttry {\n\t\t\t\tThread.sleep(1000L);\n\t\t\t\tlong id = Thread.currentThread().getId();\n\t\t\t\tActionContext.getActionContext().getContext().setId(id);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n\t\/\/ 执行方法\n\tpublic class ExecutionTask implements Runnable {\n\t\tprivate QueryNameAction queryNameAction = new QueryNameAction();\n\t\tprivate QueryIdAction queryIdAction = new QueryIdAction();\n\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tqueryNameAction.execute();\/\/设置线程名\n\t\t\tSystem.out.println(&quot;The name query successful&quot;);\n\t\t\tqueryIdAction.execute();\/\/设置线程ID\n\t\t\tSystem.out.println(&quot;The id query successful&quot;);\n\n\t\t\tSystem.out.println(&quot;The Name is &quot; + ActionContext.getActionContext().getContext().getName() + &quot; and id &quot; + ActionContext.getActionContext().getContext().getId())\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tIntStream.range(1, 5).forEach(i -&gt; new Thread(new ContextTest().new ExecutionTask()).start());\n\t}\n}\n<\/code><\/pre><p>运行结果：<\/p><pre><code>The name query successful\nThe name query successful\nThe name query successful\nThe name query successful\nThe id query successful\nThe id query successful\nThe id query successful\nThe id query successful\nThe Name is Thread-2 and id 12\nThe Name is Thread-0 and id 10\nThe Name is Thread-1 and id 11\nThe Name is Thread-3 and id 13\n<\/code><\/pre><h2>Thread-Per-Message设计模式<\/h2><p>Thread-Per-Message设计模式翻译过来的意思就是每个消息一个线程的意思。例如，我们在处理Socket通信的时候，通常是一个线程处理事件监听以及I\/O读写，如果I\/O读写操作非常耗时，这个时候便会影响到事件监听处理事件。<\/p><p>这个时候Thread-Per-Message模式就可以很好地解决这个问题，一个线程监听I\/O事件，每当监听到一个I\/O事件，则交给另一个处理线程执行I\/O操作。下面，我们还是通过一个例子来学习下该设计模式的实现。<\/p><pre><code>\/\/IO处理\npublic class ServerHandler implements Runnable{\n\tprivate Socket socket;\n\t \n    public ServerHandler(Socket socket) {\n        this.socket = socket;\n    }\n    \n    public void run() {\n        BufferedReader in = null;\n        PrintWriter out = null;\n        String msg = null;\n        try {\n            in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n            out = new PrintWriter(socket.getOutputStream(),true);\n            while ((msg = in.readLine()) != null &amp;&amp; msg.length()!=0) {\/\/当连接成功后在此等待接收消息（挂起，进入阻塞状态）\n                System.out.println(&quot;server received : &quot; + msg);\n                out.print(&quot;received~\\n&quot;);\n                out.flush();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n        \ttry {\n                in.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            try {\n                out.close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n            try {\n                socket.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n<\/code><\/pre><pre><code>\/\/Socket启动服务\npublic class Server {\n\t\n\tprivate static int DEFAULT_PORT = 12345;\n\tprivate static ServerSocket server;\n\n\tpublic static void start() throws IOException {\n\t\tstart(DEFAULT_PORT);\n\t}\n\n\tpublic static void start(int port) throws IOException {\n\t\tif (server != null) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\ttry {\n\t\t\t\/\/启动服务\n\t\t\tserver = new ServerSocket(port);\n\t\t\t\/\/ 通过无线循环监听客户端连接\n\t\t\twhile (true) {\n\t\t\t\t\n\t\t\t\tSocket socket = server.accept();\n\t\t\t\t\/\/ 当有新的客户端接入时，会执行下面的代码\n\t\t\t\tlong start = System.currentTimeMillis();\n\t\t\t\tnew Thread(new ServerHandler(socket)).start();\n\t\t\t\t\n\t\t\t\tlong end = System.currentTimeMillis();\n\n\t\t\t\tSystem.out.println(&quot;Spend time is &quot; + (end - start));\n\t\t\t}\n\t\t} finally {\n\t\t\tif (server != null) {\n\t\t\t\tSystem.out.println(&quot;服务器已关闭。&quot;);\n\t\t\t\tserver.close();\n\t\t\t}\n\n\t\t}\n\n\t}\n\t\n\tpublic static void main(String[] args) throws InterruptedException{\n\n\t\t\/\/ 运行服务端\n\t\tnew Thread(new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tServer.start();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}).start();\n\n\t}\n}\n<\/code><\/pre><p>以上，我们是完成了一个使用Thread-Per-Message设计模式实现的Socket服务端的代码。但这里是有一个问题的，你发现了吗？<\/p><p>使用这种设计模式，如果遇到大的高并发，就会出现严重的性能问题。如果针对每个I\/O请求都创建一个线程来处理，在有大量请求同时进来时，就会创建大量线程，而此时JVM有可能会因为无法处理这么多线程，而出现内存溢出的问题。<\/p><p>退一步讲，即使是不会有大量线程的场景，每次请求过来也都需要创建和销毁线程，这对系统来说，也是一笔不小的性能开销。<\/p><p>面对这种情况，<span class=\"orange\">我们可以使用线程池来代替线程的创建和销毁，<\/span>这样就可以避免创建大量线程而带来的性能问题，是一种很好的调优方法。<\/p><h2>Worker-Thread设计模式<\/h2><p>这里的Worker是工人的意思，代表在Worker Thread设计模式中，会有一些工人（线程）不断轮流处理过来的工作，当没有工作时，工人则会处于等待状态，直到有新的工作进来。除了工人角色，Worker Thread设计模式中还包括了流水线和产品。<\/p><p>这种设计模式相比Thread-Per-Message设计模式，可以减少频繁创建、销毁线程所带来的性能开销，还有无限制地创建线程所带来的内存溢出风险。<\/p><p>我们可以假设一个场景来看下该模式的实现，通过Worker Thread设计模式来完成一个物流分拣的作业。<\/p><p>假设一个物流仓库的物流分拣流水线上有8个机器人，它们不断从流水线上获取包裹并对其进行包装，送其上车。当仓库中的商品被打包好后，会投放到物流分拣流水线上，而不是直接交给机器人，机器人会再从流水线中随机分拣包裹。代码如下：<\/p><pre><code>\/\/包裹类\npublic class Package {\n\tprivate String name;\n\tprivate String address;\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic String getAddress() {\n\t\treturn address;\n\t}\n\n\tpublic void setAddress(String address) {\n\t\tthis.address = address;\n\t}\n\n\tpublic void execute() {\n\t\tSystem.out.println(Thread.currentThread().getName()+&quot; executed &quot;+this);\n\t}\n}\n<\/code><\/pre><pre><code>\/\/流水线\npublic class PackageChannel {\n\tprivate final static int MAX_PACKAGE_NUM = 100;\n\n\tprivate final Package[] packageQueue;\n\tprivate final Worker[] workerPool;\n\tprivate int head;\n\tprivate int tail;\n\tprivate int count;\n\n\tpublic PackageChannel(int workers) {\n\t\tthis.packageQueue = new Package[MAX_PACKAGE_NUM];\n\t\tthis.head = 0;\n\t\tthis.tail = 0;\n\t\tthis.count = 0;\n\t\tthis.workerPool = new Worker[workers];\n\t\tthis.init();\n\t}\n\n\tprivate void init() {\n\t\tfor (int i = 0; i &lt; workerPool.length; i++) {\n\t\t\tworkerPool[i] = new Worker(&quot;Worker-&quot; + i, this);\n\t\t}\n\t}\n\n\t\/**\n\t * push switch to start all of worker to work\n\t *\/\n\tpublic void startWorker() {\n\t\tArrays.asList(workerPool).forEach(Worker::start);\n\t}\n\n\tpublic synchronized void put(Package packagereq) {\n\t\twhile (count &gt;= packageQueue.length) {\n\t\t\ttry {\n\t\t\t\tthis.wait();\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tthis.packageQueue[tail] = packagereq;\n\t\tthis.tail = (tail + 1) % packageQueue.length;\n\t\tthis.count++;\n\t\tthis.notifyAll();\n\t}\n\n\tpublic synchronized Package take() {\n\t\twhile (count &lt;= 0) {\n\t\t\ttry {\n\t\t\t\tthis.wait();\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tPackage request = this.packageQueue[head];\n\t\tthis.head = (this.head + 1) % this.packageQueue.length;\n\t\tthis.count--;\n\t\tthis.notifyAll();\n\t\treturn request;\n\t}\n\n}\n<\/code><\/pre><pre><code>\/\/机器人\npublic class Worker extends Thread{\n\t private static final Random random = new Random(System.currentTimeMillis());\n\t private final PackageChannel channel;\n\n\t    public Worker(String name, PackageChannel channel) {\n\t        super(name);\n\t        this.channel = channel;\n\t    }\n\n\t    @Override\n\t    public void run() {\n\t        while (true) {\n\t            channel.take().execute();\n\n\t            try {\n\t                Thread.sleep(random.nextInt(1000));\n\t            } catch (InterruptedException e) {\n\t                e.printStackTrace();\n\t            }\n\t        }\n\t    }\n\n}\n<\/code><\/pre><pre><code>public class Test {\n\t   public static void main(String[] args) {\n            \/\/新建8个工人\n\t        final PackageChannel channel = new PackageChannel(8);\n            \/\/开始工作\n\t        channel.startWorker();\n            \/\/为流水线添加包裹\n\t        for(int i=0; i&lt;100; i++) {\n\t        \t Package packagereq = new Package();\n\t \t        packagereq.setAddress(&quot;test&quot;);\n\t \t        packagereq.setName(&quot;test&quot;);\n\t \t        channel.put(packagereq);\n\t        }\n\t    }\n}\n<\/code><\/pre><p>我们可以看到，这里有8个工人在不断地分拣仓库中已经包装好的商品。<\/p><h2>总结<\/h2><p>平时，如果需要传递或隔离一些线程变量时，我们可以考虑使用上下文设计模式。在数据库读写分离的业务场景中，则经常会用到ThreadLocal实现动态切换数据源操作。但在使用ThreadLocal时，我们需要注意内存泄漏问题，在之前的<a href=\"https:\/\/time.geekbang.org\/column\/article\/109201\">第25讲<\/a>中，我们已经讨论过这个问题了。<\/p><p>当主线程处理每次请求都非常耗时时，就可能出现阻塞问题，这时候我们可以考虑将主线程业务分工到新的业务线程中，从而提高系统的并行处理能力。而 Thread-Per-Message  设计模式以及  Worker-Thread  设计模式则都是通过多线程分工来提高系统并行处理能力的设计模式。<\/p><h2>思考题<\/h2><p>除了以上这些多线程的设计模式，平时你还使用过其它的设计模式来优化多线程业务吗？<\/p><p>期待在留言区看到你的答案。也欢迎你点击“请朋友读”，把今天的内容分享给身边的朋友，邀请他一起讨论。<\/p><p><\/p>","footer_cover_data":{"img_url":"","mp_url":"","link_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{},"product_id":100028001,"like_count":48,"had_liked":false,"article_subtitle":"无","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/a5\/3f\/a577e2871067b9b8d5ec54fbf241483f.mp3","id":110862,"had_viewed":false,"article_title":"29 | 如何使用设计模式优化并发编程？","column_bgcolor":"#F6F7FB","share":{"content":"覆盖80%以上Java应用调优场景","title":"刘超 · Java性能调优实战","poster":"https:\/\/static001.geekbang.org\/resource\/image\/ed\/99\/edfa939ff065cb8368ed4227930df399.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/b2\/01\/b2f97b2cbefe40e19af4d28508387e01.jpg"},"is_video_preview":false,"article_summary":"这讲介绍几种并发编程中常用的设计模式，用好它们，如虎添翼。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/f2\/81\/f2820fafce971c4a605f87d2b3cb6b81.jpeg","column_sale_type":2,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/b2\/01\/b2f97b2cbefe40e19af4d28508387e01.jpg","column_id":185,"audio_time_arr":{"m":"06","s":"24","h":"00"},"video_time":"","audio_title":"金山刘超-28","audio_md5":"a577e2871067b9b8d5ec54fbf241483f","video_size":0,"text_read_percent":0,"comment_count":23,"cid":185,"article_sharetitle":"如何使用设计模式优化并发编程？","column_is_onboard":true,"article_cshort":"<p>你好，我是刘超。<\/p><p>在我们使用多线程编程时，很多时候需要根据业务场景设计一套业务功能。其实，在多线程编程中，本身就存在很多成熟的功能设计模式，学好它们，用好它们，那就是如虎添翼了。今天我就带你了解几种并发编程中常用的设计模式。<\/p><h2>线程上下文设计模式<\/h2><p>线程上下文是指贯穿线程整个生命周期的对象中的一些全局信息。例如，我们比较熟悉的Spring中的ApplicationContext就是一个关于上下文的类，它在整个系统的生命周期中保存了配置信息、用户信息以及注册的bean等上下文信息。<\/p><p>这样的解释可能有点抽象，我们不妨通过一个具体的案例，来看看到底在什么的场景下才需要上下文呢？<\/p><p>在执行一个比较长的请求任务时，这个请求可能会经历很多层的方法调用，假设我们需要将最开始的方法的中间结果传递到末尾的方法中进行计算，一个简单的实现方式就是在每个函数中新增这个中间结果的参数，依次传递下去。代码如下：<\/p><pre><code>public class ContextTest {\n\n\t\/\/ 上下文类\n\tpublic class Context {\n\t\tprivate String name;\n\t\tprivate long id\n\n\t\tpublic long getId() {\n\t\t\treturn id;\n\t\t}\n\n\t\tpublic void setId(long id) {\n\t\t\tthis.id = id;\n\t\t}\n\n\t\tpublic String getName() {\n\t\t\treturn this.name;\n\t\t}\n\n\t\tpublic void setName(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\t}\n\n\t\/\/ 设置上下文名字\n\tpublic class QueryNameAction {\n\t\tpublic void execute(Context context) {\n\t\t\ttry {\n\t\t\t\tThread.sleep(1000L);\n\t\t\t\tString name = Thread.currentThread().getName();\n\t\t\t\tcontext.setName(name);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n\t\/\/ 设置上下文ID\n\tpublic class QueryIdAction {\n\t\tpublic void execute(Context context) {\n\t\t\ttry {\n\t\t\t\tThread.sleep(1000L);\n\t\t\t\tlong id = Thread.currentThread().getId();\n\t\t\t\tcontext.setId(id);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n\t\/\/ 执行方法\n\tpublic class ExecutionTask implements Runnable {\n\n\t\tprivate QueryNameAction queryNameAction = new QueryNameAction();\n\t\tprivate QueryIdAction queryIdAction = new QueryIdAction();\n\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tfinal Context context = new Context();\n\t\t\tqueryNameAction.execute(context);\n\t\t\tSystem.out.println(&quot;The name query successful&quot;);\n\t\t\tqueryIdAction.execute(context);\n\t\t\tSystem.out.println(&quot;The id query successful&quot;);\n\n\t\t\tSystem.out.println(&quot;The Name is &quot; + context.getName() + &quot; and id &quot; + context.getId());\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tIntStream.range(1, 5).forEach(i -&gt; new Thread(new ContextTest().new ExecutionTask()).start());\n\t}\n}\n<\/code><\/pre><p>执行结果：<\/p><pre><code>The name query successful\nThe name query successful\nThe name query successful\nThe name query successful\nThe id query successful\nThe id query successful\nThe id query successful\nThe id query successful\nThe Name is Thread-1 and id 11\nThe Name is Thread-2 and id 12\nThe Name is Thread-3 and id 13\nThe Name is Thread-0 and id 10\n<\/code><\/pre><p>然而这种方式太笨拙了，每次调用方法时，都需要传入Context作为参数，而且影响一些中间公共方法的封装。<\/p><p>那能不能设置一个全局变量呢？如果是在多线程情况下，需要考虑线程安全，这样的话就又涉及到了锁竞争。<\/p>","video_width":0,"column_could_sub":true,"article_ctime":1564156800,"score":"61564156800","video_media_map":{},"video_preview":{},"video":0,"video_time_arr":{"m":"","s":"","h":""},"video_total_seconds":0},"extra":{},"error":{}}