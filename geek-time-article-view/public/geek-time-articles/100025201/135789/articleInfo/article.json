{"code":0,"data":{"video_id":"","sku":"100025201","video_cover":"","author_name":"许式伟","text_read_version":0,"audio_size":11047883,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/0c\/7a\/0cee3c663ac596f7bbd7b1cc7b21fc7a.jpg","subtitles":{},"product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/media\/audio\/9c\/82\/9c1e7d3ef1yy6057f5d14c343a74b182\/ld\/ld.m3u8","chapter_id":"0","column_had_sub":true,"audio_dubber":"丁伟","is_finished":false,"inline_video_subtitles":{},"like":{"had_done":false,"count":20},"neighbors":{"left":{"id":134384,"article_title":"40 | 服务端的业务架构建议"},"right":{"id":136884,"article_title":"42 | 实战（二）：“画图”程序后端实战"}},"audio_time":"00:11:30","video_height":0,"rate_percent":0,"article_content":"<p>你好，我是七牛云许式伟。<\/p><p>到今天为止，服务端开发的基本内容已经讲完了。我们花了比较长的篇幅来介绍服务端的基础软件，包括负载均衡和各类存储中间件。然后我们上一讲介绍了服务端在业务架构上的一些通用问题。<\/p><p>今天我们开始进入实战。<\/p><p>对比服务端和桌面的内容可以看出，服务端开发和桌面端开发各自有各自的复杂性。服务端开发，难在基础软件很多，对程序员和架构师的知识面和理解深度都有较高的要求。但从业务复杂性来说，服务端的业务逻辑相对简单。而桌面端开发则相反，它的难点在于用户交互逻辑复杂，代码量大，业务架构的复杂性高。<\/p><p>上一章的实战篇，蛮多人反馈有点难，这某种程度来说和我们课程内容设计的规划有关。上一章我们从架构角度来说，偏重于介绍概要设计，也就是系统架构。所以我们对实现细节并没有做过多的剖析，而是把重心放在模块之间的接口耦合上。这是希望你把关注点放在全局，而不是一上来就进入局部细节。但是由于缺乏完整流程的剖析，大家没法把整个过程串起来，理解上就会打折扣。<\/p><p>这一章我们在架构上会偏重于详细设计。这在实战篇也会有所体现。<\/p><p>在上一章，我们实现了一个 mock 版本的服务端，代码如下：<\/p><ul>\n<li><a href=\"https:\/\/github.com\/qiniu\/qpaint\/tree\/v31\/paintdom\">https:\/\/github.com\/qiniu\/qpaint\/tree\/v31\/paintdom<\/a><\/li>\n<\/ul><!-- [[[read_end]]] --><p>接下来我们一步步把它变成一个产品级的服务端程序。<\/p><h2>RPC 框架<\/h2><p>第一步，我们引入 RPC 框架。<\/p><p>为了方便你理解，在上一章的实战中，我们的 mock 服务端程序没有引入任何非标准库的内容。代码如下：<\/p><ul>\n<li><a href=\"https:\/\/github.com\/qiniu\/qpaint\/blob\/v31\/paintdom\/service.go\">https:\/\/github.com\/qiniu\/qpaint\/blob\/v31\/paintdom\/service.go<\/a><\/li>\n<\/ul><p>整个 Service 大约 280 行代码。<\/p><p>我们改为基于七牛云开源的 <a href=\"https:\/\/github.com\/qiniu\/http\/tree\/v2.0.1\/restrpc\">restrpc<\/a> 框架来实现，代码如下：<\/p><ul>\n<li><a href=\"https:\/\/github.com\/qiniu\/qpaint\/blob\/v41\/paintdom\/service.go\">https:\/\/github.com\/qiniu\/qpaint\/blob\/v41\/paintdom\/service.go<\/a><\/li>\n<\/ul><p>这样，整个 Service 就大约只剩下 163 行代码，只有原先的 60% 不到。<\/p><p>到底少写了哪些代码？我们拿创建一个新图形来看下。原先我们这样写：<\/p><pre><code>func (p *Service) PostShapes(w http.ResponseWriter, req *http.Request, args []string) {\n\tid := args[0]\n\tdrawing, err := p.doc.Get(id)\n\tif err != nil {\n\t\tReplyError(w, err)\n\t\treturn\n\t}\n\n\tvar aShape serviceShape\n\terr = json.NewDecoder(req.Body).Decode(&amp;aShape)\n\tif err != nil {\n\t\tReplyError(w, err)\n\t\treturn\n\t}\n\n\terr = drawing.Add(aShape.Get())\n\tif err != nil {\n\t\tReplyError(w, err)\n\t\treturn\n\t}\n\tReplyCode(w, 200)\n}\n<\/code><\/pre><p>现在这样写：<\/p><pre><code>func (p *Service) PostShapes(aShape *serviceShape, env *restrpc.Env) (err error) {\n\tid := env.Args[0]\n\tdrawing, err := p.doc.Get(id)\n\tif err != nil {\n\t\treturn\n\t}\n\treturn drawing.Add(aShape.Get())\n}\n<\/code><\/pre><p>这个例子返回包比较简单，没有 HTTP 包的正文。<\/p><p>我们再来看一个返回包比较复杂的例子，取图形的内容。原先我们这样写：<\/p><pre><code>func (p *Service) GetShape(w http.ResponseWriter, req *http.Request, args []string) {\n\tid := args[0]\n\tdrawing, err := p.doc.Get(id)\n\tif err != nil {\n\t\tReplyError(w, err)\n\t\treturn\n\t}\n\n\tshapeID := args[1]\n\tshape, err := drawing.Get(shapeID)\n\tif err != nil {\n\t\tReplyError(w, err)\n\t\treturn\n\t}\n\tReply(w, 200, shape)\n}\n<\/code><\/pre><p>现在这样写：<\/p><pre><code>func (p *Service) GetShape(env *restrpc.Env) (shape Shape, err error) {\n\tid := env.Args[0]\n\tdrawing, err := p.doc.Get(id)\n\tif err != nil {\n\t\treturn\n\t}\n\n\tshapeID := env.Args[1]\n\treturn drawing.Get(shapeID)\n}\n<\/code><\/pre><p>对比这两个例子，我们可以看出：<\/p><ul>\n<li>原先这两个请求 <code>POST \/drawings\/&lt;DrawingID&gt;\/shapes<\/code>、<code>GET \/drawings\/&lt;DrawingID&gt;\/shapes\/&lt;ShapeID&gt;<\/code> 中的 URL 参数如 DrawingID、ShapeID 的值，是通过参数 args[0]、args[1] 传入，现在通过 env.Args[0]、env.Args[1] 传入。<\/li>\n<li>原先我们 PostShapes 需要自己定义 Shape 实例并解析 HTTP 请求包 req.Body 的内容。现在我们只需要在参数中指定 Shape 类型，restrpc 框架就自动完成参数的解析。<\/li>\n<li>原先我们 GetShape 需要自己回复错误或者返回正常的 HTTP 协议包。现在我们只需要在返回值列表中返回要回复的数据，restrpc 框架自动完成返回值的序列化并回复 HTTP 请求。<\/li>\n<\/ul><p>通过对比两个版本的代码差异，我们大体能够猜得出来，restrpc 的 HTTP 处理函数背后都干了些啥。其核心代码如下：<\/p><ul>\n<li><a href=\"https:\/\/github.com\/qiniu\/http\/blob\/v2.0.2\/rpcutil\/rpc_util.go#L96\">https:\/\/github.com\/qiniu\/http\/blob\/v2.0.2\/rpcutil\/rpc_util.go#L96<\/a><\/li>\n<\/ul><p>值得关注的是 Env 的支持，RPC 框架并没有限定 Env 类具体是什么样子的，只是规定它需要满足以下接口：<\/p><pre><code>type itfEnv interface {\n\tOpenEnv(rcvr interface{}, w *http.ResponseWriter, req *http.Request) error\n\tCloseEnv()\n}\n<\/code><\/pre><p>在 OpenEnv 方法中，我们一般进行 Env 的初始化工作。CloseEnv 方法则反之。为什么 OpenEnv 方法中，ResponseWriter 接口是以指针方式传入？因为可能会有客户希望改写 ResponseWriter 的实现。<\/p><p>比如，假设我们要给 RPC 框架扩展 API 审计日志的功能。那么我们就需要接管并记录用户返回的 HTTP 包，这时我们就需要改写 ResponseWriter 以达到接管并记录的目的。<\/p><p>另外值得注意的是，restrpc 版本的 HTTP 请求的处理函数，看起来不再那么像 HTTP 处理函数，倒像一个普通函数。<\/p><p>这意味着我们可以有两种方式来测试 Service 类。除了用正常测试 HTTP Service 的方法来测试它以外，我们也可以把 Service 类当成普通类来测试，这大大降低单元测试的成本。因为我们不用再需要包装服务的 Client SDK，然后再基于 Client SDK 做单元测试。<\/p><p>当然，我们有这样的一种低成本测试方式，但还是会担心这种测试方法可能不能覆盖一些编码上的小意外，毕竟我们没有走 HTTP 协议，心里多多少少有些不踏实。<\/p><p>理解了 restrpc 的 HTTP 处理函数，剩下的就是 restrpc 的路由功能。它是由 restrpc.Router 类的 Register 函数完成的。代码如下：<\/p><ul>\n<li><a href=\"https:\/\/github.com\/qiniu\/http\/blob\/v2.0.1\/restrpc\/restroute.go#L39\">https:\/\/github.com\/qiniu\/http\/blob\/v2.0.1\/restrpc\/restroute.go#L39<\/a><\/li>\n<\/ul><p>它支持两种路由方式，一种是根据方法名字自动路由。比如 <code>POST \/drawings\/&lt;DrawingID&gt;\/shapes<\/code> 这样的请求，要求方法名为 “PostDrawings_Shapes”。<code>GET \/drawings\/&lt;DrawingID&gt;\/shapes\/&lt;ShapeID&gt;<\/code> 这样的请求，要求方法名为 “GetDrawings_Shapes_”。<\/p><p>规则倒是比较简单，路径中的 “\/” 由单词首字母大写来分隔，URL 参数如 DrawingID、ShapeID 这些则替换为 “_”。<\/p><p>当然有的人会认为这种方法名字看起来很丑。那么就可以选择手工路由的方式，传入 routeTable。它看起来是这样的：<\/p><pre><code>var routeTable = [][2]string{\n\t{&quot;POST \/drawings&quot;, &quot;PostDrawings&quot;},\n\t{&quot;GET \/drawings\/*&quot;, &quot;GetDrawing&quot;},\n\t{&quot;DELETE \/drawings\/*&quot;, &quot;DeleteDrawing&quot;},\n\t{&quot;POST \/drawings\/*\/sync&quot;, &quot;PostDrawingSync&quot;},\n\t{&quot;POST \/drawings\/*\/shapes&quot;, &quot;PostShapes&quot;},\n\t{&quot;GET \/drawings\/*\/shapes\/*&quot;, &quot;GetShape&quot;},\n\t{&quot;POST \/drawings\/*\/shapes\/*&quot;, &quot;PostShape&quot;},\n\t{&quot;DELETE \/drawings\/*\/shapes\/*&quot;, &quot;DeleteShape&quot;},\n}\n<\/code><\/pre><p>虽然是手工路由，但是方法名仍然有限制，要求必须是 Get、Put、Post、Delete 开头。<\/p><h2>业务逻辑的分层<\/h2><p>理解了 restrpc 框架，我们再看下 QPaint 服务端的业务本身。可以看出，我们的服务端业务逻辑被分为两层：一层是业务逻辑的实现层，通常我们有意识地把它组织为一颗 DOM 树。代码如下：<\/p><ul>\n<li><a href=\"https:\/\/github.com\/qiniu\/qpaint\/blob\/v41\/paintdom\/drawing.go\">https:\/\/github.com\/qiniu\/qpaint\/blob\/v41\/paintdom\/drawing.go<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/qiniu\/qpaint\/blob\/v41\/paintdom\/shape.go\">https:\/\/github.com\/qiniu\/qpaint\/blob\/v41\/paintdom\/shape.go<\/a><\/li>\n<\/ul><p>另一层则是 RESTful API 层，它负责接收用户的网络请求，并转为对底层 DOM 树的方法调用。有了上面我们介绍的 restrpc 框架，这一层的每个方法往往都比较简单，甚至有的只是很简单的一句函数调用。比如：<\/p><pre><code>func (p *Service) DeleteDrawing(env *restrpc.Env) (err error) {\n\tid := env.Args[0]\n\treturn p.doc.Delete(id)\n}\n<\/code><\/pre><p>完整的RESTful API 层代码如下：<\/p><ul>\n<li><a href=\"https:\/\/github.com\/qiniu\/qpaint\/blob\/v41\/paintdom\/service.go\">https:\/\/github.com\/qiniu\/qpaint\/blob\/v41\/paintdom\/service.go<\/a><\/li>\n<\/ul><p>这样分层的原因，是因为我们实现核心业务逻辑的时候，并不会假设一定通过 RESTful API 暴露。我们考虑这样几种可能性：<\/p><p>其一，有可能我们根本不需要网络调用。<\/p><p>做个类比，我们都知道 mysql 是通过 TCP 协议提供服务接口的，而 sqlite 是嵌入式数据库，是通过本地的函数调用提供服务接口的。这里分层就类似于我实现 mysql 的时候，先在底层实现了一个类似 sqlite 的嵌入式数据库，然后再提供基于 TCP 协议的网络接口。<\/p><p>其二，有可能我们需要支持很多种网络协议。<\/p><p>我们今天流行 RESTful API，所以我们的接口是 RESTful 风格的。如果有一天我们像 Github 一样想改用 GraphQL，那么至少底层的业务逻辑实现层是不需要改变的，我们只需要实现相对薄的 GraphQL 层就行了。<\/p><p>而且，往往在这种情况下 RESTful API 和 GraphQL 是需要同时支持的。毕竟我们不可能为了赶时髦，就把老用户弃之不顾了。<\/p><p>在需要同时支持多套网络接口的时候，这种分层的价值就体现出来了，不同网络接口的模块之间，共享了同一份 DOM 树的实例，整个体系不仅实现了多协议并存，还实现了完美的解耦，彼此之间完全独立。<\/p><h2>单元测试<\/h2><p>聊完了业务，我们再来看看单元测试。<\/p><p>之前，我们单元测试基本上没怎么做：<\/p><ul>\n<li><a href=\"https:\/\/github.com\/qiniu\/qpaint\/blob\/v31\/paintdom\/service_test.go#L62\">https:\/\/github.com\/qiniu\/qpaint\/blob\/v31\/paintdom\/service_test.go#L62<\/a><\/li>\n<\/ul><p>代码如下：<\/p><pre><code>type idRet struct {\n\tID string `json:&quot;id&quot;`\n}\n\nfunc TestNewDrawing(t *testing.T) {\n        ...\n\tvar ret idRet\n\terr := Post(&amp;ret, ts.URL + &quot;\/drawings&quot;, &quot;&quot;)\n\tif err != nil {\n\t\tt.Fatal(&quot;Post \/drawings failed:&quot;, err)\n\t}\n\tif ret.ID != &quot;10001&quot; {\n\t\tt.Log(&quot;new drawing id:&quot;, ret.ID)\n\t}\n}\n<\/code><\/pre><p>从这里的测试代码可以看出，我们就只是创建了一个 drawing，并且要求返回的 drawingID 为 \"10001\"。<\/p><p>从单元测试的角度，这样的测试力度当然是非常不足的。同样的测试案例，用我们上一讲介绍的 <a href=\"https:\/\/github.com\/qiniu\/httptest\">httptest<\/a> 测试框架实现如下：<\/p><pre><code>func TestNewDrawing(t *testing.T) {\n    ...\n    ctx := httptest.New(t)\n    ctx.Exec(\n    `\n\tpost http:\/\/qpaint.com\/drawings\n\tret 200\n\tjson '{&quot;id&quot;: &quot;10001&quot;}'\n    `)\n}\n<\/code><\/pre><p>当然，实际我们应该去测试更多的情况，比如：<\/p><pre><code>func TestService(t *testing.T) {\n        ...\n\tctx := httptest.New(t)\n\tctx.Exec(\n\t`\n\tpost http:\/\/qpaint.com\/drawings\n\tret 200\n\tjson '{\n\t\t&quot;id&quot;: $(id1)\n\t}'\n\tmatch $(line1) '{\n\t\t&quot;id&quot;: &quot;1&quot;,\n\t\t&quot;line&quot;: {\n\t\t\t&quot;pt1&quot;: {&quot;x&quot;: 2.0, &quot;y&quot;: 3.0},\n\t\t\t&quot;pt2&quot;: {&quot;x&quot;: 15.0, &quot;y&quot;: 30.0},\n\t\t\t&quot;style&quot;: {\n\t\t\t\t&quot;lineWidth&quot;: 3,\n\t\t\t\t&quot;lineColor&quot;: &quot;red&quot;\n\t\t\t}\n\t\t}\n\t}'\n\tpost http:\/\/qpaint.com\/drawings\/$(id1)\/shapes\n\tjson $(line1)\n\tret 200\n\tget http:\/\/qpaint.com\/drawings\/$(id1)\/shapes\/1\n\tret 200\n\tjson $(line1)\n\t`)\n\tif !ctx.GetVar(&quot;id1&quot;).Equal(&quot;10001&quot;) {\n\t\tt.Fatal(`$(id1) != &quot;10001&quot;`)\n\t}\n}\n<\/code><\/pre><p>这个案例我们想演示什么？这是一个相对复杂的案例。首先我们创建了一个 drawing，并且将 drawingID 放到变量 <code>$(id1)<\/code> 中。随后，我们向该 drawing 中添加了一条直线 <code>$(line1)<\/code>。为了确认添加成功，我们取出了该图形对象，并且判断取得的图形和添加进去的 <code>$(line1)<\/code> 是否一致。<\/p><p>另外，它也演示了 qiniutest DSL 脚本和 Go 语言代码的互操作性。我们用 Go 代码取得变量 <code>$(id1)<\/code>，并且判断它是否和 \"10001\" 相等。<\/p><p>关于 qiniutest 更多的内容，请查阅以下资料：<\/p><ul>\n<li><a href=\"https:\/\/github.com\/qiniu\/httptest\">https:\/\/github.com\/qiniu\/httptest<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/qiniu\/qiniutest\">https:\/\/github.com\/qiniu\/qiniutest<\/a><\/li>\n<li>演讲稿：<a href=\"http:\/\/open.qiniudn.com\/qiniutest.pdf\">http:\/\/open.qiniudn.com\/qiniutest.pdf<\/a><\/li>\n<\/ul><p>在我们的测试代码中，还使用了一个七牛云开源的 mockhttp 组件，它也非常有意思：<\/p><ul>\n<li><a href=\"https:\/\/github.com\/qiniu\/x\/blob\/v8.0.1\/mockhttp\/mockhttp.go\">https:\/\/github.com\/qiniu\/x\/blob\/v8.0.1\/mockhttp\/mockhttp.go<\/a><\/li>\n<\/ul><p>这个 mockhttp 并不真去监听端口，感兴趣的同学可以研究一下。<\/p><h2>结语<\/h2><p>我们总结一下今天的内容。<\/p><p>从今天开始我们会一步步将之前写的 mock 服务端改造为真实的服务端程序。<\/p><p>我们第一步改造的是 RPC 框架和单元测试。这样我们第一次开始依赖第三方的代码库，如下：<\/p><ul>\n<li><a href=\"http:\/\/github.com\/qiniu\/http\">http:\/\/github.com\/qiniu\/http<\/a> （用到 restrpc）<\/li>\n<li><a href=\"http:\/\/github.com\/qiniu\/qiniutest\">http:\/\/github.com\/qiniu\/qiniutest<\/a><\/li>\n<li><a href=\"http:\/\/github.com\/qiniu\/x\">http:\/\/github.com\/qiniu\/x<\/a> （用到 mockhttp）<\/li>\n<\/ul><p>一旦有了外部依赖，我们就需要考虑依赖库的版本管理。好的一点是大多数现代语言都有很好的版本管理规范，对于 Go 语言我们用 go mod 来做版本管理。<\/p><p>如果你对今天的内容有什么思考与解读，欢迎给我留言，我们一起讨论。下一讲开始我们继续实战。<\/p><p>如果你觉得有所收获，也欢迎把文章分享给你的朋友。感谢你的收听，我们下期再见。<\/p>","footer_cover_data":{"img_url":"","mp_url":"","link_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{},"product_id":100025201,"like_count":22,"had_liked":false,"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/9c\/82\/9c1e7d3ef1yy6057f5d14c343a74b182.mp3","id":135789,"had_viewed":false,"article_title":"41 | 实战（一）：“画图”程序后端实战","column_bgcolor":"#F6F7FB","share":{"content":"毕业 2 年成为 WPS 首席架构师，七牛云 CEO 许式伟，首次完整、系统地分享自己的架构经验和思考，20 年经验沉淀，带你从源头出发，重新理解架构设计。","title":"许式伟的架构课","poster":"https:\/\/static001.geekbang.org\/resource\/image\/a5\/36\/a5782c4bf0f4798f0f66de14aa357436.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/ff\/f1\/ff42b166aff9386e1da02b0f6a4e3cf1.jpg"},"is_video_preview":false,"article_summary":"从今天开始我们会一步步将之前写的 mock 服务端改造为真实的服务端程序。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/1a\/74\/1ad6708a1755dbd8956ce028c656b874.jpeg","column_sale_type":2,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/ff\/f1\/ff42b166aff9386e1da02b0f6a4e3cf1.jpg","column_id":166,"audio_time_arr":{"m":"11","s":"30","h":"00"},"video_time":"","audio_title":"许式伟41讲","audio_md5":"9c1e7d3ef1yy6057f5d14c343a74b182","video_size":0,"text_read_percent":0,"comment_count":7,"cid":166,"article_sharetitle":"实战（一）：“画图”程序后端实战","column_is_onboard":true,"article_cshort":"<p>你好，我是七牛云许式伟。<\/p><p>到今天为止，服务端开发的基本内容已经讲完了。我们花了比较长的篇幅来介绍服务端的基础软件，包括负载均衡和各类存储中间件。然后我们上一讲介绍了服务端在业务架构上的一些通用问题。<\/p><p>今天我们开始进入实战。<\/p><p>对比服务端和桌面的内容可以看出，服务端开发和桌面端开发各自有各自的复杂性。服务端开发，难在基础软件很多，对程序员和架构师的知识面和理解深度都有较高的要求。但从业务复杂性来说，服务端的业务逻辑相对简单。而桌面端开发则相反，它的难点在于用户交互逻辑复杂，代码量大，业务架构的复杂性高。<\/p><p>上一章的实战篇，蛮多人反馈有点难，这某种程度来说和我们课程内容设计的规划有关。上一章我们从架构角度来说，偏重于介绍概要设计，也就是系统架构。所以我们对实现细节并没有做过多的剖析，而是把重心放在模块之间的接口耦合上。这是希望你把关注点放在全局，而不是一上来就进入局部细节。但是由于缺乏完整流程的剖析，大家没法把整个过程串起来，理解上就会打折扣。<\/p><p>这一章我们在架构上会偏重于详细设计。这在实战篇也会有所体现。<\/p><p>在上一章，我们实现了一个 mock 版本的服务端，代码如下：<\/p><ul>\n<li><a href=\"https:\/\/github.com\/qiniu\/qpaint\/tree\/v31\/paintdom\">https:\/\/github.com\/qiniu\/qpaint\/tree\/v31\/paintdom<\/a><\/li>\n<\/ul>","video_width":0,"column_could_sub":true,"article_ctime":1568304000,"score":"41568304000","video_media_map":{},"video_preview":{},"video":0,"video_time_arr":{"m":"","s":"","h":""},"video_total_seconds":0},"extra":{},"error":{}}