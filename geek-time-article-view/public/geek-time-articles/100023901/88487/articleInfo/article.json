{"code":0,"data":{"video_id":"","sku":"100023901","video_cover":"","author_name":"王宝令","text_read_version":0,"audio_size":8729921,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/52\/92\/52adf3bce764143a94a93ace058ca592.jpg","subtitles":{},"product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/a7\/48\/a7f4aace2b9e3ee6473b670640e7d848\/ld\/ld.m3u8","chapter_id":"0","column_had_sub":true,"audio_dubber":"王宝令","is_finished":false,"inline_video_subtitles":{},"like":{"had_done":false,"count":135},"neighbors":{"left":{"id":87779,"article_title":"14 | Lock和Condition（上）：隐藏在并发包中的管程"},"right":{"id":88499,"article_title":"16 | Semaphore：如何快速实现一个限流器？"}},"audio_time":"00:09:07","video_height":0,"rate_percent":0,"article_content":"<p>在上一篇文章中，我们讲到Java SDK并发包里的Lock有别于synchronized隐式锁的三个特性：能够响应中断、支持超时和非阻塞地获取锁。那今天我们接着再来详细聊聊Java SDK并发包里的Condition，<strong>Condition实现了管程模型里面的条件变量<\/strong>。<\/p><p>在<a href=\"https:\/\/time.geekbang.org\/column\/article\/86089\">《08 | 管程：并发编程的万能钥匙》<\/a>里我们提到过Java 语言内置的管程里只有一个条件变量，而Lock&amp;Condition实现的管程是支持多个条件变量的，这是二者的一个重要区别。<\/p><p>在很多并发场景下，支持多个条件变量能够让我们的并发程序可读性更好，实现起来也更容易。例如，实现一个阻塞队列，就需要两个条件变量。<\/p><p><strong>那如何利用两个条件变量快速实现阻塞队列呢？<\/strong><\/p><p>一个阻塞队列，需要两个条件变量，一个是队列不空（空队列不允许出队），另一个是队列不满（队列已满不允许入队），这个例子我们前面在介绍<a href=\"https:\/\/time.geekbang.org\/column\/article\/86089\">管程<\/a>的时候详细说过，这里就不再赘述。相关的代码，我这里重新列了出来，你可以温故知新一下。<\/p><pre><code>public class BlockedQueue&lt;T&gt;{\n  final Lock lock =\n    new ReentrantLock();\n  \/\/ 条件变量：队列不满  \n  final Condition notFull =\n    lock.newCondition();\n  \/\/ 条件变量：队列不空  \n  final Condition notEmpty =\n    lock.newCondition();\n\n  \/\/ 入队\n  void enq(T x) {\n    lock.lock();\n    try {\n      while (队列已满){\n        \/\/ 等待队列不满\n        notFull.await();\n      }  \n      \/\/ 省略入队操作...\n      \/\/入队后,通知可出队\n      notEmpty.signal();\n    }finally {\n      lock.unlock();\n    }\n  }\n  \/\/ 出队\n  void deq(){\n    lock.lock();\n    try {\n      while (队列已空){\n        \/\/ 等待队列不空\n        notEmpty.await();\n      }  \n      \/\/ 省略出队操作...\n      \/\/出队后，通知可入队\n      notFull.signal();\n    }finally {\n      lock.unlock();\n    }  \n  }\n}\n<\/code><\/pre><p>不过，这里你需要注意，Lock和Condition实现的管程，<strong>线程等待和通知需要调用await()、signal()、signalAll()<\/strong>，它们的语义和wait()、notify()、notifyAll()是相同的。但是不一样的是，Lock&amp;Condition实现的管程里只能使用前面的await()、signal()、signalAll()，而后面的wait()、notify()、notifyAll()只有在synchronized实现的管程里才能使用。如果一不小心在Lock&amp;Condition实现的管程里调用了wait()、notify()、notifyAll()，那程序可就彻底玩儿完了。<\/p><!-- [[[read_end]]] --><p>Java SDK并发包里的Lock和Condition不过就是管程的一种实现而已，管程你已经很熟悉了，那Lock和Condition的使用自然是小菜一碟。下面我们就来看看在知名项目Dubbo中，Lock和Condition是怎么用的。不过在开始介绍源码之前，我还先要介绍两个概念：同步和异步。<\/p><h2>同步与异步<\/h2><p>我们平时写的代码，基本都是同步的。但最近几年，异步编程大火。那同步和异步的区别到底是什么呢？<strong>通俗点来讲就是调用方是否需要等待结果，如果需要等待结果，就是同步；如果不需要等待结果，就是异步<\/strong>。<\/p><p>比如在下面的代码里，有一个计算圆周率小数点后100万位的方法<code>pai1M()<\/code>，这个方法可能需要执行俩礼拜，如果调用<code>pai1M()<\/code>之后，线程一直等着计算结果，等俩礼拜之后结果返回，就可以执行 <code>printf(\"hello world\")<\/code>了，这个属于同步；如果调用<code>pai1M()<\/code>之后，线程不用等待计算结果，立刻就可以执行 <code>printf(\"hello world\")<\/code>，这个就属于异步。<\/p><pre><code>\/\/ 计算圆周率小说点后100万位 \nString pai1M() {\n  \/\/省略代码无数\n}\n\npai1M()\nprintf(&quot;hello world&quot;)\n<\/code><\/pre><p>同步，是Java代码默认的处理方式。如果你想让你的程序支持异步，可以通过下面两种方式来实现：<\/p><ol>\n<li>调用方创建一个子线程，在子线程中执行方法调用，这种调用我们称为异步调用；<\/li>\n<li>方法实现的时候，创建一个新的线程执行主要逻辑，主线程直接return，这种方法我们一般称为异步方法。<\/li>\n<\/ol><h2>Dubbo源码分析<\/h2><p>其实在编程领域，异步的场景还是挺多的，比如TCP协议本身就是异步的，我们工作中经常用到的RPC调用，<strong>在TCP协议层面，发送完RPC请求后，线程是不会等待RPC的响应结果的<\/strong>。可能你会觉得奇怪，平时工作中的RPC调用大多数都是同步的啊？这是怎么回事呢？<\/p><p>其实很简单，一定是有人帮你做了异步转同步的事情。例如目前知名的RPC框架Dubbo就给我们做了异步转同步的事情，那它是怎么做的呢？下面我们就来分析一下Dubbo的相关源码。<\/p><p>对于下面一个简单的RPC调用，默认情况下sayHello()方法，是个同步方法，也就是说，执行service.sayHello(“dubbo”)的时候，线程会停下来等结果。<\/p><pre><code>DemoService service = 初始化部分省略\nString message = \n  service.sayHello(&quot;dubbo&quot;);\nSystem.out.println(message);\n<\/code><\/pre><p>如果此时你将调用线程dump出来的话，会是下图这个样子，你会发现调用线程阻塞了，线程状态是TIMED_WAITING。本来发送请求是异步的，但是调用线程却阻塞了，说明Dubbo帮我们做了异步转同步的事情。通过调用栈，你能看到线程是阻塞在DefaultFuture.get()方法上，所以可以推断：Dubbo异步转同步的功能应该是通过DefaultFuture这个类实现的。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/a9\/c5\/a924d23fc43d31267473f2dc91396ec5.png?wh=767*393\" alt=\"\"><\/p><center><span class=\"reference\">调用栈信息<\/span><\/center><p>不过为了理清前后关系，还是有必要分析一下调用DefaultFuture.get()之前发生了什么。DubboInvoker的108行调用了DefaultFuture.get()，这一行很关键，我稍微修改了一下列在了下面。这一行先调用了request(inv, timeout)方法，这个方法其实就是发送RPC请求，之后通过调用get()方法等待RPC返回结果。<\/p><pre><code>public class DubboInvoker{\n  Result doInvoke(Invocation inv){\n    \/\/ 下面这行就是源码中108行\n    \/\/ 为了便于展示，做了修改\n    return currentClient \n      .request(inv, timeout)\n      .get();\n  }\n}\n<\/code><\/pre><p>DefaultFuture这个类是很关键，我把相关的代码精简之后，列到了下面。不过在看代码之前，你还是有必要重复一下我们的需求：当RPC返回结果之前，阻塞调用线程，让调用线程等待；当RPC返回结果后，唤醒调用线程，让调用线程重新执行。不知道你有没有似曾相识的感觉，这不就是经典的等待-通知机制吗？这个时候想必你的脑海里应该能够浮现出管程的解决方案了。有了自己的方案之后，我们再来看看Dubbo是怎么实现的。<\/p><pre><code>\/\/ 创建锁与条件变量\nprivate final Lock lock \n    = new ReentrantLock();\nprivate final Condition done \n    = lock.newCondition();\n\n\/\/ 调用方通过该方法等待结果\nObject get(int timeout){\n  long start = System.nanoTime();\n  lock.lock();\n  try {\n\twhile (!isDone()) {\n\t  done.await(timeout);\n      long cur=System.nanoTime();\n\t  if (isDone() || \n          cur-start &gt; timeout){\n\t    break;\n\t  }\n\t}\n  } finally {\n\tlock.unlock();\n  }\n  if (!isDone()) {\n\tthrow new TimeoutException();\n  }\n  return returnFromResponse();\n}\n\/\/ RPC结果是否已经返回\nboolean isDone() {\n  return response != null;\n}\n\/\/ RPC结果返回时调用该方法   \nprivate void doReceived(Response res) {\n  lock.lock();\n  try {\n    response = res;\n    if (done != null) {\n      done.signal();\n    }\n  } finally {\n    lock.unlock();\n  }\n}\n<\/code><\/pre><p>调用线程通过调用get()方法等待RPC返回结果，这个方法里面，你看到的都是熟悉的“面孔”：调用lock()获取锁，在finally里面调用unlock()释放锁；获取锁后，通过经典的在循环中调用await()方法来实现等待。<\/p><p>当RPC结果返回时，会调用doReceived()方法，这个方法里面，调用lock()获取锁，在finally里面调用unlock()释放锁，获取锁后通过调用signal()来通知调用线程，结果已经返回，不用继续等待了。<\/p><p>至此，Dubbo里面的异步转同步的源码就分析完了，有没有觉得还挺简单的？最近这几年，工作中需要异步处理的越来越多了，其中有一个主要原因就是有些API本身就是异步API。例如websocket也是一个异步的通信协议，如果基于这个协议实现一个简单的RPC，你也会遇到异步转同步的问题。现在很多公有云的API本身也是异步的，例如创建云主机，就是一个异步的API，调用虽然成功了，但是云主机并没有创建成功，你需要调用另外一个API去轮询云主机的状态。如果你需要在项目内部封装创建云主机的API，你也会面临异步转同步的问题，因为同步的API更易用。<\/p><h2>总结<\/h2><p>Lock&amp;Condition是管程的一种实现，所以能否用好Lock和Condition要看你对管程模型理解得怎么样。管程的技术前面我们已经专门用了一篇文章做了介绍，你可以结合着来学，理论联系实践，有助于加深理解。<\/p><p>Lock&amp;Condition实现的管程相对于synchronized实现的管程来说更加灵活、功能也更丰富。<\/p><p>结合我自己的经验，我认为了解原理比了解实现更能让你快速学好并发编程，所以没有介绍太多Java SDK并发包里锁和条件变量是如何实现的。但如果你对实现感兴趣，可以参考<a href=\"time:\/\/mall?url=https%3A%2F%2Fh5.youzan.com%2Fv2%2Fgoods%2F35z7jjvd4r4oo\">《Java并发编程的艺术》<\/a>一书的第5章《Java中的锁》，里面详细介绍了实现原理，我觉得写得非常好。<\/p><p>另外，专栏里对DefaultFuture的代码缩减了很多，如果你感兴趣，也可以去看看完整版。<br>\nDubbo的源代码在<a href=\"https:\/\/github.com\/apache\/incubator-dubbo\">Github上<\/a>，DefaultFuture的路径是：incubator-dubbo\/dubbo-remoting\/dubbo-remoting-api\/src\/main\/java\/org\/apache\/dubbo\/remoting\/exchange\/support\/DefaultFuture.java。<\/p><h2>课后思考<\/h2><p>DefaultFuture里面唤醒等待的线程，用的是signal()，而不是signalAll()，你来分析一下，这样做是否合理呢？<\/p><p>欢迎在留言区与我分享你的想法，也欢迎你在留言区记录你的思考过程。感谢阅读，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给更多的朋友。<\/p><p><\/p>","footer_cover_data":{"img_url":"","mp_url":"","link_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{},"product_id":100023901,"like_count":164,"had_liked":false,"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/a7\/48\/a7f4aace2b9e3ee6473b670640e7d848.mp3","id":88487,"had_viewed":false,"article_title":"15 | Lock和Condition（下）：Dubbo如何用管程实现异步转同步？","column_bgcolor":"#cbd0de","share":{"content":"当面试时问到多线程、锁的问题，你还是答不上来怎么办？推荐给你《Java 并发编程实战》专栏，带你搞懂并发里的那些Bug问题，全面提升你的并发编程能力，大厂面试绝对不是问题。","title":"王宝令 · Java并发编程实战","poster":"https:\/\/static001.geekbang.org\/resource\/image\/ce\/50\/cebb5cfded54f4bfcca4d75ffe915350.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg"},"is_video_preview":false,"article_summary":"Lock&Condition实现的管程相对于synchronized实现的管程来说更加灵活、功能也更丰富。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/aa\/c7\/aaea478954cb7014581b46ab970c04c7.jpeg","column_sale_type":2,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"audio_time_arr":{"m":"09","s":"07","h":"00"},"video_time":"","audio_title":"修改 3.31 宝令 15_01_01","audio_md5":"a7f4aace2b9e3ee6473b670640e7d848","video_size":0,"text_read_percent":0,"comment_count":99,"cid":159,"article_sharetitle":"Lock&Condition（下）：Dubbo如何用管程实现异步转同步？","column_is_onboard":true,"article_cshort":"<p>在上一篇文章中，我们讲到Java SDK并发包里的Lock有别于synchronized隐式锁的三个特性：能够响应中断、支持超时和非阻塞地获取锁。那今天我们接着再来详细聊聊Java SDK并发包里的Condition，<strong>Condition实现了管程模型里面的条件变量<\/strong>。<\/p><p>在<a href=\"https:\/\/time.geekbang.org\/column\/article\/86089\">《08 | 管程：并发编程的万能钥匙》<\/a>里我们提到过Java 语言内置的管程里只有一个条件变量，而Lock&amp;Condition实现的管程是支持多个条件变量的，这是二者的一个重要区别。<\/p><p>在很多并发场景下，支持多个条件变量能够让我们的并发程序可读性更好，实现起来也更容易。例如，实现一个阻塞队列，就需要两个条件变量。<\/p><p><strong>那如何利用两个条件变量快速实现阻塞队列呢？<\/strong><\/p><p>一个阻塞队列，需要两个条件变量，一个是队列不空（空队列不允许出队），另一个是队列不满（队列已满不允许入队），这个例子我们前面在介绍<a href=\"https:\/\/time.geekbang.org\/column\/article\/86089\">管程<\/a>的时候详细说过，这里就不再赘述。相关的代码，我这里重新列了出来，你可以温故知新一下。<\/p><pre><code>public class BlockedQueue&lt;T&gt;{\n  final Lock lock =\n    new ReentrantLock();\n  \/\/ 条件变量：队列不满  \n  final Condition notFull =\n    lock.newCondition();\n  \/\/ 条件变量：队列不空  \n  final Condition notEmpty =\n    lock.newCondition();\n\n  \/\/ 入队\n  void enq(T x) {\n    lock.lock();\n    try {\n      while (队列已满){\n        \/\/ 等待队列不满\n        notFull.await();\n      }  \n      \/\/ 省略入队操作...\n      \/\/入队后,通知可出队\n      notEmpty.signal();\n    }finally {\n      lock.unlock();\n    }\n  }\n  \/\/ 出队\n  void deq(){\n    lock.lock();\n    try {\n      while (队列已空){\n        \/\/ 等待队列不空\n        notEmpty.await();\n      }  \n      \/\/ 省略出队操作...\n      \/\/出队后，通知可入队\n      notFull.signal();\n    }finally {\n      lock.unlock();\n    }  \n  }\n}\n<\/code><\/pre><p>不过，这里你需要注意，Lock和Condition实现的管程，<strong>线程等待和通知需要调用await()、signal()、signalAll()<\/strong>，它们的语义和wait()、notify()、notifyAll()是相同的。但是不一样的是，Lock&amp;Condition实现的管程里只能使用前面的await()、signal()、signalAll()，而后面的wait()、notify()、notifyAll()只有在synchronized实现的管程里才能使用。如果一不小心在Lock&amp;Condition实现的管程里调用了wait()、notify()、notifyAll()，那程序可就彻底玩儿完了。<\/p>","video_width":0,"column_could_sub":true,"article_ctime":1554134400,"score":"41554134400","video_media_map":{},"video_preview":{},"video":0,"video_time_arr":{"m":"","s":"","h":""},"video_total_seconds":0},"extra":{},"error":{}}