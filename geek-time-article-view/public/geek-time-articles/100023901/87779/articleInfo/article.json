{"code":0,"data":{"video_id":"","sku":"100023901","video_cover":"","author_name":"王宝令","text_read_version":0,"audio_size":10629603,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/15\/e8\/150e3874c4d7686745f4810702dbdce8.jpg","subtitles":{},"product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/e5\/0e\/e5795555e9b590061872a008bce13f0e\/ld\/ld.m3u8","chapter_id":"0","column_had_sub":true,"audio_dubber":"王宝令","is_finished":false,"inline_video_subtitles":{},"like":{"had_done":false,"count":203},"neighbors":{"left":{"id":87749,"article_title":"13 | 理论基础模块热点问题答疑"},"right":{"id":88487,"article_title":"15 | Lock和Condition（下）：Dubbo如何用管程实现异步转同步？"}},"audio_time":"00:11:05","video_height":0,"rate_percent":0,"article_content":"<p>Java SDK并发包内容很丰富，包罗万象，但是我觉得最核心的还是其对管程的实现。因为理论上利用管程，你几乎可以实现并发包里所有的工具类。在前面<a href=\"https:\/\/time.geekbang.org\/column\/article\/86089\">《08 | 管程：并发编程的万能钥匙》<\/a>中我们提到过在并发编程领域，有两大核心问题：一个是<strong>互斥<\/strong>，即同一时刻只允许一个线程访问共享资源；另一个是<strong>同步<\/strong>，即线程之间如何通信、协作。这两大问题，管程都是能够解决的。<strong>Java SDK并发包通过Lock和Condition两个接口来实现管程，其中Lock用于解决互斥问题，Condition用于解决同步问题<\/strong>。<\/p><p>今天我们重点介绍Lock的使用，在介绍Lock的使用之前，有个问题需要你首先思考一下：Java语言本身提供的synchronized也是管程的一种实现，既然Java从语言层面已经实现了管程了，那为什么还要在SDK里提供另外一种实现呢？难道Java标准委员会还能同意“重复造轮子”的方案？很显然它们之间是有巨大区别的。那区别在哪里呢？如果能深入理解这个问题，对你用好Lock帮助很大。下面我们就一起来剖析一下这个问题。<\/p><h2>再造管程的理由<\/h2><p>你也许曾经听到过很多这方面的传说，例如在Java的1.5版本中，synchronized性能不如SDK里面的Lock，但1.6版本之后，synchronized做了很多优化，将性能追了上来，所以1.6之后的版本又有人推荐使用synchronized了。那性能是否可以成为“重复造轮子”的理由呢？显然不能。因为性能问题优化一下就可以了，完全没必要“重复造轮子”。<\/p><!-- [[[read_end]]] --><p>到这里，关于这个问题，你是否能够想出一条理由来呢？如果你细心的话，也许能想到一点。那就是我们前面在介绍<a href=\"https:\/\/time.geekbang.org\/column\/article\/85001\">死锁问题<\/a>的时候，提出了一个<strong>破坏不可抢占条件<\/strong>方案，但是这个方案synchronized没有办法解决。原因是synchronized申请资源的时候，如果申请不到，线程直接进入阻塞状态了，而线程进入阻塞状态，啥都干不了，也释放不了线程已经占有的资源。但我们希望的是：<\/p><blockquote>\n<p>对于“不可抢占”这个条件，占用部分资源的线程进一步申请其他资源时，如果申请不到，可以主动释放它占有的资源，这样不可抢占这个条件就破坏掉了。<\/p>\n<\/blockquote><p>如果我们重新设计一把互斥锁去解决这个问题，那该怎么设计呢？我觉得有三种方案。<\/p><ol>\n<li><strong>能够响应中断<\/strong>。synchronized的问题是，持有锁A后，如果尝试获取锁B失败，那么线程就进入阻塞状态，一旦发生死锁，就没有任何机会来唤醒阻塞的线程。但如果阻塞状态的线程能够响应中断信号，也就是说当我们给阻塞的线程发送中断信号的时候，能够唤醒它，那它就有机会释放曾经持有的锁A。这样就破坏了不可抢占条件了。<\/li>\n<li><strong>支持超时<\/strong>。如果线程在一段时间之内没有获取到锁，不是进入阻塞状态，而是返回一个错误，那这个线程也有机会释放曾经持有的锁。这样也能破坏不可抢占条件。<\/li>\n<li><strong>非阻塞地获取锁<\/strong>。如果尝试获取锁失败，并不进入阻塞状态，而是直接返回，那这个线程也有机会释放曾经持有的锁。这样也能破坏不可抢占条件。<\/li>\n<\/ol><p>这三种方案可以全面弥补synchronized的问题。到这里相信你应该也能理解了，这三个方案就是“重复造轮子”的主要原因，体现在API上，就是Lock接口的三个方法。详情如下：<\/p><pre><code>\/\/ 支持中断的API\nvoid lockInterruptibly() \n  throws InterruptedException;\n\/\/ 支持超时的API\nboolean tryLock(long time, TimeUnit unit) \n  throws InterruptedException;\n\/\/ 支持非阻塞获取锁的API\nboolean tryLock();\n<\/code><\/pre><h2>如何保证可见性<\/h2><p>Java SDK里面Lock的使用，有一个经典的范例，就是<code>try{}finally{}<\/code>，需要重点关注的是在finally里面释放锁。这个范例无需多解释，你看一下下面的代码就明白了。但是有一点需要解释一下，那就是可见性是怎么保证的。你已经知道Java里多线程的可见性是通过Happens-Before规则保证的，而synchronized之所以能够保证可见性，也是因为有一条synchronized相关的规则：synchronized的解锁 Happens-Before 于后续对这个锁的加锁。那Java SDK里面Lock靠什么保证可见性呢？例如在下面的代码中，线程T1对value进行了+=1操作，那后续的线程T2能够看到value的正确结果吗？<\/p><pre><code>class X {\n  private final Lock rtl =\n  new ReentrantLock();\n  int value;\n  public void addOne() {\n    \/\/ 获取锁\n    rtl.lock();  \n    try {\n      value+=1;\n    } finally {\n      \/\/ 保证锁能释放\n      rtl.unlock();\n    }\n  }\n}\n<\/code><\/pre><p>答案必须是肯定的。<strong>Java SDK里面锁<\/strong>的实现非常复杂，这里我就不展开细说了，但是原理还是需要简单介绍一下：它是<strong>利用了volatile相关的Happens-Before规则<\/strong>。Java SDK里面的ReentrantLock，内部持有一个volatile 的成员变量state，获取锁的时候，会读写state的值；解锁的时候，也会读写state的值（简化后的代码如下面所示）。也就是说，在执行value+=1之前，程序先读写了一次volatile变量state，在执行value+=1之后，又读写了一次volatile变量state。根据相关的Happens-Before规则：<\/p><ol>\n<li><strong>顺序性规则<\/strong>：对于线程T1，value+=1 Happens-Before 释放锁的操作unlock()；<\/li>\n<li><strong>volatile变量规则<\/strong>：由于state = 1会先读取state，所以线程T1的unlock()操作Happens-Before线程T2的lock()操作；<\/li>\n<li><strong>传递性规则<\/strong>：线程 T1的value+=1  Happens-Before 线程 T2 的 lock() 操作。<\/li>\n<\/ol><pre><code>class SampleLock {\n  volatile int state;\n  \/\/ 加锁\n  lock() {\n    \/\/ 省略代码无数\n    state = 1;\n  }\n  \/\/ 解锁\n  unlock() {\n    \/\/ 省略代码无数\n    state = 0;\n  }\n}\n<\/code><\/pre><p>所以说，后续线程T2能够看到value的正确结果。如果你觉得理解起来还有点困难，建议你重温一下前面我们讲过的<a href=\"https:\/\/time.geekbang.org\/column\/article\/84017\">《02 | Java内存模型：看Java如何解决可见性和有序性问题》<\/a>里面的相关内容。<\/p><h2>什么是可重入锁<\/h2><p>如果你细心观察，会发现我们创建的锁的具体类名是ReentrantLock，这个翻译过来叫<strong>可重入锁<\/strong>，这个概念前面我们一直没有介绍过。<strong>所谓可重入锁，顾名思义，指的是线程可以重复获取同一把锁<\/strong>。例如下面代码中，当线程T1执行到 ① 处时，已经获取到了锁 rtl ，当在 ① 处调用 get()方法时，会在 ② 再次对锁 rtl 执行加锁操作。此时，如果锁 rtl 是可重入的，那么线程T1可以再次加锁成功；如果锁 rtl 是不可重入的，那么线程T1此时会被阻塞。<\/p><p>除了可重入锁，可能你还听说过可重入函数，可重入函数怎么理解呢？指的是线程可以重复调用？显然不是，所谓<strong>可重入函数，指的是多个线程可以同时调用该函数<\/strong>，每个线程都能得到正确结果；同时在一个线程内支持线程切换，无论被切换多少次，结果都是正确的。多线程可以同时执行，还支持线程切换，这意味着什么呢？线程安全啊。所以，可重入函数是线程安全的。<\/p><pre><code>class X {\n  private final Lock rtl =\n  new ReentrantLock();\n  int value;\n  public int get() {\n    \/\/ 获取锁\n    rtl.lock();         ②\n    try {\n      return value;\n    } finally {\n      \/\/ 保证锁能释放\n      rtl.unlock();\n    }\n  }\n  public void addOne() {\n    \/\/ 获取锁\n    rtl.lock();  \n    try {\n      value = 1 + get(); ①\n    } finally {\n      \/\/ 保证锁能释放\n      rtl.unlock();\n    }\n  }\n}\n<\/code><\/pre><h2>公平锁与非公平锁<\/h2><p>在使用ReentrantLock的时候，你会发现ReentrantLock这个类有两个构造函数，一个是无参构造函数，一个是传入fair参数的构造函数。fair参数代表的是锁的公平策略，如果传入true就表示需要构造一个公平锁，反之则表示要构造一个非公平锁。<\/p><pre><code>\/\/无参构造函数：默认非公平锁\npublic ReentrantLock() {\n    sync = new NonfairSync();\n}\n\/\/根据公平策略参数创建锁\npublic ReentrantLock(boolean fair){\n    sync = fair ? new FairSync() \n                : new NonfairSync();\n}\n<\/code><\/pre><p>在前面<a href=\"https:\/\/time.geekbang.org\/column\/article\/86089\">《08 | 管程：并发编程的万能钥匙》<\/a>中，我们介绍过入口等待队列，锁都对应着一个等待队列，如果一个线程没有获得锁，就会进入等待队列，当有线程释放锁的时候，就需要从等待队列中唤醒一个等待的线程。如果是公平锁，唤醒的策略就是谁等待的时间长，就唤醒谁，很公平；如果是非公平锁，则不提供这个公平保证，有可能等待时间短的线程反而先被唤醒。<\/p><h2>用锁的最佳实践<\/h2><p>你已经知道，用锁虽然能解决很多并发问题，但是风险也是挺高的。可能会导致死锁，也可能影响性能。这方面有是否有相关的最佳实践呢？有，还很多。但是我觉得最值得推荐的是并发大师Doug Lea《Java并发编程：设计原则与模式》一书中，推荐的三个用锁的最佳实践，它们分别是：<\/p><blockquote>\n<ol>\n<li>永远只在更新对象的成员变量时加锁<\/li>\n<li>永远只在访问可变的成员变量时加锁<\/li>\n<li>永远不在调用其他对象的方法时加锁<\/li>\n<\/ol>\n<\/blockquote><p>这三条规则，前两条估计你一定会认同，最后一条你可能会觉得过于严苛。但是我还是倾向于你去遵守，因为调用其他对象的方法，实在是太不安全了，也许“其他”方法里面有线程sleep()的调用，也可能会有奇慢无比的I\/O操作，这些都会严重影响性能。更可怕的是，“其他”类的方法可能也会加锁，然后双重加锁就可能导致死锁。<\/p><p><strong>并发问题，本来就难以诊断，所以你一定要让你的代码尽量安全，尽量简单，哪怕有一点可能会出问题，都要努力避免。<\/strong><\/p><h2>总结<\/h2><p>Java SDK 并发包里的Lock接口里面的每个方法，你可以感受到，都是经过深思熟虑的。除了支持类似synchronized隐式加锁的lock()方法外，还支持超时、非阻塞、可中断的方式获取锁，这三种方式为我们编写更加安全、健壮的并发程序提供了很大的便利。希望你以后在使用锁的时候，一定要仔细斟酌。<\/p><p>除了并发大师Doug Lea推荐的三个最佳实践外，你也可以参考一些诸如：减少锁的持有时间、减小锁的粒度等业界广为人知的规则，其实本质上它们都是相通的，不过是在该加锁的地方加锁而已。你可以自己体会，自己总结，最终总结出自己的一套最佳实践来。<\/p><h2>课后思考<\/h2><p>你已经知道 tryLock() 支持非阻塞方式获取锁，下面这段关于转账的程序就使用到了 tryLock()，你来看看，它是否存在死锁问题呢？<\/p><pre><code>class Account {\n  private int balance;\n  private final Lock lock\n          = new ReentrantLock();\n  \/\/ 转账\n  void transfer(Account tar, int amt){\n    while (true) {\n      if(this.lock.tryLock()) {\n        try {\n          if (tar.lock.tryLock()) {\n            try {\n              this.balance -= amt;\n              tar.balance += amt;\n            } finally {\n              tar.lock.unlock();\n            }\n          }\/\/if\n        } finally {\n          this.lock.unlock();\n        }\n      }\/\/if\n    }\/\/while\n  }\/\/transfer\n}\n<\/code><\/pre><p>欢迎在留言区与我分享你的想法，也欢迎你在留言区记录你的思考过程。感谢阅读，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给更多的朋友。<\/p><p><\/p>","footer_cover_data":{"img_url":"","mp_url":"","link_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{},"product_id":100023901,"like_count":241,"had_liked":false,"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/e5\/0e\/e5795555e9b590061872a008bce13f0e.mp3","id":87779,"had_viewed":false,"article_title":"14 | Lock和Condition（上）：隐藏在并发包中的管程","column_bgcolor":"#cbd0de","share":{"content":"当面试时问到多线程、锁的问题，你还是答不上来怎么办？推荐给你《Java 并发编程实战》专栏，带你搞懂并发里的那些Bug问题，全面提升你的并发编程能力，大厂面试绝对不是问题。","title":"王宝令 · Java并发编程实战","poster":"https:\/\/static001.geekbang.org\/resource\/image\/ce\/50\/cebb5cfded54f4bfcca4d75ffe915350.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg"},"is_video_preview":false,"article_summary":"Java SDK并发包通过Lock和Condition两个接口来实现管程，分别解决互斥和同步问题。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/c9\/63\/c940099cb6327be0798deb88c29eee63.jpeg","column_sale_type":2,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"audio_time_arr":{"m":"11","s":"05","h":"00"},"video_time":"","audio_title":"修改新 3.28 宝令 14 复制 复制_01_01_01","audio_md5":"e5795555e9b590061872a008bce13f0e","video_size":0,"text_read_percent":0,"comment_count":124,"cid":159,"article_sharetitle":"Lock&Condition（上）：隐藏在并发包中的管程","column_is_onboard":true,"article_cshort":"<p>Java SDK并发包内容很丰富，包罗万象，但是我觉得最核心的还是其对管程的实现。因为理论上利用管程，你几乎可以实现并发包里所有的工具类。在前面<a href=\"https:\/\/time.geekbang.org\/column\/article\/86089\">《08 | 管程：并发编程的万能钥匙》<\/a>中我们提到过在并发编程领域，有两大核心问题：一个是<strong>互斥<\/strong>，即同一时刻只允许一个线程访问共享资源；另一个是<strong>同步<\/strong>，即线程之间如何通信、协作。这两大问题，管程都是能够解决的。<strong>Java SDK并发包通过Lock和Condition两个接口来实现管程，其中Lock用于解决互斥问题，Condition用于解决同步问题<\/strong>。<\/p><p>今天我们重点介绍Lock的使用，在介绍Lock的使用之前，有个问题需要你首先思考一下：Java语言本身提供的synchronized也是管程的一种实现，既然Java从语言层面已经实现了管程了，那为什么还要在SDK里提供另外一种实现呢？难道Java标准委员会还能同意“重复造轮子”的方案？很显然它们之间是有巨大区别的。那区别在哪里呢？如果能深入理解这个问题，对你用好Lock帮助很大。下面我们就一起来剖析一下这个问题。<\/p><h2>再造管程的理由<\/h2><p>你也许曾经听到过很多这方面的传说，例如在Java的1.5版本中，synchronized性能不如SDK里面的Lock，但1.6版本之后，synchronized做了很多优化，将性能追了上来，所以1.6之后的版本又有人推荐使用synchronized了。那性能是否可以成为“重复造轮子”的理由呢？显然不能。因为性能问题优化一下就可以了，完全没必要“重复造轮子”。<\/p>","video_width":0,"column_could_sub":true,"article_ctime":1553875200,"score":"41553875200","video_media_map":{},"video_preview":{},"video":0,"video_time_arr":{"m":"","s":"","h":""},"video_total_seconds":0},"extra":{},"error":{}}