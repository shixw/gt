{"code":0,"data":{"video_id":"","sku":"100023901","video_cover":"","author_name":"王宝令","text_read_version":0,"audio_size":8095913,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/35\/dc\/3594eb9df4eb9f459f8eb10a19e126dc.jpg","subtitles":{},"product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/20\/47\/20fec0307714e6780fdcee5a224c7047\/ld\/ld.m3u8","chapter_id":"0","column_had_sub":true,"audio_dubber":"王宝令","is_finished":false,"inline_video_subtitles":{},"like":{"had_done":false,"count":122},"neighbors":{"left":{"id":93745,"article_title":"30 | 线程本地存储模式：没有共享，就没有伤害"},"right":{"id":94604,"article_title":"32 | Balking模式：再谈线程安全的单例模式"}},"audio_time":"00:08:27","video_height":0,"rate_percent":0,"article_content":"<p>前不久，同事小灰工作中遇到一个问题，他开发了一个Web项目：Web版的文件浏览器，通过它用户可以在浏览器里查看服务器上的目录和文件。这个项目依赖运维部门提供的文件浏览服务，而这个文件浏览服务只支持消息队列（MQ）方式接入。消息队列在互联网大厂中用的非常多，主要用作流量削峰和系统解耦。在这种接入方式中，发送消息和消费结果这两个操作之间是异步的，你可以参考下面的示意图来理解。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/d1\/21\/d1ad5ce1df66d85698308c41e4e93a21.png?wh=1142*393\" alt=\"\"><\/p><center><span class=\"reference\">消息队列（MQ）示意图<\/span><\/center><p>在小灰的这个Web项目中，用户通过浏览器发过来一个请求，会被转换成一个异步消息发送给MQ，等MQ返回结果后，再将这个结果返回至浏览器。小灰同学的问题是：给MQ发送消息的线程是处理Web请求的线程T1，但消费MQ结果的线程并不是线程T1，那线程T1如何等待MQ的返回结果呢？为了便于你理解这个场景，我将其代码化了，示例代码如下。<\/p><pre><code>class Message{\n  String id;\n  String content;\n}\n\/\/该方法可以发送消息\nvoid send(Message msg){\n  \/\/省略相关代码\n}\n\/\/MQ消息返回后会调用该方法\n\/\/该方法的执行线程不同于\n\/\/发送消息的线程\nvoid onMessage(Message msg){\n  \/\/省略相关代码\n}\n\/\/处理浏览器发来的请求\nRespond handleWebReq(){\n  \/\/创建一消息\n  Message msg1 = new \n    Message(&quot;1&quot;,&quot;{...}&quot;);\n  \/\/发送消息\n  send(msg1);\n  \/\/如何等待MQ返回的消息呢？\n  String result = ...;\n}\n<\/code><\/pre><p>看到这里，相信你一定有点似曾相识的感觉，这不就是前面我们在<a href=\"https:\/\/time.geekbang.org\/column\/article\/88487\">《15 | Lock和Condition（下）：Dubbo如何用管程实现异步转同步？》<\/a>中曾介绍过的异步转同步问题吗？仔细分析，的确是这样，不过在那一篇文章中我们只是介绍了最终方案，让你知其然，但是并没有介绍这个方案是如何设计出来的，今天咱们再仔细聊聊这个问题，让你知其所以然，遇到类似问题也能自己设计出方案来。<\/p><!-- [[[read_end]]] --><h2>Guarded Suspension模式<\/h2><p>上面小灰遇到的问题，在现实世界里比比皆是，只是我们一不小心就忽略了。比如，项目组团建要外出聚餐，我们提前预订了一个包间，然后兴冲冲地奔过去，到那儿后大堂经理看了一眼包间，发现服务员正在收拾，就会告诉我们：“您预订的包间服务员正在收拾，请您稍等片刻。”过了一会，大堂经理发现包间已经收拾完了，于是马上带我们去包间就餐。<\/p><p>我们等待包间收拾完的这个过程和小灰遇到的等待MQ返回消息本质上是一样的，都是<strong>等待一个条件满足<\/strong>：就餐需要等待包间收拾完，小灰的程序里要等待MQ返回消息。<\/p><p>那我们来看看现实世界里是如何解决这类问题的呢？现实世界里大堂经理这个角色很重要，我们是否等待，完全是由他来协调的。通过类比，相信你也一定有思路了：我们的程序里，也需要这样一个大堂经理。的确是这样，那程序世界里的大堂经理该如何设计呢？其实设计方案前人早就搞定了，而且还将其总结成了一个设计模式：<strong>Guarded Suspension<\/strong>。所谓Guarded Suspension，直译过来就是“保护性地暂停”。那下面我们就来看看，Guarded Suspension模式是如何模拟大堂经理进行保护性地暂停的。<\/p><p>下图就是Guarded Suspension模式的结构图，非常简单，一个对象GuardedObject，内部有一个成员变量——受保护的对象，以及两个成员方法——<code>get(Predicate&lt;T&gt; p)<\/code>和<code>onChanged(T obj)<\/code>方法。其中，对象GuardedObject就是我们前面提到的大堂经理，受保护对象就是餐厅里面的包间；受保护对象的get()方法对应的是我们的就餐，就餐的前提条件是包间已经收拾好了，参数p就是用来描述这个前提条件的；受保护对象的onChanged()方法对应的是服务员把包间收拾好了，通过onChanged()方法可以fire一个事件，而这个事件往往能改变前提条件p的计算结果。下图中，左侧的绿色线程就是需要就餐的顾客，而右侧的蓝色线程就是收拾包间的服务员。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/63\/dc\/630f3eda98a0e6a436953153c68464dc.png?wh=1142*503\" alt=\"\"><\/p><center><span class=\"reference\">Guarded Suspension模式结构图<\/span><\/center><p>GuardedObject的内部实现非常简单，是管程的一个经典用法，你可以参考下面的示例代码，核心是：get()方法通过条件变量的await()方法实现等待，onChanged()方法通过条件变量的signalAll()方法实现唤醒功能。逻辑还是很简单的，所以这里就不再详细介绍了。<\/p><pre><code>class GuardedObject&lt;T&gt;{\n  \/\/受保护的对象\n  T obj;\n  final Lock lock = \n    new ReentrantLock();\n  final Condition done =\n    lock.newCondition();\n  final int timeout=1;\n  \/\/获取受保护对象  \n  T get(Predicate&lt;T&gt; p) {\n    lock.lock();\n    try {\n      \/\/MESA管程推荐写法\n      while(!p.test(obj)){\n        done.await(timeout, \n          TimeUnit.SECONDS);\n      }\n    }catch(InterruptedException e){\n      throw new RuntimeException(e);\n    }finally{\n      lock.unlock();\n    }\n    \/\/返回非空的受保护对象\n    return obj;\n  }\n  \/\/事件通知方法\n  void onChanged(T obj) {\n    lock.lock();\n    try {\n      this.obj = obj;\n      done.signalAll();\n    } finally {\n      lock.unlock();\n    }\n  }\n}\n<\/code><\/pre><h2>扩展Guarded Suspension模式<\/h2><p>上面我们介绍了Guarded Suspension模式及其实现，这个模式能够模拟现实世界里大堂经理的角色，那现在我们再来看看这个“大堂经理”能否解决小灰同学遇到的问题。<\/p><p>Guarded Suspension模式里GuardedObject有两个核心方法，一个是get()方法，一个是onChanged()方法。很显然，在处理Web请求的方法handleWebReq()中，可以调用GuardedObject的get()方法来实现等待；在MQ消息的消费方法onMessage()中，可以调用GuardedObject的onChanged()方法来实现唤醒。<\/p><pre><code>\/\/处理浏览器发来的请求\nRespond handleWebReq(){\n  \/\/创建一消息\n  Message msg1 = new \n    Message(&quot;1&quot;,&quot;{...}&quot;);\n  \/\/发送消息\n  send(msg1);\n  \/\/利用GuardedObject实现等待\n  GuardedObject&lt;Message&gt; go\n    =new GuardObjec&lt;&gt;();\n  Message r = go.get(\n    t-&gt;t != null);\n}\nvoid onMessage(Message msg){\n  \/\/如何找到匹配的go？\n  GuardedObject&lt;Message&gt; go=???\n  go.onChanged(msg);\n}\n<\/code><\/pre><p>但是在实现的时候会遇到一个问题，handleWebReq()里面创建了GuardedObject对象的实例go，并调用其get()方等待结果，那在onMessage()方法中，如何才能够找到匹配的GuardedObject对象呢？这个过程类似服务员告诉大堂经理某某包间已经收拾好了，大堂经理如何根据包间找到就餐的人。现实世界里，大堂经理的头脑中，有包间和就餐人之间的关系图，所以服务员说完之后大堂经理立刻就能把就餐人找出来。<\/p><p>我们可以参考大堂经理识别就餐人的办法，来扩展一下Guarded Suspension模式，从而使它能够很方便地解决小灰同学的问题。在小灰的程序中，每个发送到MQ的消息，都有一个唯一性的属性id，所以我们可以维护一个MQ消息id和GuardedObject对象实例的关系，这个关系可以类比大堂经理大脑里维护的包间和就餐人的关系。<\/p><p>有了这个关系，我们来看看具体如何实现。下面的示例代码是扩展Guarded Suspension模式的实现，扩展后的GuardedObject内部维护了一个Map，其Key是MQ消息id，而Value是GuardedObject对象实例，同时增加了静态方法create()和fireEvent()；create()方法用来创建一个GuardedObject对象实例，并根据key值将其加入到Map中，而fireEvent()方法则是模拟的大堂经理根据包间找就餐人的逻辑。<\/p><pre><code>class GuardedObject&lt;T&gt;{\n  \/\/受保护的对象\n  T obj;\n  final Lock lock = \n    new ReentrantLock();\n  final Condition done =\n    lock.newCondition();\n  final int timeout=2;\n  \/\/保存所有GuardedObject\n  final static Map&lt;Object, GuardedObject&gt; \n  gos=new ConcurrentHashMap&lt;&gt;();\n  \/\/静态方法创建GuardedObject\n  static &lt;K&gt; GuardedObject \n      create(K key){\n    GuardedObject go=new GuardedObject();\n    gos.put(key, go);\n    return go;\n  }\n  static &lt;K, T&gt; void \n      fireEvent(K key, T obj){\n    GuardedObject go=gos.remove(key);\n    if (go != null){\n      go.onChanged(obj);\n    }\n  }\n  \/\/获取受保护对象  \n  T get(Predicate&lt;T&gt; p) {\n    lock.lock();\n    try {\n      \/\/MESA管程推荐写法\n      while(!p.test(obj)){\n        done.await(timeout, \n          TimeUnit.SECONDS);\n      }\n    }catch(InterruptedException e){\n      throw new RuntimeException(e);\n    }finally{\n      lock.unlock();\n    }\n    \/\/返回非空的受保护对象\n    return obj;\n  }\n  \/\/事件通知方法\n  void onChanged(T obj) {\n    lock.lock();\n    try {\n      this.obj = obj;\n      done.signalAll();\n    } finally {\n      lock.unlock();\n    }\n  }\n}\n<\/code><\/pre><p>这样利用扩展后的GuardedObject来解决小灰同学的问题就很简单了，具体代码如下所示。<\/p><pre><code>\/\/处理浏览器发来的请求\nRespond handleWebReq(){\n  int id=序号生成器.get();\n  \/\/创建一消息\n  Message msg1 = new \n    Message(id,&quot;{...}&quot;);\n  \/\/创建GuardedObject实例\n  GuardedObject&lt;Message&gt; go=\n    GuardedObject.create(id);  \n  \/\/发送消息\n  send(msg1);\n  \/\/等待MQ消息\n  Message r = go.get(\n    t-&gt;t != null);  \n}\nvoid onMessage(Message msg){\n  \/\/唤醒等待的线程\n  GuardedObject.fireEvent(\n    msg.id, msg);\n}\n<\/code><\/pre><h2>总结<\/h2><p>Guarded Suspension模式本质上是一种等待唤醒机制的实现，只不过Guarded Suspension模式将其规范化了。规范化的好处是你无需重头思考如何实现，也无需担心实现程序的可理解性问题，同时也能避免一不小心写出个Bug来。但Guarded Suspension模式在解决实际问题的时候，往往还是需要扩展的，扩展的方式有很多，本篇文章就直接对GuardedObject的功能进行了增强，Dubbo中DefaultFuture这个类也是采用的这种方式，你可以对比着来看，相信对DefaultFuture的实现原理会理解得更透彻。当然，你也可以创建新的类来实现对Guarded Suspension模式的扩展。<\/p><p>Guarded Suspension模式也常被称作Guarded Wait模式、Spin Lock模式（因为使用了while循环去等待），这些名字都很形象，不过它还有一个更形象的非官方名字：多线程版本的if。单线程场景中，if语句是不需要等待的，因为在只有一个线程的条件下，如果这个线程被阻塞，那就没有其他活动线程了，这意味着if判断条件的结果也不会发生变化了。但是多线程场景中，等待就变得有意义了，这种场景下，if判断条件的结果是可能发生变化的。所以，用“多线程版本的if”来理解这个模式会更简单。<\/p><h2>课后思考<\/h2><p>有同学觉得用done.await()还要加锁，太啰嗦，还不如直接使用sleep()方法，下面是他的实现，你觉得他的写法正确吗？<\/p><pre><code>\/\/获取受保护对象  \nT get(Predicate&lt;T&gt; p) {\n  try {\n    while(!p.test(obj)){\n      TimeUnit.SECONDS\n        .sleep(timeout);\n    }\n  }catch(InterruptedException e){\n    throw new RuntimeException(e);\n  }\n  \/\/返回非空的受保护对象\n  return obj;\n}\n\/\/事件通知方法\nvoid onChanged(T obj) {\n  this.obj = obj;\n}\n<\/code><\/pre><p>欢迎在留言区与我分享你的想法，也欢迎你在留言区记录你的思考过程。感谢阅读，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给更多的朋友。<\/p><p><\/p>","footer_cover_data":{"img_url":"","mp_url":"","link_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{},"product_id":100023901,"like_count":134,"had_liked":false,"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/20\/47\/20fec0307714e6780fdcee5a224c7047.mp3","id":94097,"had_viewed":false,"article_title":"31 | Guarded Suspension模式：等待唤醒机制的规范实现","column_bgcolor":"#cbd0de","share":{"content":"当面试时问到多线程、锁的问题，你还是答不上来怎么办？推荐给你《Java 并发编程实战》专栏，带你搞懂并发里的那些Bug问题，全面提升你的并发编程能力，大厂面试绝对不是问题。","title":"王宝令 · Java并发编程实战","poster":"https:\/\/static001.geekbang.org\/resource\/image\/ce\/50\/cebb5cfded54f4bfcca4d75ffe915350.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg"},"is_video_preview":false,"article_summary":"Guarded Suspension模式本质上是一种等待唤醒机制的实现，只不过规范化了。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/f3\/b6\/f3065ae7898a6ffa3ea7268e0ef668b6.jpeg","column_sale_type":2,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"audio_time_arr":{"m":"08","s":"27","h":"00"},"video_time":"","audio_title":"5.8 宝令 31 (1)_01","audio_md5":"20fec0307714e6780fdcee5a224c7047","video_size":0,"text_read_percent":0,"comment_count":65,"cid":159,"article_sharetitle":"Guarded Suspension模式：等待唤醒机制的规范实现","column_is_onboard":true,"article_cshort":"<p>前不久，同事小灰工作中遇到一个问题，他开发了一个Web项目：Web版的文件浏览器，通过它用户可以在浏览器里查看服务器上的目录和文件。这个项目依赖运维部门提供的文件浏览服务，而这个文件浏览服务只支持消息队列（MQ）方式接入。消息队列在互联网大厂中用的非常多，主要用作流量削峰和系统解耦。在这种接入方式中，发送消息和消费结果这两个操作之间是异步的，你可以参考下面的示意图来理解。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/d1\/21\/d1ad5ce1df66d85698308c41e4e93a21.png?wh=1142*393\" alt=\"\"><\/p><center><span class=\"reference\">消息队列（MQ）示意图<\/span><\/center><p>在小灰的这个Web项目中，用户通过浏览器发过来一个请求，会被转换成一个异步消息发送给MQ，等MQ返回结果后，再将这个结果返回至浏览器。小灰同学的问题是：给MQ发送消息的线程是处理Web请求的线程T1，但消费MQ结果的线程并不是线程T1，那线程T1如何等待MQ的返回结果呢？为了便于你理解这个场景，我将其代码化了，示例代码如下。<\/p><pre><code>class Message{\n  String id;\n  String content;\n}\n\/\/该方法可以发送消息\nvoid send(Message msg){\n  \/\/省略相关代码\n}\n\/\/MQ消息返回后会调用该方法\n\/\/该方法的执行线程不同于\n\/\/发送消息的线程\nvoid onMessage(Message msg){\n  \/\/省略相关代码\n}\n\/\/处理浏览器发来的请求\nRespond handleWebReq(){\n  \/\/创建一消息\n  Message msg1 = new \n    Message(&quot;1&quot;,&quot;{...}&quot;);\n  \/\/发送消息\n  send(msg1);\n  \/\/如何等待MQ返回的消息呢？\n  String result = ...;\n}\n<\/code><\/pre><p>看到这里，相信你一定有点似曾相识的感觉，这不就是前面我们在<a href=\"https:\/\/time.geekbang.org\/column\/article\/88487\">《15 | Lock和Condition（下）：Dubbo如何用管程实现异步转同步？》<\/a>中曾介绍过的异步转同步问题吗？仔细分析，的确是这样，不过在那一篇文章中我们只是介绍了最终方案，让你知其然，但是并没有介绍这个方案是如何设计出来的，今天咱们再仔细聊聊这个问题，让你知其所以然，遇到类似问题也能自己设计出方案来。<\/p>","video_width":0,"column_could_sub":true,"article_ctime":1557331200,"score":"51557331200","video_media_map":{},"video_preview":{},"video":0,"video_time_arr":{"m":"","s":"","h":""},"video_total_seconds":0},"extra":{},"error":{}}