{"code":0,"data":{"video_id":"","sku":"100017301","video_cover":"","author_name":"王争","text_read_version":0,"audio_size":12724459,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/06\/8d\/06f9b45611d0c76761550851fdae858d.jpg","subtitles":{},"product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/media\/audio\/3c\/b1\/3cdfbc7fab4f5d264cae3fb5d40be1b1\/ld\/ld.m3u8","chapter_id":"0","column_had_sub":true,"audio_dubber":"冯永吉","is_finished":false,"inline_video_subtitles":{},"like":{"had_done":false,"count":471},"neighbors":{"left":{"id":67856,"article_title":"23 | 二叉树基础（上）：什么样的二叉树适合用数组来存储？"},"right":{"id":68638,"article_title":"25 | 红黑树（上）：为什么工程中都用红黑树这种二叉树？"}},"audio_time":"00:13:17","video_height":0,"rate_percent":0,"article_content":"<p>上一节我们学习了树、二叉树以及二叉树的遍历，今天我们再来学习一种特殊的二叉树，二叉查找树。二叉查找树最大的特点就是，支持动态数据集合的快速插入、删除、查找操作。<\/p><p>我们之前说过，散列表也是支持这些操作的，并且散列表的这些操作比二叉查找树更高效，时间复杂度是O(1)。<strong><span class=\"orange\">既然有了这么高效的散列表，使用二叉树的地方是不是都可以替换成散列表呢？有没有哪些地方是散列表做不了，必须要用二叉树来做的呢？<\/span><\/strong><\/p><p>带着这些问题，我们就来学习今天的内容，二叉查找树！<\/p><h2>二叉查找树（Binary Search Tree）<\/h2><p>二叉查找树是二叉树中最常用的一种类型，也叫二叉搜索树。顾名思义，二叉查找树是为了实现快速查找而生的。不过，它不仅仅支持快速查找一个数据，还支持快速插入、删除一个数据。它是怎么做到这些的呢？<\/p><p>这些都依赖于二叉查找树的特殊结构。<strong>二叉查找树要求，在树中的任意一个节点，其左子树中的每个节点的值，都要小于这个节点的值，而右子树节点的值都大于这个节点的值。<\/strong> 我画了几个二叉查找树的例子，你一看应该就清楚了。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/f3\/ae\/f3bb11b6d4a18f95aa19e11f22b99bae.jpg?wh=1142*515\" alt=\"\"><\/p><p>前面我们讲到，二叉查找树支持快速查找、插入、删除操作，现在我们就依次来看下，这三个操作是如何实现的。<\/p><h3>1.二叉查找树的查找操作<\/h3><p>首先，我们看如何在二叉查找树中查找一个节点。我们先取根节点，如果它等于我们要查找的数据，那就返回。如果要查找的数据比根节点的值小，那就在左子树中递归查找；如果要查找的数据比根节点的值大，那就在右子树中递归查找。<\/p><!-- [[[read_end]]] --><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/96\/2a\/96b3d86ed9b7c4f399e8357ceed0db2a.jpg?wh=1142*616\" alt=\"\"><\/p><p>这里我把查找的代码实现了一下，贴在下面了，结合代码，理解起来会更加容易。<\/p><pre><code>public class BinarySearchTree {\n  private Node tree;\n\n  public Node find(int data) {\n    Node p = tree;\n    while (p != null) {\n      if (data &lt; p.data) p = p.left;\n      else if (data &gt; p.data) p = p.right;\n      else return p;\n    }\n    return null;\n  }\n\n  public static class Node {\n    private int data;\n    private Node left;\n    private Node right;\n\n    public Node(int data) {\n      this.data = data;\n    }\n  }\n}\n<\/code><\/pre><h3>2.二叉查找树的插入操作<\/h3><p>二叉查找树的插入过程有点类似查找操作。新插入的数据一般都是在叶子节点上，所以我们只需要从根节点开始，依次比较要插入的数据和节点的大小关系。<\/p><p>如果要插入的数据比节点的数据大，并且节点的右子树为空，就将新数据直接插到右子节点的位置；如果不为空，就再递归遍历右子树，查找插入位置。同理，如果要插入的数据比节点数值小，并且节点的左子树为空，就将新数据插入到左子节点的位置；如果不为空，就再递归遍历左子树，查找插入位置。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/da\/c5\/daa9fb557726ee6183c5b80222cfc5c5.jpg?wh=1142*602\" alt=\"\"><\/p><p>同样，插入的代码我也实现了一下，贴在下面，你可以看看。<\/p><pre><code>public void insert(int data) {\n  if (tree == null) {\n    tree = new Node(data);\n    return;\n  }\n\n  Node p = tree;\n  while (p != null) {\n    if (data &gt; p.data) {\n      if (p.right == null) {\n        p.right = new Node(data);\n        return;\n      }\n      p = p.right;\n    } else { \/\/ data &lt; p.data\n      if (p.left == null) {\n        p.left = new Node(data);\n        return;\n      }\n      p = p.left;\n    }\n  }\n}\n<\/code><\/pre><h3>3.二叉查找树的删除操作<\/h3><p>二叉查找树的查找、插入操作都比较简单易懂，但是它的删除操作就比较复杂了 。针对要删除节点的子节点个数的不同，我们需要分三种情况来处理。<\/p><p>第一种情况是，如果要删除的节点没有子节点，我们只需要直接将父节点中，指向要删除节点的指针置为null。比如图中的删除节点55。<\/p><p>第二种情况是，如果要删除的节点只有一个子节点（只有左子节点或者右子节点），我们只需要更新父节点中，指向要删除节点的指针，让它指向要删除节点的子节点就可以了。比如图中的删除节点13。<\/p><p>第三种情况是，如果要删除的节点有两个子节点，这就比较复杂了。我们需要找到这个节点的右子树中的最小节点，把它替换到要删除的节点上。然后再删除掉这个最小节点，因为最小节点肯定没有左子节点（如果有左子结点，那就不是最小节点了），所以，我们可以应用上面两条规则来删除这个最小节点。比如图中的删除节点18。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/29\/2c\/299c615bc2e00dc32225f4d9e3490e2c.jpg?wh=1142*620\" alt=\"\"><\/p><p>老规矩，我还是把删除的代码贴在这里。<\/p><pre><code>public void delete(int data) {\n  Node p = tree; \/\/ p指向要删除的节点，初始化指向根节点\n  Node pp = null; \/\/ pp记录的是p的父节点\n  while (p != null &amp;&amp; p.data != data) {\n    pp = p;\n    if (data &gt; p.data) p = p.right;\n    else p = p.left;\n  }\n  if (p == null) return; \/\/ 没有找到\n\n  \/\/ 要删除的节点有两个子节点\n  if (p.left != null &amp;&amp; p.right != null) { \/\/ 查找右子树中最小节点\n    Node minP = p.right;\n    Node minPP = p; \/\/ minPP表示minP的父节点\n    while (minP.left != null) {\n      minPP = minP;\n      minP = minP.left;\n    }\n    p.data = minP.data; \/\/ 将minP的数据替换到p中\n    p = minP; \/\/ 下面就变成了删除minP了\n    pp = minPP;\n  }\n\n  \/\/ 删除节点是叶子节点或者仅有一个子节点\n  Node child; \/\/ p的子节点\n  if (p.left != null) child = p.left;\n  else if (p.right != null) child = p.right;\n  else child = null;\n\n  if (pp == null) tree = child; \/\/ 删除的是根节点\n  else if (pp.left == p) pp.left = child;\n  else pp.right = child;\n}\n<\/code><\/pre><p>实际上，关于二叉查找树的删除操作，还有个非常简单、取巧的方法，就是单纯将要删除的节点标记为“已删除”，但是并不真正从树中将这个节点去掉。这样原本删除的节点还需要存储在内存中，比较浪费内存空间，但是删除操作就变得简单了很多。而且，这种处理方法也并没有增加插入、查找操作代码实现的难度。<\/p><h3>4.二叉查找树的其他操作<\/h3><p>除了插入、删除、查找操作之外，二叉查找树中还可以支持<strong>快速地查找最大节点和最小节点、前驱节点和后继节点<\/strong>。这些操作我就不一一展示了。我会将相应的代码放到GitHub上，你可以自己先实现一下，然后再去上面看。<\/p><p>二叉查找树除了支持上面几个操作之外，还有一个重要的特性，就是<strong>中序遍历二叉查找树，可以输出有序的数据序列，时间复杂度是O(n)，非常高效<\/strong>。因此，二叉查找树也叫作二叉排序树。<\/p><h2>支持重复数据的二叉查找树<\/h2><p>前面讲二叉查找树的时候，我们默认树中节点存储的都是数字。很多时候，在实际的软件开发中，我们在二叉查找树中存储的，是一个包含很多字段的对象。我们利用对象的某个字段作为键值（key）来构建二叉查找树。我们把对象中的其他字段叫作卫星数据。<\/p><p>前面我们讲的二叉查找树的操作，针对的都是不存在键值相同的情况。那如果存储的两个对象键值相同，这种情况该怎么处理呢？我这里有两种解决方法。<\/p><p>第一种方法比较容易。二叉查找树中每一个节点不仅会存储一个数据，因此我们通过链表和支持动态扩容的数组等数据结构，把值相同的数据都存储在同一个节点上。<\/p><p>第二种方法比较不好理解，不过更加优雅。<\/p><p>每个节点仍然只存储一个数据。在查找插入位置的过程中，如果碰到一个节点的值，与要插入数据的值相同，我们就将这个要插入的数据放到这个节点的右子树，也就是说，把这个新插入的数据当作大于这个节点的值来处理。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/3f\/5f\/3f59a40e3d927f567022918d89590a5f.jpg?wh=1142*555\" alt=\"\"><\/p><p>当要查找数据的时候，遇到值相同的节点，我们并不停止查找操作，而是继续在右子树中查找，直到遇到叶子节点，才停止。这样就可以把键值等于要查找值的所有节点都找出来。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/fb\/ff\/fb7b320efd59a05469d6d6fcf0c98eff.jpg?wh=1142*577\" alt=\"\"><\/p><p>对于删除操作，我们也需要先查找到每个要删除的节点，然后再按前面讲的删除操作的方法，依次删除。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/25\/17\/254a4800703d31612c0af63870260517.jpg?wh=1142*608\" alt=\"\"><\/p><h2>二叉查找树的时间复杂度分析<\/h2><p>好了，对于二叉查找树常用操作的实现方式，你应该掌握得差不多了。现在，我们来分析一下，二叉查找树的插入、删除、查找操作的时间复杂度。<\/p><p>实际上，二叉查找树的形态各式各样。比如这个图中，对于同一组数据，我们构造了三种二叉查找树。它们的查找、插入、删除操作的执行效率都是不一样的。图中第一种二叉查找树，根节点的左右子树极度不平衡，已经退化成了链表，所以查找的时间复杂度就变成了O(n)。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/e3\/d9\/e3d9b2977d350526d2156f01960383d9.jpg?wh=1142*765\" alt=\"\"><\/p><p>我刚刚其实分析了一种最糟糕的情况，我们现在来分析一个最理想的情况，二叉查找树是一棵完全二叉树（或满二叉树）。这个时候，插入、删除、查找的时间复杂度是多少呢？<\/p><p>从我前面的例子、图，以及还有代码来看，不管操作是插入、删除还是查找，<strong>时间复杂度<strong><strong>其实<\/strong><\/strong>都跟树的高度成正比，也就是O(height)<\/strong>。既然这样，现在问题就转变成另外一个了，也就是，如何求一棵包含n个节点的完全二叉树的高度？<\/p><p>树的高度就等于最大层数减一，为了方便计算，我们转换成层来表示。从图中可以看出，包含n个节点的完全二叉树中，第一层包含1个节点，第二层包含2个节点，第三层包含4个节点，依次类推，下面一层节点个数是上一层的2倍，第K层包含的节点个数就是2^(K-1)。<\/p><p>不过，对于完全二叉树来说，最后一层的节点个数有点儿不遵守上面的规律了。它包含的节点个数在1个到2^(L-1)个之间（我们假设最大层数是L）。如果我们把每一层的节点个数加起来就是总的节点个数n。也就是说，如果节点的个数是n，那么n满足这样一个关系：<\/p><pre><code>n &gt;= 1+2+4+8+...+2^(L-2)+1\nn &lt;= 1+2+4+8+...+2^(L-2)+2^(L-1)\n<\/code><\/pre><p>借助等比数列的求和公式，我们可以计算出，L的范围是[log<sub>2<\/sub>(n+1), log<sub>2<\/sub>n +1]。完全二叉树的层数小于等于log<sub>2<\/sub>n +1，也就是说，完全二叉树的高度小于等于log<sub>2<\/sub>n。<\/p><p>显然，极度不平衡的二叉查找树，它的查找性能肯定不能满足我们的需求。我们需要构建一种不管怎么删除、插入数据，在任何时候，都能保持任意节点左右子树都比较平衡的二叉查找树，这就是我们下一节课要详细讲的，一种特殊的二叉查找树，平衡二叉查找树。平衡二叉查找树的高度接近logn，所以插入、删除、查找操作的时间复杂度也比较稳定，是O(logn)。<\/p><h2>解答开篇<\/h2><p>我们在散列表那节中讲过，散列表的插入、删除、查找操作的时间复杂度可以做到常量级的O(1)，非常高效。而二叉查找树在比较平衡的情况下，插入、删除、查找操作时间复杂度才是O(logn)，相对散列表，好像并没有什么优势，那我们为什么还要用二叉查找树呢？<\/p><p>我认为有下面几个原因：<\/p><p>第一，散列表中的数据是无序存储的，如果要输出有序的数据，需要先进行排序。而对于二叉查找树来说，我们只需要中序遍历，就可以在O(n)的时间复杂度内，输出有序的数据序列。<\/p><p>第二，散列表扩容耗时很多，而且当遇到散列冲突时，性能不稳定，尽管二叉查找树的性能不稳定，但是在工程中，我们最常用的平衡二叉查找树的性能非常稳定，时间复杂度稳定在O(logn)。<\/p><p>第三，笼统地来说，尽管散列表的查找等操作的时间复杂度是常量级的，但因为哈希冲突的存在，这个常量不一定比logn小，所以实际的查找速度可能不一定比O(logn)快。加上哈希函数的耗时，也不一定就比平衡二叉查找树的效率高。<\/p><p>第四，散列表的构造比二叉查找树要复杂，需要考虑的东西很多。比如散列函数的设计、冲突解决办法、扩容、缩容等。平衡二叉查找树只需要考虑平衡性这一个问题，而且这个问题的解决方案比较成熟、固定。<\/p><p>最后，为了避免过多的散列冲突，散列表装载因子不能太大，特别是基于开放寻址法解决冲突的散列表，不然会浪费一定的存储空间。<\/p><p>综合这几点，平衡二叉查找树在某些方面还是优于散列表的，所以，这两者的存在并不冲突。我们在实际的开发过程中，需要结合具体的需求来选择使用哪一个。<\/p><h2>内容小结<\/h2><p>今天我们学习了一种特殊的二叉树，二叉查找树。它支持快速地查找、插入、删除操作。<\/p><p>二叉查找树中，每个节点的值都大于左子树节点的值，小于右子树节点的值。不过，这只是针对没有重复数据的情况。对于存在重复数据的二叉查找树，我介绍了两种构建方法，一种是让每个节点存储多个值相同的数据；另一种是，每个节点中存储一个数据。针对这种情况，我们只需要稍加改造原来的插入、删除、查找操作即可。<\/p><p>在二叉查找树中，查找、插入、删除等很多操作的时间复杂度都跟树的高度成正比。两个极端情况的时间复杂度分别是O(n)和O(logn)，分别对应二叉树退化成链表的情况和完全二叉树。<\/p><p>为了避免时间复杂度的退化，针对二叉查找树，我们又设计了一种更加复杂的树，平衡二叉查找树，时间复杂度可以做到稳定的O(logn)，下一节我们具体来讲。<\/p><h2>课后思考<\/h2><p>今天我讲了二叉树高度的理论分析方法，给出了粗略的数量级。如何通过编程，求出一棵给定二叉树的确切高度呢？<\/p><p>欢迎留言和我分享，我会第一时间给你反馈。<\/p><hr><p><span class=\"orange\">我已将本节内容相关的详细代码更新到GitHub，<a href=\"https:\/\/github.com\/wangzheng0822\/algo\">戳此<\/a>即可查看。<\/span><\/p>","footer_cover_data":{"img_url":"","mp_url":"","link_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{},"product_id":100017301,"like_count":528,"had_liked":false,"article_subtitle":"无","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/3c\/b1\/3cdfbc7fab4f5d264cae3fb5d40be1b1.mp3","id":68334,"had_viewed":false,"article_title":"24 | 二叉树基础（下）：有了如此高效的散列表，为什么还需要二叉树？","column_bgcolor":"#9b7a7a","share":{"content":"为工程师量身打造的数据结构与算法私教课","title":"王争 · 数据结构与算法之美","poster":"https:\/\/static001.geekbang.org\/resource\/image\/0b\/0c\/0b646824c9d90e894322cfedd797630c.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/11\/5b\/11a3a5aa2f5879ec88b284044bacd55b.jpg"},"is_video_preview":false,"article_summary":"我们今天来学习二叉查找树。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/6c\/5a\/6c646e95485b9c0f64d6e0958bbbb05a.jpeg","column_sale_type":2,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/11\/5b\/11a3a5aa2f5879ec88b284044bacd55b.jpg","column_id":126,"audio_time_arr":{"m":"13","s":"17","h":"00"},"video_time":"","audio_title":"算法迭代_音频-24","audio_md5":"3cdfbc7fab4f5d264cae3fb5d40be1b1","video_size":0,"text_read_percent":0,"comment_count":231,"cid":126,"article_sharetitle":"二叉树基础（下）：有了如此高效的散列表，为什么还需要二叉树？","column_is_onboard":true,"article_cshort":"<p>上一节我们学习了树、二叉树以及二叉树的遍历，今天我们再来学习一种特殊的二叉树，二叉查找树。二叉查找树最大的特点就是，支持动态数据集合的快速插入、删除、查找操作。<\/p><p>我们之前说过，散列表也是支持这些操作的，并且散列表的这些操作比二叉查找树更高效，时间复杂度是O(1)。<strong><span class=\"orange\">既然有了这么高效的散列表，使用二叉树的地方是不是都可以替换成散列表呢？有没有哪些地方是散列表做不了，必须要用二叉树来做的呢？<\/span><\/strong><\/p><p>带着这些问题，我们就来学习今天的内容，二叉查找树！<\/p><h2>二叉查找树（Binary Search Tree）<\/h2><p>二叉查找树是二叉树中最常用的一种类型，也叫二叉搜索树。顾名思义，二叉查找树是为了实现快速查找而生的。不过，它不仅仅支持快速查找一个数据，还支持快速插入、删除一个数据。它是怎么做到这些的呢？<\/p><p>这些都依赖于二叉查找树的特殊结构。<strong>二叉查找树要求，在树中的任意一个节点，其左子树中的每个节点的值，都要小于这个节点的值，而右子树节点的值都大于这个节点的值。<\/strong> 我画了几个二叉查找树的例子，你一看应该就清楚了。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/f3\/ae\/f3bb11b6d4a18f95aa19e11f22b99bae.jpg?wh=1142*515\" alt=\"\"><\/p><p>前面我们讲到，二叉查找树支持快速查找、插入、删除操作，现在我们就依次来看下，这三个操作是如何实现的。<\/p><h3>1.二叉查找树的查找操作<\/h3><p>首先，我们看如何在二叉查找树中查找一个节点。我们先取根节点，如果它等于我们要查找的数据，那就返回。如果要查找的数据比根节点的值小，那就在左子树中递归查找；如果要查找的数据比根节点的值大，那就在右子树中递归查找。<\/p>","video_width":0,"column_could_sub":true,"article_ctime":1542124800,"score":"31542124800","video_media_map":{},"video_preview":{},"video":0,"video_time_arr":{"m":"","s":"","h":""},"video_total_seconds":0},"extra":{},"error":{}}