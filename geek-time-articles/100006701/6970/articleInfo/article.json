{"code":0,"data":{"video_id":"","sku":"100006701","video_cover":"","author_name":"杨晓峰","text_read_version":0,"audio_size":4989337,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/5d\/4c\/5dbfe1f0ea078b55691d9195fae20c4c.jpg","subtitles":{},"product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/media\/audio\/38\/67\/3842eb094a8cf102f2ad7765b69a1e67\/ld\/ld.m3u8","chapter_id":"0","column_had_sub":true,"audio_dubber":"黄洲君","is_finished":false,"inline_video_subtitles":{},"like":{"had_done":false,"count":593},"neighbors":{"left":{"id":6906,"article_title":"第3讲 | 谈谈final、finally、 finalize有什么不同？"},"right":{"id":7349,"article_title":"第5讲 | String、StringBuffer、StringBuilder有什么区别？"}},"audio_time":"00:10:24","video_height":0,"rate_percent":0,"article_content":"<p>在Java语言中，除了原始数据类型的变量，其他所有都是所谓的引用类型，指向各种不同的对象，理解引用对于掌握Java对象生命周期和JVM内部相关机制非常有帮助。<\/p>\n<p>今天我要问你的问题是，<span class=\"orange\">强引用、软引用、弱引用、幻象引用有什么区别？具体使用场景是什么？<\/span><\/p>\n<h2>典型回答<\/h2>\n<p>不同的引用类型，主要体现的是<strong>对象不同的可达性（reachable）状态和对垃圾收集的影响<\/strong>。<\/p>\n<p>所谓强引用（“Strong” Reference），就是我们最常见的普通对象引用，只要还有强引用指向一个对象，就能表明对象还“活着”，垃圾收集器不会碰这种对象。对于一个普通的对象，如果没有其他的引用关系，只要超过了引用的作用域或者显式地将相应（强）引用赋值为null，就是可以被垃圾收集的了，当然具体回收时机还是要看垃圾收集策略。<\/p>\n<p>软引用（SoftReference），是一种相对强引用弱化一些的引用，可以让对象豁免一些垃圾收集，只有当JVM认为内存不足时，才会去试图回收软引用指向的对象。JVM会确保在抛出OutOfMemoryError之前，清理软引用指向的对象。软引用通常用来实现内存敏感的缓存，如果还有空闲内存，就可以暂时保留缓存，当内存不足时清理掉，这样就保证了使用缓存的同时，不会耗尽内存。<\/p>\n<p>弱引用（WeakReference）并不能使对象豁免垃圾收集，仅仅是提供一种访问在弱引用状态下对象的途径。这就可以用来构建一种没有特定约束的关系，比如，维护一种非强制性的映射关系，如果试图获取时对象还在，就使用它，否则重现实例化。它同样是很多缓存实现的选择。<\/p>\n<!-- [[[read_end]]] -->\n<p>对于幻象引用，有时候也翻译成虚引用，你不能通过它访问对象。幻象引用仅仅是提供了一种确保对象被finalize以后，做某些事情的机制，比如，通常用来做所谓的Post-Mortem清理机制，我在专栏上一讲中介绍的Java平台自身Cleaner机制等，也有人利用幻象引用监控对象的创建和销毁。<\/p>\n<h2>考点分析<\/h2>\n<p>这道面试题，属于既偏门又非常高频的一道题目。说它偏门，是因为在大多数应用开发中，很少直接操作各种不同引用，虽然我们使用的类库、框架可能利用了其机制。它被频繁问到，是因为这是一个综合性的题目，既考察了我们对基础概念的理解，也考察了对底层对象生命周期、垃圾收集机制等的掌握。<\/p>\n<p>充分理解这些引用，对于我们设计可靠的缓存等框架，或者诊断应用OOM等问题，会很有帮助。比如，诊断MySQL connector-j驱动在特定模式下（useCompression=true）的内存泄漏问题，就需要我们理解怎么排查幻象引用的堆积问题。<\/p>\n<h2>知识扩展<\/h2>\n<p>1.对象可达性状态流转分析<\/p>\n<p>首先，请你看下面流程图，我这里简单总结了对象生命周期和不同可达性状态，以及不同状态可能的改变关系，可能未必100%严谨，来阐述下可达性的变化。<\/p>\n<p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/36\/b0\/36d3c7b158eda9421ef32463cb4d4fb0.png?wh=497*585\" alt=\"\" \/><\/p>\n<p>我来解释一下上图的具体状态，这是Java定义的不同可达性级别（reachability level），具体如下：<\/p>\n<ul>\n<li>\n<p>强可达（Strongly Reachable），就是当一个对象可以有一个或多个线程可以不通过各种引用访问到的情况。比如，我们新创建一个对象，那么创建它的线程对它就是强可达。<\/p>\n<\/li>\n<li>\n<p>软可达（Softly Reachable），就是当我们只能通过软引用才能访问到对象的状态。<\/p>\n<\/li>\n<li>\n<p>弱可达（Weakly Reachable），类似前面提到的，就是无法通过强引用或者软引用访问，只能通过弱引用访问时的状态。这是十分临近finalize状态的时机，当弱引用被清除的时候，就符合finalize的条件了。<\/p>\n<\/li>\n<li>\n<p>幻象可达（Phantom Reachable），上面流程图已经很直观了，就是没有强、软、弱引用关联，并且finalize过了，只有幻象引用指向这个对象的时候。<\/p>\n<\/li>\n<li>\n<p>当然，还有一个最后的状态，就是不可达（unreachable），意味着对象可以被清除了。<\/p>\n<\/li>\n<\/ul>\n<p>判断对象可达性，是JVM垃圾收集器决定如何处理对象的一部分考虑。<\/p>\n<p>所有引用类型，都是抽象类java.lang.ref.Reference的子类，你可能注意到它提供了get()方法：<\/p>\n<p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/ba\/3e\/bae702d46c665e12113f5abd876eb53e.png?wh=661*41\" alt=\"\" \/><\/p>\n<p>除了幻象引用（因为get永远返回null），如果对象还没有被销毁，都可以通过get方法获取原有对象。这意味着，利用软引用和弱引用，我们可以将访问到的对象，重新指向强引用，也就是人为的改变了对象的可达性状态！这也是为什么我在上面图里有些地方画了双向箭头。<\/p>\n<p>所以，对于软引用、弱引用之类，垃圾收集器可能会存在二次确认的问题，以保证处于弱引用状态的对象，没有改变为强引用。<\/p>\n<p>但是，你觉得这里有没有可能出现什么问题呢？<\/p>\n<p>不错，如果我们错误的保持了强引用（比如，赋值给了static变量），那么对象可能就没有机会变回类似弱引用的可达性状态了，就会产生内存泄漏。所以，检查弱引用指向对象是否被垃圾收集，也是诊断是否有特定内存泄漏的一个思路，如果我们的框架使用到弱引用又怀疑有内存泄漏，就可以从这个角度检查。<\/p>\n<p>2.引用队列（ReferenceQueue）使用<\/p>\n<p>谈到各种引用的编程，就必然要提到引用队列。我们在创建各种引用并关联到相应对象时，可以选择是否需要关联引用队列，JVM会在特定时机将引用enqueue到队列里，我们可以从队列里获取引用（remove方法在这里实际是有获取的意思）进行相关后续逻辑。尤其是幻象引用，get方法只返回null，如果再不指定引用队列，基本就没有意义了。看看下面的示例代码。利用引用队列，我们可以在对象处于相应状态时（对于幻象引用，就是前面说的被finalize了，处于幻象可达状态），执行后期处理逻辑。<\/p>\n<pre><code>Object counter = new Object();\nReferenceQueue refQueue = new ReferenceQueue&lt;&gt;();\nPhantomReference&lt;Object&gt; p = new PhantomReference&lt;&gt;(counter, refQueue);\ncounter = null;\nSystem.gc();\ntry {\n    \/\/ Remove是一个阻塞方法，可以指定timeout，或者选择一直阻塞\n    Reference&lt;Object&gt; ref = refQueue.remove(1000L);\n    if (ref != null) {\n        \/\/ do something\n    }\n} catch (InterruptedException e) {\n    \/\/ Handle it\n}\n<\/code><\/pre>\n<p>3.显式地影响软引用垃圾收集<\/p>\n<p>前面泛泛提到了引用对垃圾收集的影响，尤其是软引用，到底JVM内部是怎么处理它的，其实并不是非常明确。那么我们能不能使用什么方法来影响软引用的垃圾收集呢？<\/p>\n<p>答案是有的。软引用通常会在最后一次引用后，还能保持一段时间，默认值是根据堆剩余空间计算的（以M bytes为单位）。从Java  1.3.1开始，提供了-XX:SoftRefLRUPolicyMSPerMB参数，我们可以以毫秒（milliseconds）为单位设置。比如，下面这个示例就是设置为3秒（3000毫秒）。<\/p>\n<pre><code>-XX:SoftRefLRUPolicyMSPerMB=3000\n<\/code><\/pre>\n<p>这个剩余空间，其实会受不同JVM模式影响，对于Client模式，比如通常的Windows 32 bit JDK，剩余空间是计算当前堆里空闲的大小，所以更加倾向于回收；而对于server模式JVM，则是根据-Xmx指定的最大值来计算。<\/p>\n<p>本质上，这个行为还是个黑盒，取决于JVM实现，即使是上面提到的参数，在新版的JDK上也未必有效，另外Client模式的JDK已经逐步退出历史舞台。所以在我们应用时，可以参考类似设置，但不要过于依赖它。<\/p>\n<p>4.诊断JVM引用情况<\/p>\n<p>如果你怀疑应用存在引用（或finalize）导致的回收问题，可以有很多工具或者选项可供选择，比如HotSpot JVM自身便提供了明确的选项（PrintReferenceGC）去获取相关信息，我指定了下面选项去使用JDK 8运行一个样例应用：<\/p>\n<pre><code>-XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintReferenceGC\n<\/code><\/pre>\n<p>这是JDK 8使用ParrallelGC收集的垃圾收集日志，各种引用数量非常清晰。<\/p>\n<pre><code>0.403: [GC (Allocation Failure) 0.871: [SoftReference, 0 refs, 0.0000393 secs]0.871: [WeakReference, 8 refs, 0.0000138 secs]0.871: [FinalReference, 4 refs, 0.0000094 secs]0.871: [PhantomReference, 0 refs, 0 refs, 0.0000085 secs]0.871: [JNI Weak Reference, 0.0000071 secs][PSYoungGen: 76272K-&gt;10720K(141824K)] 128286K-&gt;128422K(316928K), 0.4683919 secs] [Times: user=1.17 sys=0.03, real=0.47 secs] \n<\/code><\/pre>\n<p><strong>注意：JDK 9对JVM和垃圾收集日志进行了广泛的重构<\/strong>，类似PrintGCTimeStamps和PrintReferenceGC已经不再存在，我在专栏后面的垃圾收集主题里会更加系统的阐述。<\/p>\n<p>5.Reachability Fence<\/p>\n<p>除了我前面介绍的几种基本引用类型，我们也可以通过底层API来达到强引用的效果，这就是所谓的设置<strong>reachability fence<\/strong>。<\/p>\n<p>为什么需要这种机制呢？考虑一下这样的场景，按照Java语言规范，如果一个对象没有指向强引用，就符合垃圾收集的标准，有些时候，对象本身并没有强引用，但是也许它的部分属性还在被使用，这样就导致诡异的问题，所以我们需要一个方法，在没有强引用情况下，通知JVM对象是在被使用的。说起来有点绕，我们来看看Java 9中提供的案例。<\/p>\n<pre><code>class Resource {\n private static ExternalResource[] externalResourceArray = ...\n int myIndex; Resource(...) {\n     myIndex = ...\n     externalResourceArray[myIndex] = ...;\n     ...\n }\n protected void finalize() {\n     externalResourceArray[myIndex] = null;\n     ...\n }\n public void action() {\n try {\n     \/\/ 需要被保护的代码\n     int i = myIndex;\n     Resource.update(externalResourceArray[i]);\n } finally {\n     \/\/ 调用reachbilityFence，明确保障对象strongly reachable\n     Reference.reachabilityFence(this);\n }\n }\n private static void update(ExternalResource ext) {\n    ext.status = ...;\n }\n} \n<\/code><\/pre>\n<p>方法action的执行，依赖于对象的部分属性，所以被特定保护了起来。否则，如果我们在代码中像下面这样调用，那么就可能会出现困扰，因为没有强引用指向我们创建出来的Resource对象，JVM对它进行finalize操作是完全合法的。<\/p>\n<pre><code>new Resource().action()\n<\/code><\/pre>\n<p>类似的书写结构，在异步编程中似乎是很普遍的，因为异步编程中往往不会用传统的“执行-&gt;返回-&gt;使用”的结构。<\/p>\n<p>在Java 9之前，实现类似功能相对比较繁琐，有的时候需要采取一些比较隐晦的小技巧。幸好，java.lang.ref.Reference给我们提供了新方法，它是JEP 193: Variable Handles的一部分，将Java平台底层的一些能力暴露出来：<\/p>\n<pre><code>static void reachabilityFence(Object ref)\n<\/code><\/pre>\n<p>在JDK源码中，reachabilityFence大多使用在Executors或者类似新的HTTP\/2客户端代码中，大部分都是异步调用的情况。编程中，可以按照上面这个例子，将需要reachability保障的代码段利用try-finally包围起来，在finally里明确声明对象强可达。<\/p>\n<p>今天，我总结了Java语言提供的几种引用类型、相应可达状态以及对于JVM工作的意义，并分析了引用队列使用的一些实际情况，最后介绍了在新的编程模式下，如何利用API去保障对象不被意外回收，希望对你有所帮助。<\/p>\n<h2>一课一练<\/h2>\n<p>关于今天我们讨论的题目你做到心中有数了吗？给你留一道练习题，你能从自己的产品或者第三方类库中找到使用各种引用的案例吗？它们都试图解决什么问题？<\/p>\n<p>请你在留言区写写你的答案，我会选出经过认真思考的留言，送给你一份学习鼓励金，欢迎你与我一起讨论。<\/p>\n<p>你的朋友是不是也在准备面试呢？你可以“请朋友读”，把今天的题目分享出去，或许你能帮到他。<\/p>\n","footer_cover_data":{"img_url":"","mp_url":"","link_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{},"product_id":100006701,"like_count":650,"had_liked":false,"article_subtitle":"无","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/38\/67\/3842eb094a8cf102f2ad7765b69a1e67.mp3","id":6970,"had_viewed":false,"article_title":"第4讲 | 强引用、软引用、弱引用、幻象引用有什么区别？","column_bgcolor":"#b2b7cf","share":{"content":"前Oracle首席工程师带你修炼Java内功","title":"杨晓峰 · Java核心技术面试精讲","poster":"https:\/\/static001.geekbang.org\/resource\/image\/97\/c5\/97ef24b25838514cb095ceadf2470bc5.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/6f\/51\/6f1829aeae4e740e949340c663834551.jpg"},"is_video_preview":false,"article_summary":"在Java语言中，除了原始数据类型的变量，其他所有都是所谓的引用类型。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/f7\/15\/f780eb0be605120219dc60d7e3ef6715.jpeg","column_sale_type":2,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/6f\/51\/6f1829aeae4e740e949340c663834551.jpg","column_id":82,"audio_time_arr":{"m":"10","s":"24","h":"00"},"video_time":"","audio_title":"杨晓峰04","audio_md5":"3842eb094a8cf102f2ad7765b69a1e67","video_size":0,"text_read_percent":0,"comment_count":148,"cid":82,"article_sharetitle":"强引用、软引用、弱引用、幻象引用有什么区别？","column_is_onboard":true,"article_cshort":"<p>在Java语言中，除了原始数据类型的变量，其他所有都是所谓的引用类型，指向各种不同的对象，理解引用对于掌握Java对象生命周期和JVM内部相关机制非常有帮助。<\/p>\n<p>今天我要问你的问题是，<span class=\"orange\">强引用、软引用、弱引用、幻象引用有什么区别？具体使用场景是什么？<\/span><\/p>\n<h2>典型回答<\/h2>\n<p>不同的引用类型，主要体现的是<strong>对象不同的可达性（reachable）状态和对垃圾收集的影响<\/strong>。<\/p>\n<p>所谓强引用（“Strong” Reference），就是我们最常见的普通对象引用，只要还有强引用指向一个对象，就能表明对象还“活着”，垃圾收集器不会碰这种对象。对于一个普通的对象，如果没有其他的引用关系，只要超过了引用的作用域或者显式地将相应（强）引用赋值为null，就是可以被垃圾收集的了，当然具体回收时机还是要看垃圾收集策略。<\/p>\n<p>软引用（SoftReference），是一种相对强引用弱化一些的引用，可以让对象豁免一些垃圾收集，只有当JVM认为内存不足时，才会去试图回收软引用指向的对象。JVM会确保在抛出OutOfMemoryError之前，清理软引用指向的对象。软引用通常用来实现内存敏感的缓存，如果还有空闲内存，就可以暂时保留缓存，当内存不足时清理掉，这样就保证了使用缓存的同时，不会耗尽内存。<\/p>\n<p>弱引用（WeakReference）并不能使对象豁免垃圾收集，仅仅是提供一种访问在弱引用状态下对象的途径。这就可以用来构建一种没有特定约束的关系，比如，维护一种非强制性的映射关系，如果试图获取时对象还在，就使用它，否则重现实例化。它同样是很多缓存实现的选择。<\/p>\n","video_width":0,"column_could_sub":true,"article_ctime":1526079600,"score":"21526079600","video_media_map":{},"video_preview":{},"video":0,"video_time_arr":{"m":"","s":"","h":""},"video_total_seconds":0},"extra":{},"error":{}}