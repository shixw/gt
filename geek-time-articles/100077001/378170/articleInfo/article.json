{"code":0,"data":{"video_id":"","sku":"100077001","video_cover":"","author_name":"傅健","text_read_version":0,"audio_size":11278655,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/b6\/43\/b6df3a29b42eb743c94123bb5ab13843.jpg","subtitles":{},"product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/media\/audio\/fa\/89\/fa34ed5fda05ee8b514e130c66babc89\/ld\/ld.m3u8","chapter_id":"0","column_had_sub":true,"audio_dubber":"傅健","is_finished":false,"inline_video_subtitles":{},"like":{"had_done":false,"count":3},"neighbors":{"left":{"id":377167,"article_title":"14 | Spring Web 过滤器使用常见错误（下）"},"right":{"id":378676,"article_title":"16｜Spring Exception 常见错误"}},"audio_time":"00:11:46","video_height":0,"rate_percent":0,"article_content":"<p>你好，我是傅健。前面几节课我们学习了 Spring Web 开发中请求的解析以及过滤器的使用。这一节课，我们接着讲 Spring Security 的应用。<\/p><p>实际上，在 Spring 中，对于 Security 的处理基本都是借助于过滤器来协助完成的。粗略使用起来不会太难，但是 Security 本身是个非常庞大的话题，所以这里面遇到的错误自然不会少。好在使用 Spring Security 的应用和开发者实在是太多了，以致于时至今日，也没有太多明显的坑了。<\/p><p>在今天的课程里，我会带着你快速学习下两个典型的错误，相信掌握它们，关于 Spring Security 的雷区你就不需要太担心了。不过需要说明的是，授权的种类千千万，这里为了让你避免纠缠于业务逻辑实现，我讲解的案例都将直接基于 Spring Boot 使用默认的 Spring Security 实现来讲解。接下来我们正式进入课程的学习。<\/p><h2>案例 1：遗忘 PasswordEncoder<\/h2><p>当我们第一次尝试使用 Spring Security 时，我们经常会忘记定义一个 PasswordEncoder。因为这在 Spring Security 旧版本中是允许的。而一旦使用了新版本，则必须要提供一个 PasswordEncoder。这里我们可以先写一个反例来感受下：<\/p><!-- [[[read_end]]] --><p>首先我们在 Spring Boot 项目中直接开启 Spring Security：<\/p><pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-security&lt;\/artifactId&gt;\n&lt;\/dependency&gt;\n<\/code><\/pre><p>添加完这段依赖后，Spring Security 就已经生效了。然后我们配置下安全策略，如下：<\/p><pre><code>@Configuration\npublic class MyWebSecurityConfig extends WebSecurityConfigurerAdapter {\n\/\/\n\/\/    @Bean\n\/\/    public PasswordEncoder passwordEncoder() {\n\/\/        return new PasswordEncoder() {\n\/\/            @Override\n\/\/            public String encode(CharSequence charSequence) {\n\/\/                return charSequence.toString();\n\/\/            }\n\/\/\n\/\/            @Override\n\/\/            public boolean matches(CharSequence charSequence, String \/\/            s) {\n\/\/                return Objects.equals(charSequence.toString(), s);\n\/\/            }\n\/\/        };\n\/\/    }\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth.inMemoryAuthentication()\n                .withUser(&quot;admin&quot;).password(&quot;pass&quot;).roles(&quot;ADMIN&quot;);\n\n    }\n\n    \/\/ 配置 URL 对应的访问权限\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.authorizeRequests()\n                .antMatchers(&quot;\/admin\/**&quot;).hasRole(&quot;ADMIN&quot;)\n                .anyRequest().authenticated()\n                .and()\n                .formLogin().loginProcessingUrl(&quot;\/login&quot;).permitAll()\n                .and().csrf().disable();\n    }\n}\n<\/code><\/pre><p>这里，我们故意“注释”掉 PasswordEncoder 类型 Bean 的定义。然后我们定义一个 SpringApplication 启动程序来启动服务，我们会发现启动成功了：<\/p><blockquote>\n<p>INFO 8628 --- [ restartedMain] c.s.p.web.security.example1.Application : Started Application in 3.637 seconds (JVM running for 4.499)<\/p>\n<\/blockquote><p>但是当我们发送一个请求时（例如 <a href=\"http:\/\/localhost:8080\/admin\">http:\/\/localhost:8080\/admin<\/a> ），就会报错java.lang.IllegalArgumentException: There is no PasswordEncoder mapped for the id \"null\"，具体错误堆栈信息如下：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/c8\/31\/c89d57f20fd152dc3a224e9c16025131.png?wh=1257*250\" alt=\"\"><\/p><p>所以，如果我们不按照最新版本的 Spring Security 教程操作，就很容易忘记 PasswordEncoder 这件事。那么为什么缺少它就会报错，它的作用又在哪？接下来我们具体解析下。<\/p><h3>案例解析<\/h3><p>我们可以反思下，为什么需要一个 PasswordEncoder。实际上，这是安全保护的范畴。<\/p><p>假设我们没有这样的一个东西，那么当用户输入登录密码之后，我们如何判断密码和内存或数据库中存储的密码是否一致呢？假设就是简单比较下是否相等，那么必然要求存储起来的密码是非加密的，这样其实就存在密码泄露的风险了。<\/p><p>反过来思考，为了安全，我们一般都会将密码加密存储起来。那么当用户输入密码时，我们就不是简单的字符串比较了。我们需要根据存储密码的加密算法来比较用户输入的密码和存储的密码是否一致。所以我们需要一个 PasswordEncoder 来满足这个需求。这就是为什么我们需要自定义一个 PasswordEncoder 的原因。<\/p><p>再看下它的两个关键方法 encode() 和 matches()，相信你就能理解它们的作用了。<\/p><p>思考下，假设我们默认提供一个出来并集成到 Spring Security 里面去，那么很可能隐藏错误，所以还是强制要求起来比较合适。<\/p><p>我们再从源码上看下 \"no PasswordEncoder\" 异常是如何被抛出的？当我们不指定PasswordEncoder去启动我们的案例程序时，我们实际指定了一个默认的PasswordEncoder，这点我们可以从构造器DaoAuthenticationProvider看出来：<\/p><pre><code>public DaoAuthenticationProvider() {\nsetPasswordEncoder(PasswordEncoderFactories.createDelegatingPasswordEncoder());\n}\n<\/code><\/pre><p>我们可以看下PasswordEncoderFactories.createDelegatingPasswordEncoder()的实现：<\/p><pre><code>public static PasswordEncoder createDelegatingPasswordEncoder() {\n   String encodingId = &quot;bcrypt&quot;;\n   Map&lt;String, PasswordEncoder&gt; encoders = new HashMap&lt;&gt;();\n   encoders.put(encodingId, new BCryptPasswordEncoder());\n   encoders.put(&quot;ldap&quot;, new org.springframework.security.crypto.password.LdapShaPasswordEncoder());\n   encoders.put(&quot;MD4&quot;, new org.springframework.security.crypto.password.Md4PasswordEncoder());\n   encoders.put(&quot;MD5&quot;, new org.springframework.security.crypto.password.MessageDigestPasswordEncoder(&quot;MD5&quot;));\n   encoders.put(&quot;noop&quot;, org.springframework.security.crypto.password.NoOpPasswordEncoder.getInstance());\n   encoders.put(&quot;pbkdf2&quot;, new Pbkdf2PasswordEncoder());\n   encoders.put(&quot;scrypt&quot;, new SCryptPasswordEncoder());\n   encoders.put(&quot;SHA-1&quot;, new org.springframework.security.crypto.password.MessageDigestPasswordEncoder(&quot;SHA-1&quot;));\n   encoders.put(&quot;SHA-256&quot;, new org.springframework.security.crypto.password.MessageDigestPasswordEncoder(&quot;SHA-256&quot;));\n   encoders.put(&quot;sha256&quot;, new org.springframework.security.crypto.password.StandardPasswordEncoder());\n   encoders.put(&quot;argon2&quot;, new Argon2PasswordEncoder());\n\n   return new DelegatingPasswordEncoder(encodingId, encoders);\n}\n<\/code><\/pre><p>我们可以换一个视角来看下这个DelegatingPasswordEncoder长什么样：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/2e\/7c\/2ebd57419d485223700db471c7d2fd7c.png?wh=617*427\" alt=\"\"><\/p><p>通过上图可以看出，其实它是多个内置的 PasswordEncoder 集成在了一起。<\/p><p>当我们校验用户时，我们会通过下面的代码来匹配，参考DelegatingPasswordEncoder#matches：<\/p><pre><code>private PasswordEncoder defaultPasswordEncoderForMatches = new UnmappedIdPasswordEncoder();\n\n@Override\npublic boolean matches(CharSequence rawPassword, String prefixEncodedPassword) {\n   if (rawPassword == null &amp;&amp; prefixEncodedPassword == null) {\n      return true;\n   }\n   String id = extractId(prefixEncodedPassword);\n   PasswordEncoder delegate = this.idToPasswordEncoder.get(id);\n   if (delegate == null) {\n      return this.defaultPasswordEncoderForMatches\n         .matches(rawPassword, prefixEncodedPassword);\n   }\n   String encodedPassword = extractEncodedPassword(prefixEncodedPassword);\n\n   return delegate.matches(rawPassword, encodedPassword);\n}\n\nprivate String extractId(String prefixEncodedPassword) {\n   if (prefixEncodedPassword == null) {\n      return null;\n   }\n   \/\/{\n   int start = prefixEncodedPassword.indexOf(PREFIX);\n   if (start != 0) {\n      return null;\n   }\n   \/\/}\n   int end = prefixEncodedPassword.indexOf(SUFFIX, start);\n   if (end &lt; 0) {\n      return null;\n   }\n   return prefixEncodedPassword.substring(start + 1, end);\n}\n<\/code><\/pre><p>可以看出，假设我们的 prefixEncodedPassword 中含有 id，则根据 id 到 DelegatingPasswordEncoder 的 idToPasswordEncoder 找出合适的 Encoder；假设没有 id，则使用默认的UnmappedIdPasswordEncoder。我们来看下它的实现：<\/p><pre><code>private class UnmappedIdPasswordEncoder implements PasswordEncoder {\n\n   @Override\n   public String encode(CharSequence rawPassword) {\n      throw new UnsupportedOperationException(&quot;encode is not supported&quot;);\n   }\n\n   @Override\n   public boolean matches(CharSequence rawPassword,\n      String prefixEncodedPassword) {\n      String id = extractId(prefixEncodedPassword);\n      throw new IllegalArgumentException(&quot;There is no PasswordEncoder mapped for the id \\&quot;&quot; + id + &quot;\\&quot;&quot;);\n   }\n}\n<\/code><\/pre><p>从上述代码可以看出，no PasswordEncoder for the id \"null\" 异常就是这样被 UnmappedIdPasswordEncoder 抛出的。那么这个可能含有 id 的 prefixEncodedPassword 是什么？其实它就是存储的密码，在我们的案例中由下面代码行中的 password() 指定：<\/p><pre><code>auth.inMemoryAuthentication()        .withUser(&quot;admin&quot;).password(&quot;pass&quot;).roles(&quot;ADMIN&quot;);\n<\/code><\/pre><p>这里我们不妨测试下，修改下上述代码行，给密码指定一个加密方式，看看之前的异常还存在与否：<\/p><pre><code>auth.inMemoryAuthentication()        .withUser(&quot;admin&quot;).password(&quot;{MD5}pass&quot;).roles(&quot;ADMIN&quot;);\n<\/code><\/pre><p>此时，以调试方式运行程序，你会发现，这个时候已经有了 id，且取出了合适的 PasswordEncoder。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/9d\/7c\/9d08d66e3f11be275998712bdd44847c.png?wh=903*335\" alt=\"\"><\/p><p>说到这里，相信你已经知道问题的来龙去脉了。问题的根源还是在于我们需要一个PasswordEncoder，而当前案例没有给我们指定出来。<\/p><h3>问题修正<\/h3><p>那么通过分析，你肯定知道如何解决这个问题了，无非就是自定义一个 PasswordEncoder。具体修正代码你可以参考之前给出的代码，这里不再重复贴出。<\/p><p>另外，通过案例解析，相信你也想到了另外一种解决问题的方式，就是在存储的密码上做文章。具体到我们案例，可以采用下面的修正方式：<\/p><pre><code>auth.inMemoryAuthentication()        .withUser(&quot;admin&quot;).password(&quot;{noop}pass&quot;).roles(&quot;ADMIN&quot;);\n<\/code><\/pre><p>然后定位到这个方式，实际上就等于指定 PasswordEncoder 为NoOpPasswordEncoder了，它的实现如下：<\/p><pre><code>public final class NoOpPasswordEncoder implements PasswordEncoder {\n\n   public String encode(CharSequence rawPassword) {\n      return rawPassword.toString();\n   }\n\n   public boolean matches(CharSequence rawPassword, String encodedPassword) {\n      return rawPassword.toString().equals(encodedPassword);\n   }\n\n  \/\/省略部分非关键代码\n\n}\n<\/code><\/pre><p>不过，这种修正方式比较麻烦，毕竟每个密码都加个前缀也不合适。所以综合比较来看，还是第一种修正方式更普适。当然如果你的需求是不同的用户有不同的加密，或许这种方式也是不错的。<\/p><h2>案例 2：ROLE_ 前缀与角色<\/h2><p>我们再来看一个 Spring Security 中关于权限角色的案例，ROLE_ 前缀加还是不加？不过这里我们需要提供稍微复杂一些的功能，即模拟授权时的角色相关控制。所以我们需要完善下案例，这里我先提供一个接口，这个接口需要管理的操作权限：<\/p><pre><code>@RestController\npublic class HelloWorldController {\n    @RequestMapping(path = &quot;admin&quot;, method = RequestMethod.GET)\n    public String admin(){\n         return &quot;admin operation&quot;;\n    };\n\n<\/code><\/pre><p>然后我们使用 Spring Security 默认的内置授权来创建一个授权配置类：<\/p><pre><code>@Configuration\npublic class MyWebSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n      \/\/同案例1，这里省略掉\n    }\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth.inMemoryAuthentication()\n                .withUser(&quot;fujian&quot;).password(&quot;pass&quot;).roles(&quot;USER&quot;)\n                .and()\n                .withUser(&quot;admin1&quot;).password(&quot;pass&quot;).roles(&quot;ADMIN&quot;)\n                .and()\n                .withUser(new UserDetails() {\n                    @Override\n                    public Collection&lt;? extends GrantedAuthority&gt; getAuthorities() {\n                        return Arrays.asList(new SimpleGrantedAuthority(&quot;ADMIN&quot;));\n\n                    }\n                    \/\/省略其他非关键“实现”方法\n                    public String getUsername() {\n                        return &quot;admin2&quot;;\n                    }\n \n                });\n    }\n\n    \/\/ 配置 URL 对应的访问权限\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n    http.authorizeRequests()\n              .antMatchers(&quot;\/admin\/**&quot;).hasRole(&quot;ADMIN&quot;)\n              .anyRequest().authenticated()\n              .and()\n              .formLogin().loginProcessingUrl(&quot;\/login&quot;).permitAll()\n              .and().csrf().disable();\n    }\n}\n<\/code><\/pre><p>通过上述代码，我们添加了 3 个用户：<\/p><ol>\n<li>用户 fujian：角色为 USER<\/li>\n<li>用户 admin1：角色为 ADMIN<\/li>\n<li>用户 admin2：角色为 ADMIN<\/li>\n<\/ol><p>然后我们从浏览器访问我们的接口 <a href=\"http:\/\/localhost:8080\/admin\">http:\/\/localhost:8080\/admin<\/a>，使用上述 3 个用户登录，你会发现用户 admin1 可以登录，而 admin2 设置了同样的角色却不可以登陆，并且提示下面的错误：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/8e\/af\/8e5a626c0c5600c1e98d9caf4408aaaf.png?wh=661*246\" alt=\"\"><\/p><p>如何理解这个现象？<\/p><h3>案例解析<\/h3><p>要了解这个案例出现的原因，其实是需要我们对 Spring 安全中的 Role 前缀有一个深入的认识。不过，在这之前，你可能想不到案例出错的罪魁祸首就是它，所以我们得先找到一些线索。<\/p><p>对比 admin1 和 admin2 用户的添加，你会发现，这仅仅是两种添加内置用户的风格而已。但是为什么前者可以正常工作，后者却不可以？本质就在于 Role 的设置风格，可参考下面的这两段关键代码：<\/p><pre><code>\/\/admin1 的添加\n.withUser(&quot;admin&quot;).password(&quot;pass&quot;).roles(&quot;ADMIN&quot;)\n\n\/\/admin2 的添加\n.withUser(new UserDetails() {\n    @Override\n    public Collection&lt;? extends GrantedAuthority&gt; getAuthorities() {\n        return Arrays.asList(new SimpleGrantedAuthority(&quot;ADMIN&quot;));\n    } \n    @Override\n    public String getUsername() {\n        return &quot;admin2&quot;;\n    }\n    \/\/省略其他非关键代码\n});\n<\/code><\/pre><p>查看上面这两种添加方式，你会发现它们真的仅仅是两种风格而已，所以最终构建出用户的代码肯定是相同的。我们先来查看下 admin1 的添加最后对 Role 的处理（参考 User.UserBuilder#roles）：<\/p><pre><code>public UserBuilder roles(String... roles) {\n   List&lt;GrantedAuthority&gt; authorities = new ArrayList&lt;&gt;(\n         roles.length);\n   for (String role : roles) {\n      Assert.isTrue(!role.startsWith(&quot;ROLE_&quot;), () -&gt; role\n            + &quot; cannot start with ROLE_ (it is automatically added)&quot;);\n      \/\/添加“ROLE_”前缀\n      authorities.add(new SimpleGrantedAuthority(&quot;ROLE_&quot; + role));\n   }\n   return authorities(authorities);\n}\n\npublic UserBuilder authorities(Collection&lt;? extends GrantedAuthority&gt; authorities) {\n   this.authorities = new ArrayList&lt;&gt;(authorities);\n   return this;\n}\n<\/code><\/pre><p>可以看出，当 admin1 添加 ADMIN 角色时，实际添加进去的是 ROLE_ADMIN。但是我们再来看下 admin2 的角色设置，最终设置的方法其实就是 User#withUserDetails：<\/p><pre><code>public static UserBuilder withUserDetails(UserDetails userDetails) {\n   return withUsername(userDetails.getUsername())\n      \/\/省略非关键代码\n      .authorities(userDetails.getAuthorities())\n      .credentialsExpired(!userDetails.isCredentialsNonExpired())\n      .disabled(!userDetails.isEnabled());\n}\n\npublic UserBuilder authorities(Collection&lt;? extends GrantedAuthority&gt; authorities) {\n   this.authorities = new ArrayList&lt;&gt;(authorities);\n   return this;\n}\n<\/code><\/pre><p>所以，admin2 的添加，最终设置进的 Role 就是 ADMIN。<\/p><p>此时我们可以得出一个结论：通过上述两种方式设置的相同 Role（即 ADMIN），最后存储的 Role 却不相同，分别为 ROLE_ADMIN 和 ADMIN。那么为什么只有 ROLE_ADMIN 这种用户才能通过授权呢？这里我们不妨通过调试视图看下授权的调用栈，截图如下：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/63\/1c\/63cd862a979cbb5452b0c39d0de3941c.png?wh=1215*202\" alt=\"\"><\/p><p>对于案例的代码，最终是通过 \"UsernamePasswordAuthenticationFilter\" 来完成授权的。而且从调用栈信息可以大致看出，授权的关键其实就是查找用户，然后校验权限。查找用户的方法可参考 InMemoryUserDetailsManager#loadUserByUsername，即根据用户名查找已添加的用户：<\/p><pre><code>public UserDetails loadUserByUsername(String username)\n      throws UsernameNotFoundException {\n   UserDetails user = users.get(username.toLowerCase());\n\n   if (user == null) {\n      throw new UsernameNotFoundException(username);\n   }\n\n   return new User(user.getUsername(), user.getPassword(), user.isEnabled(),\n         user.isAccountNonExpired(), user.isCredentialsNonExpired(),\n         user.isAccountNonLocked(), user.getAuthorities());\n}\n<\/code><\/pre><p>完成账号是否过期、是否锁定等检查后，我们会把这个用户转化为下面的 Token（即 UsernamePasswordAuthenticationToken）供后续使用，关键信息如下：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/7a\/5c\/7a2254400c83055cf07785be119dc65c.png?wh=1406*237\" alt=\"\"><\/p><p>最终在判断角色时，我们会通过 UsernamePasswordAuthenticationToken 的父类方法 AbstractAuthenticationToken#getAuthorities 来取到上述截图中的 ADMIN。而判断是否具备某个角色时，使用的关键方法是 SecurityExpressionRoot#hasAnyAuthorityName：<\/p><pre><code>private boolean hasAnyAuthorityName(String prefix, String... roles) {\n   \/\/通过 AbstractAuthenticationToken#getAuthorities 获取“role”\n   Set&lt;String&gt; roleSet = getAuthoritySet();\n\n   for (String role : roles) {\n      String defaultedRole = getRoleWithDefaultPrefix(prefix, role);\n      if (roleSet.contains(defaultedRole)) {\n         return true;\n      }\n   }\n\n   return false;\n}\n\/\/尝试添加“prefix”,即“ROLE_”\nprivate static String getRoleWithDefaultPrefix(String defaultRolePrefix, String role) {\n   if (role == null) {\n      return role;\n   }\n   if (defaultRolePrefix == null || defaultRolePrefix.length() == 0) {\n      return role;\n   }\n   if (role.startsWith(defaultRolePrefix)) {\n      return role;\n   }\n   return defaultRolePrefix + role;\n}\n<\/code><\/pre><p>在上述代码中，prefix 是 ROLE_（默认值，即 SecurityExpressionRoot#defaultRolePrefix），Roles 是待匹配的角色 ROLE_ADMIN，产生的 defaultedRole 是 ROLE_ADMIN，而我们的 role-set 是从 UsernamePasswordAuthenticationToken 中获取到 ADMIN，所以最终判断的结果是 false。<\/p><p>最终这个结果反映给上层来决定是否通过授权，可参考 WebExpressionVoter#vote：<\/p><pre><code>public int vote(Authentication authentication, FilterInvocation fi,\n      Collection&lt;ConfigAttribute&gt; attributes) {\n   \/\/省略非关键代码 \n   return ExpressionUtils.evaluateAsBoolean(weca.getAuthorizeExpression(), ctx) ? ACCESS_GRANTED\n         : ACCESS_DENIED;\n}\n<\/code><\/pre><p>很明显，当是否含有某个角色（表达式 Expression：hasRole('ROLE_ADMIN')）的判断结果为 false 时，返回的结果是 ACCESS_DENIED。<\/p><h3>问题修正<\/h3><p>针对这个案例，有了源码的剖析，可以看出：<strong>ROLE_ 前缀在 Spring Security 前缀中非常重要。<\/strong>而要解决这个问题，也非常简单，我们直接在添加 admin2 时，给角色添加上 ROLE_ 前缀即可：<\/p><pre><code>\/\/admin2 的添加\n.withUser(new UserDetails() {\n    @Override\n    public Collection&lt;? extends GrantedAuthority&gt; getAuthorities() {\n        return Arrays.asList(new SimpleGrantedAuthority(&quot;ROLE_ADMIN&quot;));\n    } \n    @Override\n    public String getUsername() {\n        return &quot;admin2&quot;;\n    }\n    \/\/省略其他非关键代码\n})\n<\/code><\/pre><p>参考上述代码，我们给 Role 添加了前缀，重新运行程序后，结果符合预期。<\/p><p>反思这个案例，我们可以总结出：有时候，不同的 API 提供了不同的设置 Role 的方式，但是我们一定要注意是否需要添加 ROLE_ 这个前缀。而如何判断，这里我也没有更好的办法，只能通过经验或者查看源码来核实了。<\/p><h2>重点回顾<\/h2><p>最后我们梳理下课程中所提及的重点。<\/p><ol>\n<li>PasswordEncoder<\/li>\n<\/ol><p>在新版本的 Spring Security 中，你一定不要忘记指定一个PasswordEncoder，因为出于安全考虑，我们肯定是要对密码加密的。至于如何指定，其实有多种方式。常见的方式是自定义一个PasswordEncoder类型的Bean。还有一种不常见的方式是通过存储密码时加上加密方法的前缀来指定，例如密码原来是password123，指定前缀后可能是 {MD5}password123。我们可以根据需求来采取不同的解决方案。<\/p><ol start=\"2\">\n<li>Role<\/li>\n<\/ol><p>在使用角色相关的授权功能时，你一定要注意这个角色是不是加了前缀 ROLE_。<\/p><p>虽然 Spring 在很多角色的设置上，已经尽量尝试加了前缀，但是仍然有许多接口是可以随意设置角色的。所以有时候你没意识到这个问题去随意设置的话，在授权检验时就会出现角色控制不能生效的情况。从另外一个角度看，当你的角色设置失败时，你一定要关注下是不是忘记加前缀了。<\/p><p>以上即为这节课的重点，希望你能有所收获。<\/p><h2>思考题<\/h2><p>通过案例 1 的学习，我们知道在 Spring Boot 开启 Spring Security 时，访问需要授权的 API 会自动跳转到如下登录页面，你知道这个页面是如何产生的么？<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/a9\/af\/a948174fbef26106068ece39068ba4af.png?wh=565*330\" alt=\"\"><\/p><p>期待你的思考，我们留言区见！<\/p>","footer_cover_data":{"img_url":"","mp_url":"","link_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{},"product_id":100077001,"like_count":11,"had_liked":false,"article_subtitle":"无","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/fa\/89\/fa34ed5fda05ee8b514e130c66babc89.mp3","id":378170,"had_viewed":false,"article_title":"15 | Spring Security 常见错误","column_bgcolor":"#F6F7FB","share":{"content":"Spring 开发老兵 10 年避坑心法","title":"傅健 · Spring编程常见错误50例","poster":"https:\/\/static001.geekbang.org\/resource\/image\/81\/cf\/81d9cef44e90ff4890d04b735fd135cf.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/82\/a2\/829d02f2fc0e10860d7b5401f2160ba2.jpg"},"is_video_preview":false,"article_summary":"这节课分享 Spring Security 的应用，避坑排雷。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/6f\/7d\/6f6299f5a8bcdb1f950a1e3dbd725a7d.jpeg","column_sale_type":2,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/82\/a2\/829d02f2fc0e10860d7b5401f2160ba2.jpg","column_id":408,"audio_time_arr":{"m":"11","s":"46","h":"00"},"video_time":"","audio_title":"傅健-15","audio_md5":"fa34ed5fda05ee8b514e130c66babc89","video_size":0,"text_read_percent":0,"comment_count":3,"cid":408,"article_sharetitle":"Spring Security 常见错误","column_is_onboard":true,"article_cshort":"<p>你好，我是傅健。前面几节课我们学习了 Spring Web 开发中请求的解析以及过滤器的使用。这一节课，我们接着讲 Spring Security 的应用。<\/p><p>实际上，在 Spring 中，对于 Security 的处理基本都是借助于过滤器来协助完成的。粗略使用起来不会太难，但是 Security 本身是个非常庞大的话题，所以这里面遇到的错误自然不会少。好在使用 Spring Security 的应用和开发者实在是太多了，以致于时至今日，也没有太多明显的坑了。<\/p><p>在今天的课程里，我会带着你快速学习下两个典型的错误，相信掌握它们，关于 Spring Security 的雷区你就不需要太担心了。不过需要说明的是，授权的种类千千万，这里为了让你避免纠缠于业务逻辑实现，我讲解的案例都将直接基于 Spring Boot 使用默认的 Spring Security 实现来讲解。接下来我们正式进入课程的学习。<\/p><h2>案例 1：遗忘 PasswordEncoder<\/h2><p>当我们第一次尝试使用 Spring Security 时，我们经常会忘记定义一个 PasswordEncoder。因为这在 Spring Security 旧版本中是允许的。而一旦使用了新版本，则必须要提供一个 PasswordEncoder。这里我们可以先写一个反例来感受下：<\/p>","video_width":0,"column_could_sub":true,"article_ctime":1621958400,"score":"31621958400","video_media_map":{},"video_preview":{},"video":0,"video_time_arr":{"m":"","s":"","h":""},"video_total_seconds":0},"extra":{},"error":{}}