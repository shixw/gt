{"code":0,"data":{"video_id":"","sku":"100047701","video_cover":"","author_name":"朱晔","text_read_version":0,"audio_size":21318960,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/6f\/6c\/6fa9d4db1c875f2cdd9d9b15eb0ce76c.jpg","subtitles":{},"product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/1d\/51\/1d1be5eea91a86f842844c6fc6471551\/ld\/ld.m3u8","chapter_id":"0","column_had_sub":true,"audio_dubber":"王少泽","is_finished":false,"inline_video_subtitles":{},"like":{"had_done":false,"count":176},"neighbors":{"left":{"id":209520,"article_title":"02 | 代码加锁：不要让“锁”事成为烦心事"},"right":{"id":211388,"article_title":"04 | 连接池：别让连接池帮了倒忙"}},"audio_time":"00:22:12","video_height":0,"rate_percent":0,"article_content":"<p>你好，我是朱晔。今天，我来讲讲使用线程池需要注意的一些问题。<\/p><p>在程序中，我们会用各种池化技术来缓存创建昂贵的对象，比如线程池、连接池、内存池。一般是预先创建一些对象放入池中，使用的时候直接取出使用，用完归还以便复用，还会通过一定的策略调整池中缓存对象的数量，实现池的动态伸缩。<\/p><p>由于线程的创建比较昂贵，随意、没有控制地创建大量线程会造成性能问题，因此短平快的任务一般考虑使用线程池来处理，而不是直接创建线程。<\/p><p>今天，我们就针对线程池这个话题展开讨论，通过三个生产事故，来看看使用线程池应该注意些什么。<\/p><h2>线程池的声明需要手动进行<\/h2><p>Java中的Executors类定义了一些快捷的工具方法，来帮助我们快速创建线程池。《阿里巴巴Java开发手册》中提到，禁止使用这些方法来创建线程池，而应该手动new ThreadPoolExecutor来创建线程池。这一条规则的背后，是大量血淋淋的生产事故，最典型的就是newFixedThreadPool和newCachedThreadPool，可能因为资源耗尽导致OOM问题。<\/p><p>首先，我们来看一下newFixedThreadPool为什么可能会出现OOM的问题。<\/p><p>我们写一段测试代码，来初始化一个单线程的FixedThreadPool，循环1亿次向线程池提交任务，每个任务都会创建一个比较大的字符串然后休眠一小时：<\/p><!-- [[[read_end]]] --><pre><code>@GetMapping(&quot;oom1&quot;)\npublic void oom1() throws InterruptedException {\n\n    ThreadPoolExecutor threadPool = (ThreadPoolExecutor) Executors.newFixedThreadPool(1);\n    \/\/打印线程池的信息，稍后我会解释这段代码\n    printStats(threadPool); \n    for (int i = 0; i &lt; 100000000; i++) {\n        threadPool.execute(() -&gt; {\n            String payload = IntStream.rangeClosed(1, 1000000)\n                    .mapToObj(__ -&gt; &quot;a&quot;)\n                    .collect(Collectors.joining(&quot;&quot;)) + UUID.randomUUID().toString();\n            try {\n                TimeUnit.HOURS.sleep(1);\n            } catch (InterruptedException e) {\n            }\n            log.info(payload);\n        });\n    }\n\n    threadPool.shutdown();\n    threadPool.awaitTermination(1, TimeUnit.HOURS);\n}\n<\/code><\/pre><p>执行程序后不久，日志中就出现了如下OOM：<\/p><pre><code>Exception in thread &quot;http-nio-45678-ClientPoller&quot; java.lang.OutOfMemoryError: GC overhead limit exceeded\n<\/code><\/pre><p>翻看newFixedThreadPool方法的源码不难发现，线程池的工作队列直接new了一个LinkedBlockingQueue，<strong>而默认构造方法的LinkedBlockingQueue是一个Integer.MAX_VALUE长度的队列，可以认为是无界的<\/strong>：<\/p><pre><code>public static ExecutorService newFixedThreadPool(int nThreads) {\n    return new ThreadPoolExecutor(nThreads, nThreads,\n                                  0L, TimeUnit.MILLISECONDS,\n                                  new LinkedBlockingQueue&lt;Runnable&gt;());\n}\n\npublic class LinkedBlockingQueue&lt;E&gt; extends AbstractQueue&lt;E&gt;\n        implements BlockingQueue&lt;E&gt;, java.io.Serializable {\n    ...\n\n\n    \/**\n     * Creates a {@code LinkedBlockingQueue} with a capacity of\n     * {@link Integer#MAX_VALUE}.\n     *\/\n    public LinkedBlockingQueue() {\n        this(Integer.MAX_VALUE);\n    }\n...\n}\n<\/code><\/pre><p>虽然使用newFixedThreadPool可以把工作线程控制在固定的数量上，但任务队列是无界的。如果任务较多并且执行较慢的话，队列可能会快速积压，撑爆内存导致OOM。<\/p><p>我们再把刚才的例子稍微改一下，改为使用newCachedThreadPool方法来获得线程池。程序运行不久后，同样看到了如下OOM异常：<\/p><pre><code>[11:30:30.487] [http-nio-45678-exec-1] [ERROR] [.a.c.c.C.[.[.[\/].[dispatcherServlet]:175 ] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Handler dispatch failed; nested exception is java.lang.OutOfMemoryError: unable to create new native thread] with root cause\njava.lang.OutOfMemoryError: unable to create new native thread \n<\/code><\/pre><p>从日志中可以看到，这次OOM的原因是无法创建线程，翻看newCachedThreadPool的源码可以看到，<strong>这种线程池的最大线程数是Integer.MAX_VALUE，可以认为是没有上限的，而其工作队列SynchronousQueue是一个没有存储空间的阻塞队列<\/strong>。这意味着，只要有请求到来，就必须找到一条工作线程来处理，如果当前没有空闲的线程就再创建一条新的。<\/p><p>由于我们的任务需要1小时才能执行完成，大量的任务进来后会创建大量的线程。我们知道线程是需要分配一定的内存空间作为线程栈的，比如1MB，因此无限制创建线程必然会导致OOM：<\/p><pre><code>public static ExecutorService newCachedThreadPool() {\n    return new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n                                  60L, TimeUnit.SECONDS,\n                                  new SynchronousQueue&lt;Runnable&gt;());\n<\/code><\/pre><p>其实，大部分Java开发同学知道这两种线程池的特性，只是抱有侥幸心理，觉得只是使用线程池做一些轻量级的任务，不可能造成队列积压或开启大量线程。<\/p><p>但，现实往往是残酷的。我之前就遇到过这么一个事故：用户注册后，我们调用一个外部服务去发送短信，发送短信接口正常时可以在100毫秒内响应，TPS 100的注册量，CachedThreadPool能稳定在占用10个左右线程的情况下满足需求。在某个时间点，外部短信服务不可用了，我们调用这个服务的超时又特别长，比如1分钟，1分钟可能就进来了6000用户，产生6000个发送短信的任务，需要6000个线程，没多久就因为无法创建线程导致了OOM，整个应用程序崩溃。<\/p><p>因此，<strong>我同样不建议使用Executors提供的两种快捷的线程池，原因如下<\/strong>：<\/p><ul>\n<li>我们需要根据自己的场景、并发情况来评估线程池的几个核心参数，包括核心线程数、最大线程数、线程回收策略、工作队列的类型，以及拒绝策略，确保线程池的工作行为符合需求，一般都需要设置有界的工作队列和可控的线程数。<\/li>\n<li>任何时候，都应该为自定义线程池指定有意义的名称，以方便排查问题。当出现线程数量暴增、线程死锁、线程占用大量CPU、线程执行出现异常等问题时，我们往往会抓取线程栈。此时，有意义的线程名称，就可以方便我们定位问题。<\/li>\n<\/ul><p>除了建议手动声明线程池以外，我还建议<strong>用一些监控手段来观察线程池的状态<\/strong>。线程池这个组件往往会表现得任劳任怨、默默无闻，除非是出现了拒绝策略，否则压力再大都不会抛出一个异常。如果我们能提前观察到线程池队列的积压，或者线程数量的快速膨胀，往往可以提早发现并解决问题。<\/p><h2>线程池线程管理策略详解<\/h2><p>在之前的Demo中，我们用一个printStats方法实现了最简陋的监控，每秒输出一次线程池的基本内部信息，包括线程数、活跃线程数、完成了多少任务，以及队列中还有多少积压任务等信息：<\/p><pre><code>private void printStats(ThreadPoolExecutor threadPool) {\n   Executors.newSingleThreadScheduledExecutor().scheduleAtFixedRate(() -&gt; {\n        log.info(&quot;=========================&quot;);\n        log.info(&quot;Pool Size: {}&quot;, threadPool.getPoolSize());\n        log.info(&quot;Active Threads: {}&quot;, threadPool.getActiveCount());\n        log.info(&quot;Number of Tasks Completed: {}&quot;, threadPool.getCompletedTaskCount());\n        log.info(&quot;Number of Tasks in Queue: {}&quot;, threadPool.getQueue().size());\n\n        log.info(&quot;=========================&quot;);\n    }, 0, 1, TimeUnit.SECONDS);\n}\n<\/code><\/pre><p>接下来，我们就利用这个方法来观察一下线程池的基本特性吧。<\/p><p>首先，自定义一个线程池。这个线程池具有2个核心线程、5个最大线程、使用容量为10的ArrayBlockingQueue阻塞队列作为工作队列，使用默认的AbortPolicy拒绝策略，也就是任务添加到线程池失败会抛出RejectedExecutionException。此外，我们借助了Jodd类库的ThreadFactoryBuilder方法来构造一个线程工厂，实现线程池线程的自定义命名。<\/p><p>然后，我们写一段测试代码来观察线程池管理线程的策略。测试代码的逻辑为，每次间隔1秒向线程池提交任务，循环20次，每个任务需要10秒才能执行完成，代码如下：<\/p><pre><code>@GetMapping(&quot;right&quot;)\npublic int right() throws InterruptedException {\n    \/\/使用一个计数器跟踪完成的任务数\n    AtomicInteger atomicInteger = new AtomicInteger();\n    \/\/创建一个具有2个核心线程、5个最大线程，使用容量为10的ArrayBlockingQueue阻塞队列作为工作队列的线程池，使用默认的AbortPolicy拒绝策略\n    ThreadPoolExecutor threadPool = new ThreadPoolExecutor(\n            2, 5,\n            5, TimeUnit.SECONDS,\n            new ArrayBlockingQueue&lt;&gt;(10),\n            new ThreadFactoryBuilder().setNameFormat(&quot;demo-threadpool-%d&quot;).get(),\n            new ThreadPoolExecutor.AbortPolicy());\n\n    printStats(threadPool);\n    \/\/每隔1秒提交一次，一共提交20次任务\n    IntStream.rangeClosed(1, 20).forEach(i -&gt; {\n        try {\n            TimeUnit.SECONDS.sleep(1);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        int id = atomicInteger.incrementAndGet();\n        try {\n            threadPool.submit(() -&gt; {\n                log.info(&quot;{} started&quot;, id);\n                \/\/每个任务耗时10秒\n                try {\n                    TimeUnit.SECONDS.sleep(10);\n                } catch (InterruptedException e) {\n                }\n                log.info(&quot;{} finished&quot;, id);\n            });\n        } catch (Exception ex) {\n            \/\/提交出现异常的话，打印出错信息并为计数器减一\n            log.error(&quot;error submitting task {}&quot;, id, ex);\n            atomicInteger.decrementAndGet();\n        }\n    });\n\n    TimeUnit.SECONDS.sleep(60);\n    return atomicInteger.intValue();\n}\n<\/code><\/pre><p>60秒后页面输出了17，有3次提交失败了：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/4b\/2c\/4b820e0b24ce0deefbf2dd7af295c32c.png?wh=970*204\" alt=\"\"><\/p><p>并且日志中也出现了3次类似的错误信息：<\/p><pre><code>[14:24:52.879] [http-nio-45678-exec-1] [ERROR] [.t.c.t.demo1.ThreadPoolOOMController:103 ] - error submitting task 18\njava.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@163a2dec rejected from java.util.concurrent.ThreadPoolExecutor@18061ad2[Running, pool size = 5, active threads = 5, queued tasks = 10, completed tasks = 2]\n<\/code><\/pre><p>我们把printStats方法打印出的日志绘制成图表，得出如下曲线：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/d8\/1e\/d819035f60bf1c0022a98051d50e031e.png?wh=1738*684\" alt=\"\"><\/p><p><strong>至此，我们可以总结出线程池默认的工作行为<\/strong>：<\/p><ul>\n<li>不会初始化corePoolSize个线程，有任务来了才创建工作线程；<\/li>\n<li>当核心线程满了之后不会立即扩容线程池，而是把任务堆积到工作队列中；<\/li>\n<li>当工作队列满了后扩容线程池，一直到线程个数达到maximumPoolSize为止；<\/li>\n<li>如果队列已满且达到了最大线程后还有任务进来，按照拒绝策略处理；<\/li>\n<li>当线程数大于核心线程数时，线程等待keepAliveTime后还是没有任务需要处理的话，收缩线程到核心线程数。<\/li>\n<\/ul><p>了解这个策略，有助于我们根据实际的容量规划需求，为线程池设置合适的初始化参数。当然，我们也可以通过一些手段来改变这些默认工作行为，比如：<\/p><ul>\n<li>声明线程池后立即调用prestartAllCoreThreads方法，来启动所有核心线程；<\/li>\n<li>传入true给allowCoreThreadTimeOut方法，来让线程池在空闲的时候同样回收核心线程。<\/li>\n<\/ul><p>不知道你有没有想过：Java线程池是先用工作队列来存放来不及处理的任务，满了之后再扩容线程池。当我们的工作队列设置得很大时，最大线程数这个参数显得没有意义，因为队列很难满，或者到满的时候再去扩容线程池已经于事无补了。<\/p><p>那么，<strong>我们有没有办法让线程池<\/strong><strong>更激进一点，优先开启更多的线程，而把队列当成一个后备方案呢？<\/strong>比如我们这个例子，任务执行得很慢，需要10秒，如果线程池可以优先扩容到5个最大线程，那么这些任务最终都可以完成，而不会因为线程池扩容过晚导致慢任务来不及处理。<\/p><p>限于篇幅，这里我只给你一个大致思路：<\/p><ol>\n<li>由于线程池在工作队列满了无法入队的情况下会扩容线程池，那么我们是否可以重写队列的offer方法，造成这个队列已满的假象呢？<\/li>\n<li>由于我们Hack了队列，在达到了最大线程后势必会触发拒绝策略，那么能否实现一个自定义的拒绝策略处理程序，这个时候再把任务真正插入队列呢？<\/li>\n<\/ol><p>接下来，就请你动手试试看如何实现这样一个“弹性”线程池吧。Tomcat线程池也实现了类似的效果，可供你借鉴。<\/p><h2>务必确认清楚线程池本身是不是复用的<\/h2><p>不久之前我遇到了这样一个事故：某项目生产环境时不时有报警提示线程数过多，超过2000个，收到报警后查看监控发现，瞬时线程数比较多但过一会儿又会降下来，线程数抖动很厉害，而应用的访问量变化不大。<\/p><p>为了定位问题，我们在线程数比较高的时候进行线程栈抓取，抓取后发现内存中有1000多个自定义线程池。一般而言，线程池肯定是复用的，有5个以内的线程池都可以认为正常，而1000多个线程池肯定不正常。<\/p><p>在项目代码里，我们没有搜到声明线程池的地方，搜索execute关键字后定位到，原来是业务代码调用了一个类库来获得线程池，类似如下的业务代码：调用ThreadPoolHelper的getThreadPool方法来获得线程池，然后提交数个任务到线程池处理，看不出什么异常。<\/p><pre><code>@GetMapping(&quot;wrong&quot;)\npublic String wrong() throws InterruptedException {\n    ThreadPoolExecutor threadPool = ThreadPoolHelper.getThreadPool();\n    IntStream.rangeClosed(1, 10).forEach(i -&gt; {\n        threadPool.execute(() -&gt; {\n            ...\n            try {\n                TimeUnit.SECONDS.sleep(1);\n            } catch (InterruptedException e) {\n            }\n        });\n    });\n    return &quot;OK&quot;;\n}\n<\/code><\/pre><p>但是，来到ThreadPoolHelper的实现让人大跌眼镜，<strong>getThreadPool方法居然是每次都使用Executors.newCachedThreadPool来创建一个线程池<\/strong>。<\/p><pre><code>class ThreadPoolHelper {\n    public static ThreadPoolExecutor getThreadPool() {\n        \/\/线程池没有复用\n        return (ThreadPoolExecutor) Executors.newCachedThreadPool();\n    }\n}\n<\/code><\/pre><p>通过上一小节的学习，我们可以想到newCachedThreadPool会在需要时创建必要多的线程，业务代码的一次业务操作会向线程池提交多个慢任务，这样执行一次业务操作就会开启多个线程。如果业务操作并发量较大的话，的确有可能一下子开启几千个线程。<\/p><p>那，为什么我们能在监控中看到线程数量会下降，而不会撑爆内存呢？<\/p><p>回到newCachedThreadPool的定义就会发现，它的核心线程数是0，而keepAliveTime是60秒，也就是在60秒之后所有的线程都是可以回收的。好吧，就因为这个特性，我们的业务程序死得没太难看。<\/p><p>要修复这个Bug也很简单，使用一个静态字段来存放线程池的引用，返回线程池的代码直接返回这个静态字段即可。这里一定要记得我们的最佳实践，手动创建线程池。修复后的ThreadPoolHelper类如下：<\/p><pre><code>class ThreadPoolHelper {\n\tprivate static ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(\n\t\t10, 50,\n\t\t2, TimeUnit.SECONDS,\n\t\tnew ArrayBlockingQueue&lt;&gt;(1000),\n\t\tnew ThreadFactoryBuilder().setNameFormat(&quot;demo-threadpool-%d&quot;).get());\n\tpublic static ThreadPoolExecutor getRightThreadPool() {\n\t\treturn threadPoolExecutor;\n\t}\n}\n<\/code><\/pre><h2>需要仔细斟酌线程池的混用策略<\/h2><p>线程池的意义在于复用，那这是不是意味着程序应该始终使用一个线程池呢？<\/p><p>当然不是。通过第一小节的学习我们知道，<strong>要根据任务的“轻重缓急”来指定线程池的核心参数，包括线程数、回收策略和任务队列<\/strong>：<\/p><ul>\n<li>对于执行比较慢、数量不大的IO任务，或许要考虑更多的线程数，而不需要太大的队列。<\/li>\n<li>而对于吞吐量较大的计算型任务，线程数量不宜过多，可以是CPU核数或核数*2（理由是，线程一定调度到某个CPU进行执行，如果任务本身是CPU绑定的任务，那么过多的线程只会增加线程切换的开销，并不能提升吞吐量），但可能需要较长的队列来做缓冲。<\/li>\n<\/ul><p>之前我也遇到过这么一个问题，业务代码使用了线程池异步处理一些内存中的数据，但通过监控发现处理得非常慢，整个处理过程都是内存中的计算不涉及IO操作，也需要数秒的处理时间，应用程序CPU占用也不是特别高，有点不可思议。<\/p><p>经排查发现，业务代码使用的线程池，还被一个后台的文件批处理任务用到了。<\/p><p>或许是够用就好的原则，这个线程池只有2个核心线程，最大线程也是2，使用了容量为100的ArrayBlockingQueue作为工作队列，使用了CallerRunsPolicy拒绝策略：<\/p><pre><code>private static ThreadPoolExecutor threadPool = new ThreadPoolExecutor(\n        2, 2,\n        1, TimeUnit.HOURS,\n        new ArrayBlockingQueue&lt;&gt;(100),\n        new ThreadFactoryBuilder().setNameFormat(&quot;batchfileprocess-threadpool-%d&quot;).get(),\n        new ThreadPoolExecutor.CallerRunsPolicy());\n<\/code><\/pre><p>这里，我们模拟一下文件批处理的代码，在程序启动后通过一个线程开启死循环逻辑，不断向线程池提交任务，任务的逻辑是向一个文件中写入大量的数据：<\/p><pre><code>@PostConstruct\npublic void init() {\n    printStats(threadPool);\n\n    new Thread(() -&gt; {\n        \/\/模拟需要写入的大量数据\n        String payload = IntStream.rangeClosed(1, 1_000_000)\n                .mapToObj(__ -&gt; &quot;a&quot;)\n                .collect(Collectors.joining(&quot;&quot;));\n        while (true) {\n            threadPool.execute(() -&gt; {\n                try {\n                    \/\/每次都是创建并写入相同的数据到相同的文件\n                    Files.write(Paths.get(&quot;demo.txt&quot;), Collections.singletonList(LocalTime.now().toString() + &quot;:&quot; + payload), UTF_8, CREATE, TRUNCATE_EXISTING);\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n                log.info(&quot;batch file processing done&quot;);\n            });\n        }\n    }).start();\n}\n<\/code><\/pre><p>可以想象到，这个线程池中的2个线程任务是相当重的。通过printStats方法打印出的日志，我们观察下线程池的负担：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/49\/55\/49c132595db60f109530e0dec55ccd55.png?wh=2732*508\" alt=\"\"><\/p><p>可以看到，<strong>线程池的2个线程始终处于活跃状态，队列也基本处于打满状态。<\/strong>因为开启了CallerRunsPolicy拒绝处理策略，所以当线程满载队列也满的情况下，任务会在提交任务的线程，或者说调用execute方法的线程执行，也就是说不能认为提交到线程池的任务就一定是异步处理的。如果使用了CallerRunsPolicy策略，那么有可能异步任务变为同步执行。从日志的第四行也可以看到这点。这也是这个拒绝策略比较特别的原因。<\/p><p>不知道写代码的同学为什么设置这个策略，或许是测试时发现线程池因为任务处理不过来出现了异常，而又不希望线程池丢弃任务，所以最终选择了这样的拒绝策略。不管怎样，这些日志足以说明线程池是饱和状态。<\/p><p>可以想象到，业务代码复用这样的线程池来做内存计算，命运一定是悲惨的。我们写一段代码测试下，向线程池提交一个简单的任务，这个任务只是休眠10毫秒没有其他逻辑：<\/p><pre><code>private Callable&lt;Integer&gt; calcTask() {\n    return () -&gt; {\n        TimeUnit.MILLISECONDS.sleep(10);\n        return 1;\n    };\n}\n\n@GetMapping(&quot;wrong&quot;)\npublic int wrong() throws ExecutionException, InterruptedException {\n    return threadPool.submit(calcTask()).get();\n}\n<\/code><\/pre><p>我们使用wrk工具对这个接口进行一个简单的压测，可以看到TPS为75，性能的确非常差。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/98\/07\/989f7ab383e59e21751adb77a9b53507.png?wh=1188*344\" alt=\"\"><\/p><p>细想一下，问题其实没有这么简单。因为原来执行IO任务的线程池使用的是CallerRunsPolicy策略，所以直接使用这个线程池进行异步计算的话，<strong>当线程池饱和的时候，计算任务会在执行Web请求的Tomcat线程执行，这时就会进一步影响到其他同步处理的线程，甚至造成整个应用程序崩溃<\/strong>。<\/p><p>解决方案很简单，使用独立的线程池来做这样的“计算任务”即可。计算任务打了双引号，是因为我们的模拟代码执行的是休眠操作，并不属于CPU绑定的操作，更类似IO绑定的操作，如果线程池线程数设置太小会限制吞吐能力：<\/p><pre><code>private static ThreadPoolExecutor asyncCalcThreadPool = new ThreadPoolExecutor(\n\t200, 200,\n\t1, TimeUnit.HOURS,\n\tnew ArrayBlockingQueue&lt;&gt;(1000),\n\tnew ThreadFactoryBuilder().setNameFormat(&quot;asynccalc-threadpool-%d&quot;).get());\n\n\n@GetMapping(&quot;right&quot;)\npublic int right() throws ExecutionException, InterruptedException {\n\treturn asyncCalcThreadPool.submit(calcTask()).get();\n}\n<\/code><\/pre><p>使用单独的线程池改造代码后再来测试一下性能，TPS提高到了1727：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/c2\/06\/c21eed38ccd18758d38745dd09496a06.png?wh=1214*346\" alt=\"\"><\/p><p>可以看到，盲目复用线程池混用线程的问题在于，别人定义的线程池属性不一定适合你的任务，而且混用会相互干扰。这就好比，我们往往会用虚拟化技术来实现资源的隔离，而不是让所有应用程序都直接使用物理机。<\/p><p>就线程池混用问题，我想再和你补充一个坑：<strong>Java 8的parallel stream功能，可以让我们很方便地并行处理集合中的元素，其背后是共享同一个ForkJoinPool，默认并行度是CPU核数-1<\/strong>。对于CPU绑定的任务来说，使用这样的配置比较合适，但如果集合操作涉及同步IO操作的话（比如数据库操作、外部服务调用等），建议自定义一个ForkJoinPool（或普通线程池）。你可以参考<a href=\"https:\/\/time.geekbang.org\/column\/article\/209494\">第一讲<\/a>的相关Demo。<\/p><h2>重点回顾<\/h2><p>线程池管理着线程，线程又属于宝贵的资源，有许多应用程序的性能问题都来自线程池的配置和使用不当。在今天的学习中，我通过三个和线程池相关的生产事故，和你分享了使用线程池的几个最佳实践。<\/p><p>第一，Executors类提供的一些快捷声明线程池的方法虽然简单，但隐藏了线程池的参数细节。因此，使用线程池时，我们一定要根据场景和需求配置合理的线程数、任务队列、拒绝策略、线程回收策略，并对线程进行明确的命名方便排查问题。<\/p><p>第二，既然使用了线程池就需要确保线程池是在复用的，每次new一个线程池出来可能比不用线程池还糟糕。如果你没有直接声明线程池而是使用其他同学提供的类库来获得一个线程池，请务必查看源码，以确认线程池的实例化方式和配置是符合预期的。<\/p><p>第三，复用线程池不代表应用程序始终使用同一个线程池，我们应该根据任务的性质来选用不同的线程池。特别注意IO绑定的任务和CPU绑定的任务对于线程池属性的偏好，如果希望减少任务间的相互干扰，考虑按需使用隔离的线程池。<\/p><p>最后我想强调的是，<strong>线程池作为应用程序内部的核心组件往往缺乏监控<\/strong>（如果你使用类似RabbitMQ这样的MQ中间件，运维同学一般会帮我们做好中间件监控），往往到程序崩溃后才发现线程池的问题，很被动。在设计篇中我们会重新谈及这个问题及其解决方案。<\/p><p>今天用到的代码，我都放在了GitHub上，你可以点击<a href=\"https:\/\/github.com\/JosephZhu1983\/java-common-mistakes\">这个链接<\/a>查看。<\/p><h2>思考与讨论<\/h2><ol>\n<li>在第一节中我们提到，或许一个激进创建线程的弹性线程池更符合我们的需求，你能给出相关的实现吗？实现后再测试一下，是否所有的任务都可以正常处理完成呢？<\/li>\n<li>在第二节中，我们改进了ThreadPoolHelper使其能够返回复用的线程池。如果我们不小心每次都创建了这样一个自定义的线程池（10核心线程，50最大线程，2秒回收的），反复执行测试接口线程，最终可以被回收吗？会出现OOM问题吗？<\/li>\n<\/ol><p>你还遇到过线程池相关的其他坑吗？我是朱晔，欢迎在评论区与我留言分享你的想法，也欢迎你把这篇文章分享给你的朋友或同事，一起交流。<\/p>","footer_cover_data":{"img_url":"","mp_url":"","link_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{},"product_id":100047701,"like_count":211,"had_liked":false,"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/1d\/51\/1d1be5eea91a86f842844c6fc6471551.mp3","id":210337,"had_viewed":false,"article_title":"03 | 线程池：业务代码最常用也最容易犯错的组件","column_bgcolor":"#F6F7FB","share":{"content":"全面避坑 + 最佳实践=健壮代码","title":"朱晔 · Java业务开发常见错误100例","poster":"https:\/\/static001.geekbang.org\/resource\/image\/e8\/54\/e8431409c7d415a2216c38c3c0a74254.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/da\/da\/da765d454b0e5172a07d8a0c085b66da.jpg"},"is_video_preview":false,"article_summary":"在今天的学习中，我通过三个和线程池相关的生产事故，和你分享了使用线程池的几个最佳实践。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/7d\/a5\/7dc998f5b2b552f2a0d2c4dcc3d5f8a5.jpeg","column_sale_type":2,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/da\/da\/da765d454b0e5172a07d8a0c085b66da.jpg","column_id":294,"audio_time_arr":{"m":"22","s":"12","h":"00"},"video_time":"","audio_title":"03-zy","audio_md5":"1d1be5eea91a86f842844c6fc6471551","video_size":0,"text_read_percent":0,"comment_count":70,"cid":294,"article_sharetitle":"线程池：业务代码最常用也最容易犯错的组件","column_is_onboard":true,"article_cshort":"<p>你好，我是朱晔。今天，我来讲讲使用线程池需要注意的一些问题。<\/p><p>在程序中，我们会用各种池化技术来缓存创建昂贵的对象，比如线程池、连接池、内存池。一般是预先创建一些对象放入池中，使用的时候直接取出使用，用完归还以便复用，还会通过一定的策略调整池中缓存对象的数量，实现池的动态伸缩。<\/p><p>由于线程的创建比较昂贵，随意、没有控制地创建大量线程会造成性能问题，因此短平快的任务一般考虑使用线程池来处理，而不是直接创建线程。<\/p><p>今天，我们就针对线程池这个话题展开讨论，通过三个生产事故，来看看使用线程池应该注意些什么。<\/p><h2>线程池的声明需要手动进行<\/h2><p>Java中的Executors类定义了一些快捷的工具方法，来帮助我们快速创建线程池。《阿里巴巴Java开发手册》中提到，禁止使用这些方法来创建线程池，而应该手动new ThreadPoolExecutor来创建线程池。这一条规则的背后，是大量血淋淋的生产事故，最典型的就是newFixedThreadPool和newCachedThreadPool，可能因为资源耗尽导致OOM问题。<\/p><p>首先，我们来看一下newFixedThreadPool为什么可能会出现OOM的问题。<\/p><p>我们写一段测试代码，来初始化一个单线程的FixedThreadPool，循环1亿次向线程池提交任务，每个任务都会创建一个比较大的字符串然后休眠一小时：<\/p>","video_width":0,"column_could_sub":true,"article_ctime":1583942400,"score":"21583942400","video_media_map":{},"video_preview":{},"video":0,"video_time_arr":{"m":"","s":"","h":""},"video_total_seconds":0},"extra":{},"error":{}}