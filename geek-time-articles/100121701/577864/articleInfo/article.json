{"code":0,"data":{"video_id":"","sku":"100121701","video_cover":"","author_name":"翁一磊","text_read_version":0,"audio_size":13058550,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/1b\/89\/1bf43f4c2b8837bf5aaf3f193byy4189.jpg","subtitles":{},"product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/media\/audio\/95\/7e\/950fe0cbyy06433b949aec41683aca7e\/ld\/ld.m3u8","chapter_id":"0","column_had_sub":true,"audio_dubber":"翁一磊","is_finished":false,"inline_video_subtitles":{},"like":{"had_done":false,"count":0},"neighbors":{"left":{"id":576727,"article_title":"09 | 跟踪 SLO：如何基于错误预算采取行动？"},"right":{"id":578203,"article_title":"11 | 实战 2：基于可观测性数据进行问题分析和根因定位"}},"audio_time":"00:13:38","video_height":0,"rate_percent":0,"article_content":"<p>你好，我是翁一磊。<\/p><p>在前面的课程里，我们学习了很多可观测性的理论知识。那基础打好了，接下来就要真刀真枪地建立系统开始实战了。<\/p><p>这节课，我会基于一个典型的Spring&nbsp;Cloud的应用，给你讲解如何从 0 到 1 来构建端到端的全链路可观测性，如何打通可观测性数据的联合。<\/p><h2>实战业务系统简介<\/h2><p>我们这个实战项目采用的系统是若依系统，这是一套开源的后台管理系统，同时也是一个 Java EE 企业级快速开发平台，它由多个微服务组成，内置模块诸多，如：部门管理、角色用户、菜单及按钮授权、数据权限、系统参数、日志管理、通知公告等。如果需要项目的<a href=\"https:\/\/gitee.com\/y_project\/RuoYi-Cloud\">开源地址<\/a>和<a href=\"http:\/\/demo.ruoyi.vip\/login\">演示地址<\/a>，你可以点开链接查看。<\/p><p>若依系统的架构主要包括下面几类。<\/p><ul>\n<li>Web 页面：放置在 Nginx 中。<\/li>\n<li>注册中心：Nacos。<\/li>\n<li>网关：Gateway。<\/li>\n<li>服务模块：Auth、System。<\/li>\n<li>数据库：MySQL。<\/li>\n<li>缓存：Redis。<\/li>\n<\/ul><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/7f\/76\/7ff92b8b6fdaa7e9f66454fd6d531b76.jpg?wh=1874x1157\" alt=\"图片\"><\/p><p>项目中涉及的技术栈如下表所示：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/14\/71\/14473a8a122895015ec986e05565ea71.jpg?wh=1920x1080\" alt=\"图片\"><\/p><p>提醒一下，我们为了构建可观测性实战选择的是单机 Jar 包版应用，它可以将所有服务模块都部署在同一台服务器上，利用不同端口对服务进行访问。<\/p><h2>建立业务系统的可观测<\/h2><h3>概述<\/h3><p>接下来，我们就一起针对若依这个系统建立可观测性。市面上有不少的开源工具可供选择，但是从某种意义上来说，目前并没有一个开源工具能够完整地解决可观测性的问题，基本都需要把多个工具拼凑到一起来用。在遇到一些业务问题时，仍然需要访问不同的工具来分析问题，相关的日志、链路以及指标数据也没有很好地融合，这样的操作并不能有效减轻运维以及开发人员的分析调试成本和沟通成本。<\/p><!-- [[[read_end]]] --><p>而观测云是一款专门为 DevOps 团队打造的可观测平台，它可以让包括开发、测试、运维在内的所有团队在一套统一的可观测数据体系下客观分析与定位故障问题，便于高效地协作。因此在这个实战的课程中，我会通过观测云来具体介绍一下可观测性的建立过程和使用效果，将指标、链路、日志所有的可观测数据采集、关联以及整合分析，实现系统完整的可观测性。你可以<a href=\"https:\/\/www.guance.com\">免费注册一个账号<\/a>，跟我一起实战演练。<\/p><p><a href=\"https:\/\/www.datakit.tools\/\">DataKit <\/a>是观测云的数据采集器，它不仅支持将数据传输到观测云，也兼容其他的后端存储。针对若依系统，我们会采集 Nginx和MySQL 等技术栈相关的指标和日志、若依系统的服务日志、应用性能监测 APM以及用户访问监测 RUM，最终通过 DataKit 将这些数据有效地关联起来。我把需要采集的数据列了一张表格：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/11\/61\/11fe74d8da1d08f09a4690e6c3559861.jpg?wh=1920x1080\" alt=\"图片\"><\/p><p>下面我们将针对各项技术栈一一进行介绍。<\/p><h3>Nginx<\/h3><p>Nginx 相信你已经比较熟悉了。因为Nginx 的应用场景广泛，所以对大部分企业来说还是很重要的。如何保障 Nginx 的健康与稳定也是企业内部的运维人员非常关心的一件事。<\/p><p>Nginx 自身提供了不少数据源可以反馈自身的状态。比方说，Nginx 自带的性能指标模块 with-http_stub_status_module 就可以直接获取  Nginx  相关的数据（例如请求连接数、处理连接数等）。同时， Nginx 日志（包括 access.log 和 error.log）可以用来进行具体的请求层面的分析，像 PV 数量、UV 数量、请求错误统计等。性能指标与日志的结合就可以快速了解 Nginx 自身的很多状态。<\/p><p>但是，文本类的日志数据格式观看起来既不方便也不美观，更重要的是，这些数据格式不能实时反映 Nginx 相关请求数或服务器请求状态的变化趋势。<strong>我们可以通过采集 Nginx 的性能状态和日志，把数据放到同一平台同一界面展现出来，借此提高使用人员的工作效率。<\/strong><\/p><p>Nginx 相关的数据展现效果如下（这是观测云内置的仪表盘，你也可以根据自己的需要，通过内置的各种视图部件进行自定义），这样可以将日志信息形成指标，同时也能展现客户端请求的数据。<\/p><p>另一方面，观测云中的仪表盘并不仅仅只是静态的视图，我们还可以进行相关的下钻跳转，从而从更多维度对数据进行分析。在这节课，我们主要介绍数据的接入。下一讲，我会进一步讲解接入之后，如何分析问题。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/9c\/df\/9c3fde639f26060748796a162b688bdf.png?wh=1731x695\" alt=\"图片\"><\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/52\/20\/52655f2003cc1cc8f47554891b4f2420.png?wh=1730x660\" alt=\"图片\"><\/p><p>上图展现的是观测云中提供的内置视图模板。下面我们来解读一下具体的接入方式。<\/p><p>在 Nginx 的所在的主机中安装好 DataKit 之后，（或是通过 DaemonSet 部署来支持 Kubernetes 环境），需要进行几步简单的配置：<\/p><ol>\n<li>安装 Nginx 的 with-http_stub_status_module 模块；<\/li>\n<li>在 Nginx.conf 中增添 nginx_status 的 location 转发；<\/li>\n<\/ol><pre><code class=\"language-plain\">$ cd \/etc\/nginx&nbsp; &nbsp;\n&nbsp; &nbsp;## nginx 路径根据实际情况而定\n$ vim nginx.conf\n\n$&nbsp; server{\n&nbsp; &nbsp; &nbsp;listen 80;&nbsp; &nbsp;\n&nbsp; &nbsp; &nbsp;server_name localhost;\n&nbsp; &nbsp; &nbsp;##端口可自定义\n&nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; &nbsp; location \/nginx_status {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; stub_status&nbsp; on;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; allow 127.0.0.1;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; deny all;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}&nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n<\/code><\/pre><ol start=\"3\">\n<li>启用 DataKit 的 Nginx.conf，并修改 inputs：<\/li>\n<\/ol><pre><code class=\"language-plain\">$ cd \/usr\/local\/datakit\/conf.d\/nginx\/\n$ cp nginx.conf.sample nginx.conf\n$ vim&nbsp; nginx.conf\n\n#修改如下内容\n[[inputs.nginx]]\n&nbsp; &nbsp; &nbsp; &nbsp; url = http:\/\/localhost\/nginx_status\n[inputs.nginx.log]\n&nbsp; &nbsp; &nbsp; &nbsp; files = [\"\/var\/log\/nginx\/access.log\",\"\/var\/log\/nginx \/error.log\"]\n\n#保存文件后重启 datakit&nbsp; &nbsp;&nbsp;\n$ service datakit restart\n<\/code><\/pre><h3>MySQL<\/h3><p>再来看下MySQL。MySQL 监测场景主要展示了 MySQL 的基础信息、链接信息、存储空间信息、InnoDB 信息、性能信息、锁信息以及日志信息（包括 \/var\/log\/mysql\/*.log）。一般来说，需要为监测 MySQL 创建一个单独的账号，赋予该用户在本地或远程读取数据的权限。<\/p><p>MySQL的详细配置在这里就不多说了，它跟 Nginx 类似，只要修改 DataKit 的 MySQL inputs 就可以了。具体可以参考<a href=\"https:\/\/www.yuque.com\/dataflux\/datakit\/mysql\">相关文档<\/a>。<\/p><p>采集好数据后，可以在观测云上看到这样的仪表盘（类似 Nginx、MySQL 的仪表盘，也可以自定义修改）：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/d3\/a5\/d3e69625e612cb1a2cbe4fb5d57465a5.png?wh=1728x533\" alt=\"图片\"><\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/e3\/aa\/e38df6100f13c2ac8fb60446a919beaa.png?wh=1722x418\" alt=\"图片\"><\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/a3\/89\/a36d13c30e83a81b8e77e5a31d577489.png?wh=1719x538\" alt=\"图片\"><\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/e1\/9c\/e19a30cf44f47cafc296eaa27ce8869c.png?wh=1718x215\" alt=\"图片\"><\/p><h3>Redis<\/h3><p>监视 Redis 可以帮助你在两个方面发现问题：Redis 本身的资源问题以及支持基础架构中其他地方出现的问题。我们可以从下面几个维度中对 Redis 进行监测：性能指标、内存指标、基本活动指标、持续性指标、以及错误指标。Redis 的详细配置可以参考<a href=\"https:\/\/www.yuque.com\/dataflux\/datakit\/redis\">相关文档<\/a>。<\/p><p>采集数据之后，在观测云可以汇总出下面这样的仪表盘（类似 Nginx、Redis 仪表盘，也可以自定义修改）：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/8f\/dc\/8f9a27c939905e42eebcc77830e75cdc.png?wh=1701x925\" alt=\"图片\"><\/p><h3>JVM<\/h3><p>这里只要在 Datakit 中启用 JVM 的 inputs 即可，不需要进行修改。Java 应用启动的脚本，将在待会进行详细的介绍。<\/p><pre><code class=\"language-plain\">$ cd \/usr\/local\/datakit\/conf.d\/statsd\/\n$ cp statsd.conf.sample ddtrace-jvm-statsd.conf \n$ vim ddtrace-jvm-statsd.conf\n\n# 默认不需要修改\n<\/code><\/pre><p>数据采集完毕后，在观测云可以汇总出如下界面：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/94\/2a\/94b4a71c0e495dab60f64292fd775c2a.png?wh=1701x596\" alt=\"图片\"><\/p><h3>日志采集<\/h3><p>这一步采集的不仅仅是标准日志（ Nginx、MySQL、Redis 等），也包括业务日志，例如，若依系统就有 system 服务日志。<\/p><p>你可以通过下面这样方式来配置日志采集。<\/p><pre><code class=\"language-plain\">$ cd \/usr\/local\/datakit\/conf.d\/log\/\n$ cp logging.conf.sample logging.conf\n$ vim logging.conf\n\n## 修改 log 路径为正确的应用日志的路径\n## source 与 service 为必填字段，可以直接用应用名称，用以区分不同的日志名称\n\n&nbsp; [inputs.logging]\n&nbsp; &nbsp; logfiles = [\n&nbsp; &nbsp; &nbsp; \"\/usr\/local\/ruoyi\/logs\/ruoyi-system\/error.log\",\n&nbsp; &nbsp; &nbsp; \"\/usr\/local\/ruoyi\/logs\/ruoyi-system\/info.log\",]\n&nbsp; &nbsp; source = \"ruoyi-system\"\n&nbsp; &nbsp; service = \"ruoyi-system\"\n &nbsp; pipeline = \"ruoyi-system.p\"\n<\/code><\/pre><p>这里的 Pipeline 就是 grok 语句（如下所示），主要用来解析文本日志， 将日志中的各个字段提取出来，形成结构化的数据。<\/p><pre><code class=\"language-plain\">$ cd \/usr\/local\/datakit\/pipeline\/\n$ vim ruoyi_system.p\n\n##示例：\n#日志样式&nbsp;\n#2021-06-25 14:27:51.952 [http-nio-9201-exec-7] INFO&nbsp; c.r.s.c.SysUserController - [list,70] ruoyi-08-system 5430221015886118174 6503455222153372731 - 查询用户\n\n##示例 grok，复制如下内容至 ruoyi_system.p 中\n\ngrok(_, \"%{TIMESTAMP_ISO8601:time} %{NOTSPACE:thread_name} %{LOGLEVEL:level} \\\\s+%{NOTSPACE:class_name} - \\\\[%{NOTSPACE:method_name},%{NUMBER:line}\\\\] %{DATA:service} %{DATA:trace_id} %{DATA:span_id} - %{GREEDYDATA:msg}\")\n\ndefault_time(time)\n<\/code><\/pre><h3>应用性能监测 APM<\/h3><p>APM 的全称是应用性能监测（Application Performance Monitoring），这是一种随着互联网的发展衍生出的监控技术，它的存在就是为了解决互联网用户高并发、大流量带来的应用性能瓶颈问题，从开发和运维的角度将应用程序的层层调用逻辑透明化，从而方便企业快速进行故障定位，降低 MTTR（Mean time to repair，平均故障修复时间），提升整体的用户体验。<\/p><p>从本质上讲，APM 与 NPM（旁路监听）、日志等部署方式有比较大的区别，应用场景也略有不同。APM 的部署方式往往是侵入式的（字节码注入或者 AOP），主要是为了方便研发和运维查看系统整体运行状态、健康程度以及资源消耗或异常问题（包括外部 API 、数据库调用、自身更细粒度的代码及方法调用），它更偏向于应用侧的系统性能及稳定性保障。<\/p><p>观测云目前支持所有支持 Opentracing 协议的 APM 监控工具，例如市面上比较流行的 Skywalking、Zipkin、Jaeger、ddtrace 等，以及 OpenTelemetry。具体接入方式也与原工具接入方式一致，同时在 DataKit 中开启对应的采集配置，就可以将链路数据打至观测云了。<\/p><p>这里，我们使用 DataDog 的开源 ddtrace-agent 实现数据采集。需要先 kill 掉原有应用启动进程，然后添加 ddtrace 参数，重启应用。可以使用 ps -ef | grep ruoyi 来查找若依系统的进程。<\/p><p>添加 ddtrace-agent 后的应用启动脚本示例如下（观测云支持 ddtrace 作为 APM 的探针来收集数据）：<\/p><pre><code class=\"language-plain\">$ cd \/usr\/local\/ruoyi\/\n$ nohup java -Dfile.encoding=utf-8 -javaagent:dd-java-agent-0.80.0.jar -XX:FlightRecorderOptions=stackdepth=256 -Ddd.logs.injection=true -Ddd.service=ruoyi-gateway -Ddd.service.mapping=redis:redis_ruoyi -Ddd.agent.port=9529 -Ddd.jmxfetch.enabled=true -Ddd.jmxfetch.check-period=1000&nbsp; -Ddd.jmxfetch.statsd.port=8125 -Ddd.version=1.0 -jar ruoyi-gateway.jar &gt; logs\/gateway.log&nbsp; 2&gt;&amp;1 &amp;\n&nbsp;\n$ nohup java -Dfile.encoding=utf-8 -javaagent:dd-java-agent-0.80.0.jar&nbsp; -XX:FlightRecorderOptions=stackdepth=256 -Ddd.logs.injection=true -Ddd.service=ruoyi-auth -Ddd.service.mapping=redis:redis_ruoyi -Ddd.env=staging -Ddd.agent.port=9529 -Ddd.jmxfetch.enabled=true -Ddd.jmxfetch.check-period=1000 -Ddd.jmxfetch.statsd.port=8125 -Ddd.version=1.0 -jar ruoyi-auth.jar &gt; logs\/auth.log&nbsp; 2&gt;&amp;1 &amp;&nbsp;\n&nbsp;\n$ nohup java -Dfile.encoding=utf-8 -javaagent:dd-java-agent-0.80.0.jar -XX:FlightRecorderOptions=stackdepth=256 -Ddd.logs.injection=true -Ddd.service=ruoyi-modules-system -Ddd.service.mapping=redis:redis_ruoyi,mysql:mysql_ruoyi -Ddd.env=dev -Ddd.agent.port=9529 -Ddd.jmxfetch.enabled=true -Ddd.jmxfetch.check-period=1000 -Ddd.jmxfetch.statsd.port=8125 -Ddd.version=1.0 -jar ruoyi-modules-system.jar &gt; logs\/system.log&nbsp; 2&gt;&amp;1 &amp;&nbsp;\n<\/code><\/pre><p>建立APM 之后，可以自动发现服务的拓扑、互相间的关系，还能查看链路的详细信息：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/b9\/a3\/b9e693aba9ac46a2f7c1e1f33d8ec8a3.png?wh=1342x1174\" alt=\"图片\"><\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/7c\/6a\/7c8aca39c525dd2yy2713fbe4208fe6a.png?wh=1920x434\" alt=\"图片\"><\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/00\/c9\/00bf32bf16d9746f1443c16c9c5675c9.png?wh=1920x996\" alt=\"图片\"><\/p><h3>用户访问监测 RUM<\/h3><p>我们再来看下RUM。<\/p><p>RUM全称是 Real User Monitoring，用户访问监测。随着移动互联网的发展，越来越多的企业最终的业务表现形式都汇聚到了终端用户侧，也就是RUM端。具体形式有 Mobile App、Web页面、小程序（微信、支付宝、头条）等。真实用户的终端体验会直接影响终端用户的新增、留存、企业形象甚至企业的营收。<\/p><p>那如何提升终端用户的使用体验呢？这是互联网行业乃至正在逐步进行数字化转型的传统企业必须要考虑的一个问题。<\/p><p>RUM采集数据的方式经过了好几代变更。目前市面上常见的是基于 W3C（万维网联盟）定义的 <a href=\"https:\/\/www.w3.org\/TR\/navigation-timing\/\">navigation-timing<\/a> 标准，该标准详细定义了各种浏览器事件，通过浏览器事件的简单计算就可以算出来前端页面的首屏、白屏、DOM 加载、HTML 加载等时长，能够比测试环境的 F12 检查者模式更有效地收集生产环境中真实用户的前端体验，因此在当前 H5 应用场景越来越多的情况下极为流行。国内的很多商业软件都是依赖这个标准定制的 Web 监测体系。<\/p><p>但是，随着浏览器（尤其是 Chrome）以及前端技术的发展，navigation-timing 的局限性越来越明显。例如，前后端分离下单页面越来越多，在这种场景下，基于 navigation-timing 进行数据采集会比较繁琐。因此，W3C 又推出了一个新的标准  <a href=\"https:\/\/github.com\/w3c\/paint-timing\/\">PaintTiming-github<\/a>。<\/p><p>这个标准新提出了一些指标，包括：首次绘制（First Paint）、首次内容绘制（First Contentful Paint）等。这些指标能够更真实地反映用户在访问 Web 页面时的真实体验。我们这个示例采用的就是支持 PaingTiming 规范的数据采集。如果你对这个规范感兴趣，可以进一步阅读 <a href=\"https:\/\/zhuanlan.zhihu.com\/p\/30389490\">《使用 Paint Timing API 提高性能》<\/a> <a href=\"https:\/\/www.w3cplus.com\/performance\/paint-timing-api.html\">《使用 Paint Timing API》<\/a>这两篇文章。<\/p><p>我们可以在前端页面 index.html 中接入 RUM 可观测性 JavaScript 文件：<\/p><pre><code class=\"language-plain\">$ cd \/usr\/local\/ruoyi\/dist\/\n\n\/\/ 记得备份\n$ cp index.html index.html.bkd\n\n\/\/ 在 index.html 中添加 df-js\n\/\/ 复制 DF 平台上的 js 内容，放至 index.html 内的 &lt;\/head&gt; 之前，然后保存文件,示例如下\n\n$ vim index.html\n\n&lt;script src=\"https:\/\/static.dataflux.cn\/browser-sdk\/v2\/dataflux-rum.js\" type=\"text\/javascript\"&gt;&lt;\/script&gt;\n&lt;script&gt;\n&nbsp; window.DATAFLUX_RUM &amp;&amp;\n&nbsp; &nbsp; window.DATAFLUX_RUM.init({\n&nbsp; &nbsp; &nbsp; applicationId: 'xxxxxxxxxxxxxxxxxxxxxxxxxx',\n&nbsp; &nbsp; &nbsp; datakitOrigin: 'xxx.xxx.xxx.xxx:9529',\n&nbsp; &nbsp; &nbsp; env: 'test',\n&nbsp; &nbsp; &nbsp; version: '1.0.0',\n&nbsp; &nbsp; &nbsp; trackInteractions: true,\n&nbsp; &nbsp; &nbsp; allowedDDTracingOrigins:[\"xxx.xxx.xxx.xxx\"]\n&nbsp; &nbsp; &nbsp; })\n&lt;\/script&gt;&lt;\/head&gt;&nbsp;\n<\/code><\/pre><p>请注意，上述代码中的 “xxx” 都需要根据实际情况进行更改，更改说明如下。<\/p><ul>\n<li>datakitOrigin：datakit 地址（datakit 所在服务器的 IP 或域名），观测云中 RUM 数据流向为：rum.js 文件 -&gt; datakit -&gt; dataway -&gt; 观测云平台，如果是生产环境，需要将该 IP 设置为域名或 SLB 地址，测试环境需填写内网IP，对应 datakit 的服务器 9529 端口。<\/li>\n<li>trackInteractions：用户行为采集配置项，可实现页面端用户操作行为统计。<\/li>\n<li>allowedDDTracingOrigins：打通前后端（RUM 与APM）的配置项，可按需进行设置，需在此处填写与前端页面有交互关系的后端服务器所对应的域名或IP。<\/li>\n<\/ul><p>这样在若依系统页面有访问之后，就可以在观测云的用户访问监测模块看到数据：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/5f\/a5\/5f785acfed9d9ee482ec2147cb686fa5.png?wh=1920x1214\" alt=\"图片\"><\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/58\/f4\/5872386a5ee4b146b6f3611b534089f4.png?wh=1920x787\" alt=\"图片\"><\/p><h3>RUM 与 APM 数据打通<\/h3><p>在我们分析问题的时候，很多情况下需要综合前端 RUM 和后端 APM 的情况来做关联分析，所以打通 RUM 和 APM 的数据是非常必要的。<\/p><p>要打通数据，需要在前端 HTML 中已添加的 df-rum-js 中添加 allowedDDTracingOrigins 标签，并填写前端对应的后端域名，例如要在 testobservability.local 添加 RUM 监控，需要在 allowedDDTracingOrigins 里配置 <a href=\"https:\/\/www\">https:\/\/www<\/a><a href=\"https:\/\/www.dataflux.cn\/\">.<\/a>testobservability.local。如果存在多个域名，则需要把这些域名都进行配置，用逗号隔开，第三方域名可以不配置。<\/p><h3>日志与 APM 实现关联<\/h3><p>同样，为了构建数据联合的可观测性，我们也要把日志和应用性能监测关联起来，我们需要修改应用日志的输出格式（需开发介入）。例如，如果应用日志输出格式文件为 logback\/log4j，ddtrace-agent  java-0.70 版本后会自动将跟踪标识注入，只需要修改 logback\/log4j 的 XML文件，在应用日志的输出内容中添加 trace_id 字段即可。更详细的说明你可以参考 <a href=\"https:\/\/docs.datadoghq.com\/logs\/log_collection\/java\/?tab=logback\">datadog 官方文档<\/a>。<\/p><pre><code class=\"language-plain\">## 首先在 pom.xml 的 dependency 中引入 datadog 依赖\n\n&lt;dependency&gt;\n   &lt;groupId&gt;com.datadoghq&lt;\/groupId&gt; \n   &lt;artifactId&gt;dd-java-agent&lt;\/artifactId&gt; \n   &lt;version&gt;0.83.0&lt;\/version&gt; \n&lt;\/dependency&gt;\n\n## 0.83.0 为对应 agent 版本号，请查看datakit\/data 中的 agent 版本号\n<\/code><\/pre><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/57\/ec\/579f85847ced585a5cf5b9f14a71d0ec.png?wh=1277x841\" alt=\"图片\"><\/p><p>将日志和 APM 关联到一起之后，在 APM 链路数据下方的日志模块直接搜索 trace_id，就可以查看此次链路调用对应产生的应用日志了。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/92\/1c\/92788e4a46ab748e68337db455e59b1c.png?wh=1920x909\" alt=\"图片\"><\/p><h2>小结<\/h2><p>在这一讲中，我为你介绍了如何针对一个微服务系统，从指标、日志、链路追踪、前端用户访问等各维度来采集可观测性的数据，并建立数据之间的关联性。<\/p><p>有了这些数据之后，下节课，我们就可以利用它们分析和排查问题了。<\/p><h2>课后题<\/h2><p>在这节课的最后，我留给你一道作业题。<\/p><p>请根据我们这节课的内容，搭建一个测试环境。你也可以选择一个开源或是你正在维护的系统，来采集和展现可观测性相关的数据。<\/p><p>欢迎你在留言区和我交流讨论，我们下节课见！<\/p>","footer_cover_data":{"img_url":"","mp_url":"","link_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{},"product_id":100121701,"like_count":4,"had_liked":false,"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/95\/7e\/950fe0cbyy06433b949aec41683aca7e.mp3","id":577864,"had_viewed":false,"article_title":"10 | 实战 1：从 0 到 1 建立系统应用的可观测性","column_bgcolor":"#F6F7FB","share":{"content":"理论+实战，为系统可靠性保驾护航","title":"翁一磊 · 深入浅出可观测性","poster":"https:\/\/static001.geekbang.org\/resource\/image\/75\/ac\/75ed4df32000df3197a90a743543b5ac.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/3c\/48\/3cac6b933d381b076e8dc065cc1aaf48.jpg"},"is_video_preview":false,"article_summary":"这节课，我会基于一个典型的Spring Cloud的应用，给你讲解如何从 0 到 1 来构建端到端的全链路可观测性，如何打通可观测性数据的联合。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/85\/2f\/85b702876a59dff0d674a81a34857f2f.jpeg","column_sale_type":2,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/3c\/48\/3cac6b933d381b076e8dc065cc1aaf48.jpg","column_id":531,"audio_time_arr":{"m":"13","s":"38","h":"00"},"video_time":"","audio_title":"9.30 10-翁一磊_01.MP3","audio_md5":"950fe0cbyy06433b949aec41683aca7e","video_size":0,"text_read_percent":0,"comment_count":3,"cid":531,"article_sharetitle":"实战 1：从 0 到 1 建立系统应用的可观测性","column_is_onboard":true,"article_cshort":"<p>你好，我是翁一磊。<\/p><p>在前面的课程里，我们学习了很多可观测性的理论知识。那基础打好了，接下来就要真刀真枪地建立系统开始实战了。<\/p><p>这节课，我会基于一个典型的Spring&nbsp;Cloud的应用，给你讲解如何从 0 到 1 来构建端到端的全链路可观测性，如何打通可观测性数据的联合。<\/p><h2>实战业务系统简介<\/h2><p>我们这个实战项目采用的系统是若依系统，这是一套开源的后台管理系统，同时也是一个 Java EE 企业级快速开发平台，它由多个微服务组成，内置模块诸多，如：部门管理、角色用户、菜单及按钮授权、数据权限、系统参数、日志管理、通知公告等。如果需要项目的<a href=\"https:\/\/gitee.com\/y_project\/RuoYi-Cloud\">开源地址<\/a>和<a href=\"http:\/\/demo.ruoyi.vip\/login\">演示地址<\/a>，你可以点开链接查看。<\/p><p>若依系统的架构主要包括下面几类。<\/p><ul>\n<li>Web 页面：放置在 Nginx 中。<\/li>\n<li>注册中心：Nacos。<\/li>\n<li>网关：Gateway。<\/li>\n<li>服务模块：Auth、System。<\/li>\n<li>数据库：MySQL。<\/li>\n<li>缓存：Redis。<\/li>\n<\/ul><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/7f\/76\/7ff92b8b6fdaa7e9f66454fd6d531b76.jpg?wh=1874x1157\" alt=\"图片\"><\/p><p>项目中涉及的技术栈如下表所示：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/14\/71\/14473a8a122895015ec986e05565ea71.jpg?wh=1920x1080\" alt=\"图片\"><\/p><p>提醒一下，我们为了构建可观测性实战选择的是单机 Jar 包版应用，它可以将所有服务模块都部署在同一台服务器上，利用不同端口对服务进行访问。<\/p><h2>建立业务系统的可观测<\/h2><h3>概述<\/h3><p>接下来，我们就一起针对若依这个系统建立可观测性。市面上有不少的开源工具可供选择，但是从某种意义上来说，目前并没有一个开源工具能够完整地解决可观测性的问题，基本都需要把多个工具拼凑到一起来用。在遇到一些业务问题时，仍然需要访问不同的工具来分析问题，相关的日志、链路以及指标数据也没有很好地融合，这样的操作并不能有效减轻运维以及开发人员的分析调试成本和沟通成本。<\/p>","video_width":0,"column_could_sub":true,"article_ctime":1664899200,"score":"41664899200","video_media_map":{},"video_preview":{},"video":0,"video_time_arr":{"m":"","s":"","h":""},"video_total_seconds":0},"extra":{},"error":{}}