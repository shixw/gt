{"code":0,"data":{"video_id":"","sku":"100023901","video_cover":"","author_name":"王宝令","text_read_version":0,"audio_size":8344906,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/8b\/66\/8bbaab9f6ee4dac70a6aa7f060239a66.jpg","subtitles":{},"product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/06\/85\/068c0e218368700a2bc4befb300b2985\/ld\/ld.m3u8","chapter_id":"0","column_had_sub":true,"audio_dubber":"王宝令","is_finished":false,"inline_video_subtitles":{},"like":{"had_done":false,"count":130},"neighbors":{"left":{"id":97231,"article_title":"38 | 案例分析（一）：高性能限流器Guava RateLimiter"},"right":{"id":98134,"article_title":"40 | 案例分析（三）：高性能队列Disruptor"}},"audio_time":"00:08:43","video_height":0,"rate_percent":0,"article_content":"<p>Netty是一个高性能网络应用框架，应用非常普遍，目前在Java领域里，Netty基本上成为网络程序的标配了。Netty框架功能丰富，也非常复杂，今天我们主要分析Netty框架中的线程模型，而<strong>线程模型直接影响着网络程序的性能<\/strong>。<\/p><p>在介绍Netty的线程模型之前，我们首先需要把问题搞清楚，了解网络编程性能的瓶颈在哪里，然后再看Netty的线程模型是如何解决这个问题的。<\/p><h2>网络编程性能的瓶颈<\/h2><p>在<a href=\"https:\/\/time.geekbang.org\/column\/article\/95098\">《33 | Thread-Per-Message模式：最简单实用的分工方法》<\/a>中，我们写过一个简单的网络程序echo，采用的是阻塞式I\/O（BIO）。BIO模型里，所有read()操作和write()操作都会阻塞当前线程的，如果客户端已经和服务端建立了一个连接，而迟迟不发送数据，那么服务端的read()操作会一直阻塞，所以<strong>使用BIO模型，一般都会为每个socket分配一个独立的线程<\/strong>，这样就不会因为线程阻塞在一个socket上而影响对其他socket的读写。BIO的线程模型如下图所示，每一个socket都对应一个独立的线程；为了避免频繁创建、消耗线程，可以采用线程池，但是socket和线程之间的对应关系并不会变化。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/e7\/e2\/e712c37ea0483e9dde0d6efe76e687e2.png?wh=1138*393\" alt=\"\"><\/p><center><span class=\"reference\">BIO的线程模型<\/span><\/center><!-- [[[read_end]]] --><p>BIO这种线程模型适用于socket连接不是很多的场景；但是现在的互联网场景，往往需要服务器能够支撑十万甚至百万连接，而创建十万甚至上百万个线程显然并不现实，所以BIO线程模型无法解决百万连接的问题。如果仔细观察，你会发现互联网场景中，虽然连接多，但是每个连接上的请求并不频繁，所以线程大部分时间都在等待I\/O就绪。也就是说线程大部分时间都阻塞在那里，这完全是浪费，如果我们能够解决这个问题，那就不需要这么多线程了。<\/p><p>顺着这个思路，我们可以将线程模型优化为下图这个样子，可以用一个线程来处理多个连接，这样线程的利用率就上来了，同时所需的线程数量也跟着降下来了。这个思路很好，可是使用BIO相关的API是无法实现的，这是为什么呢？因为BIO相关的socket读写操作都是阻塞式的，而一旦调用了阻塞式API，在I\/O就绪前，调用线程会一直阻塞，也就无法处理其他的socket连接了。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/ea\/1f\/eafed0787b82b0b428e1ec0927029f1f.png?wh=1135*448\" alt=\"\"><\/p><center><span class=\"reference\">理想的线程模型图<\/span><\/center><p>好在Java里还提供了非阻塞式（NIO）API，<strong>利用非阻塞式API就能够实现一个线程处理多个连接了<\/strong>。那具体如何实现呢？现在普遍都是<strong>采用Reactor模式<\/strong>，包括Netty的实现。所以，要想理解Netty的实现，接下来我们就需要先了解一下Reactor模式。<\/p><h2>Reactor模式<\/h2><p>下面是Reactor模式的类结构图，其中Handle指的是I\/O句柄，在Java网络编程里，它本质上就是一个网络连接。Event Handler很容易理解，就是一个事件处理器，其中handle_event()方法处理I\/O事件，也就是每个Event Handler处理一个I\/O Handle；get_handle()方法可以返回这个I\/O的Handle。Synchronous Event Demultiplexer可以理解为操作系统提供的I\/O多路复用API，例如POSIX标准里的select()以及Linux里面的epoll()。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/a7\/40\/a7ba3c8d6c49e50d9288baf0c03fa240.png?wh=1142*571\" alt=\"\"><\/p><center><span class=\"reference\">Reactor模式类结构图<\/span><\/center><p>Reactor模式的核心自然是<strong>Reactor这个类<\/strong>，其中register_handler()和remove_handler()这两个方法可以注册和删除一个事件处理器；<strong>handle_events()方式是核心<\/strong>，也是Reactor模式的发动机，这个方法的核心逻辑如下：首先通过同步事件多路选择器提供的select()方法监听网络事件，当有网络事件就绪后，就遍历事件处理器来处理该网络事件。由于网络事件是源源不断的，所以在主程序中启动Reactor模式，需要以 <code>while(true){}<\/code> 的方式调用handle_events()方法。<\/p><pre><code>void Reactor::handle_events(){\n  \/\/通过同步事件多路选择器提供的\n  \/\/select()方法监听网络事件\n  select(handlers);\n  \/\/处理网络事件\n  for(h in handlers){\n    h.handle_event();\n  }\n}\n\/\/ 在主程序中启动事件循环\nwhile (true) {\n  handle_events();\n<\/code><\/pre><h2>Netty中的线程模型<\/h2><p>Netty的实现虽然参考了Reactor模式，但是并没有完全照搬，<strong>Netty中最核心的概念是事件循环（EventLoop）<\/strong>，其实也就是Reactor模式中的Reactor，<strong>负责监听网络事件并调用事件处理器进行处理<\/strong>。在4.x版本的Netty中，网络连接和EventLoop是稳定的多对1关系，而EventLoop和Java线程是1对1关系，这里的稳定指的是关系一旦确定就不再发生变化。也就是说一个网络连接只会对应唯一的一个EventLoop，而一个EventLoop也只会对应到一个Java线程，所以<strong>一个网络连接只会对应到一个Java线程<\/strong>。<\/p><p>一个网络连接对应到一个Java线程上，有什么好处呢？最大的好处就是对于一个网络连接的事件处理是单线程的，这样就<strong>避免了各种并发问题<\/strong>。<\/p><p>Netty中的线程模型可以参考下图，这个图和前面我们提到的理想的线程模型图非常相似，核心目标都是用一个线程处理多个网络连接。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/03\/04\/034756f1d76bb3af09e125de9f3c2f04.png?wh=1137*563\" alt=\"\"><\/p><center><span class=\"reference\">Netty中的线程模型<\/span><\/center><p>Netty中还有一个核心概念是<strong>EventLoopGroup<\/strong>，顾名思义，一个EventLoopGroup由一组EventLoop组成。实际使用中，一般都会创建两个EventLoopGroup，一个称为bossGroup，一个称为workerGroup。为什么会有两个EventLoopGroup呢？<\/p><p>这个和socket处理网络请求的机制有关，socket处理TCP网络连接请求，是在一个独立的socket中，每当有一个TCP连接成功建立，都会创建一个新的socket，之后对TCP连接的读写都是由新创建处理的socket完成的。也就是说<strong>处理TCP连接请求和读写请求是通过两个不同的socket完成的<\/strong>。上面我们在讨论网络请求的时候，为了简化模型，只是讨论了读写请求，而没有讨论连接请求。<\/p><p><strong>在Netty中，bossGroup就用来处理连接请求的，而workerGroup是用来处理读写请求的<\/strong>。bossGroup处理完连接请求后，会将这个连接提交给workerGroup来处理， workerGroup里面有多个EventLoop，那新的连接会交给哪个EventLoop来处理呢？这就需要一个负载均衡算法，Netty中目前使用的是<strong>轮询算法<\/strong>。<\/p><p>下面我们用Netty重新实现以下echo程序的服务端，近距离感受一下Netty。<\/p><h2>用Netty实现Echo程序服务端<\/h2><p>下面的示例代码基于Netty实现了echo程序服务端：首先创建了一个事件处理器（等同于Reactor模式中的事件处理器），然后创建了bossGroup和workerGroup，再之后创建并初始化了ServerBootstrap，代码还是很简单的，不过有两个地方需要注意一下。<\/p><p>第一个，如果NettybossGroup只监听一个端口，那bossGroup只需要1个EventLoop就可以了，多了纯属浪费。<\/p><p>第二个，默认情况下，Netty会创建“2*CPU核数”个EventLoop，由于网络连接与EventLoop有稳定的关系，所以事件处理器在处理网络事件的时候是不能有阻塞操作的，否则很容易导致请求大面积超时。如果实在无法避免使用阻塞操作，那可以通过线程池来异步处理。<\/p><pre><code>\/\/事件处理器\nfinal EchoServerHandler serverHandler \n  = new EchoServerHandler();\n\/\/boss线程组  \nEventLoopGroup bossGroup \n  = new NioEventLoopGroup(1); \n\/\/worker线程组  \nEventLoopGroup workerGroup \n  = new NioEventLoopGroup();\ntry {\n  ServerBootstrap b = new ServerBootstrap();\n  b.group(bossGroup, workerGroup)\n   .channel(NioServerSocketChannel.class)\n   .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() {\n     @Override\n     public void initChannel(SocketChannel ch){\n       ch.pipeline().addLast(serverHandler);\n     }\n    });\n  \/\/bind服务端端口  \n  ChannelFuture f = b.bind(9090).sync();\n  f.channel().closeFuture().sync();\n} finally {\n  \/\/终止工作线程组\n  workerGroup.shutdownGracefully();\n  \/\/终止boss线程组\n  bossGroup.shutdownGracefully();\n}\n\n\/\/socket连接处理器\nclass EchoServerHandler extends \n    ChannelInboundHandlerAdapter {\n  \/\/处理读事件  \n  @Override\n  public void channelRead(\n    ChannelHandlerContext ctx, Object msg){\n      ctx.write(msg);\n  }\n  \/\/处理读完成事件\n  @Override\n  public void channelReadComplete(\n    ChannelHandlerContext ctx){\n      ctx.flush();\n  }\n  \/\/处理异常事件\n  @Override\n  public void exceptionCaught(\n    ChannelHandlerContext ctx,  Throwable cause) {\n      cause.printStackTrace();\n      ctx.close();\n  }\n}\n<\/code><\/pre><h2>总结<\/h2><p>Netty是一个款优秀的网络编程框架，性能非常好，为了实现高性能的目标，Netty做了很多优化，例如优化了ByteBuffer、支持零拷贝等等，和并发编程相关的就是它的线程模型了。Netty的线程模型设计得很精巧，每个网络连接都关联到了一个线程上，这样做的好处是：对于一个网络连接，读写操作都是单线程执行的，从而避免了并发程序的各种问题。<\/p><p>你要想深入理解Netty的线程模型，还需要对网络相关知识有一定的理解，关于Java IO的演进过程，你可以参考<a href=\"http:\/\/gee.cs.oswego.edu\/dl\/cpjslides\/nio.pdf\">Scalable IO in Java<\/a>，至于TCP\/IP网络编程的知识你可以参考韩国尹圣雨写的经典教程——《TCP\/IP网络编程》。<\/p><p>欢迎在留言区与我分享你的想法，也欢迎你在留言区记录你的思考过程。感谢阅读，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给更多的朋友。<\/p><p><\/p>","footer_cover_data":{"img_url":"","mp_url":"","link_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{},"product_id":100023901,"like_count":156,"had_liked":false,"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/06\/85\/068c0e218368700a2bc4befb300b2985.mp3","id":97622,"had_viewed":false,"article_title":"39 | 案例分析（二）：高性能网络应用框架Netty","column_bgcolor":"#cbd0de","share":{"content":"当面试时问到多线程、锁的问题，你还是答不上来怎么办？推荐给你《Java 并发编程实战》专栏，带你搞懂并发里的那些Bug问题，全面提升你的并发编程能力，大厂面试绝对不是问题。","title":"王宝令 · Java并发编程实战","poster":"https:\/\/static001.geekbang.org\/resource\/image\/ce\/50\/cebb5cfded54f4bfcca4d75ffe915350.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg"},"is_video_preview":false,"article_summary":"Netty是一个款优秀的网络编程框架，性能非常好。它的线程模型设计得很精巧，从而避免了并发程序的各种问题。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/6c\/d6\/6c00efd94c472bea5d5041a50ac9fad6.jpeg","column_sale_type":2,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"audio_time_arr":{"m":"08","s":"43","h":"00"},"video_time":"","audio_title":"宝令39（新新修改）～5.27 宝令 39_01_01","audio_md5":"068c0e218368700a2bc4befb300b2985","video_size":0,"text_read_percent":0,"comment_count":32,"cid":159,"article_sharetitle":"案例分析（二）：高性能网络应用框架Netty","column_is_onboard":true,"article_cshort":"<p>Netty是一个高性能网络应用框架，应用非常普遍，目前在Java领域里，Netty基本上成为网络程序的标配了。Netty框架功能丰富，也非常复杂，今天我们主要分析Netty框架中的线程模型，而<strong>线程模型直接影响着网络程序的性能<\/strong>。<\/p><p>在介绍Netty的线程模型之前，我们首先需要把问题搞清楚，了解网络编程性能的瓶颈在哪里，然后再看Netty的线程模型是如何解决这个问题的。<\/p><h2>网络编程性能的瓶颈<\/h2><p>在<a href=\"https:\/\/time.geekbang.org\/column\/article\/95098\">《33 | Thread-Per-Message模式：最简单实用的分工方法》<\/a>中，我们写过一个简单的网络程序echo，采用的是阻塞式I\/O（BIO）。BIO模型里，所有read()操作和write()操作都会阻塞当前线程的，如果客户端已经和服务端建立了一个连接，而迟迟不发送数据，那么服务端的read()操作会一直阻塞，所以<strong>使用BIO模型，一般都会为每个socket分配一个独立的线程<\/strong>，这样就不会因为线程阻塞在一个socket上而影响对其他socket的读写。BIO的线程模型如下图所示，每一个socket都对应一个独立的线程；为了避免频繁创建、消耗线程，可以采用线程池，但是socket和线程之间的对应关系并不会变化。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/e7\/e2\/e712c37ea0483e9dde0d6efe76e687e2.png?wh=1138*393\" alt=\"\"><\/p><center><span class=\"reference\">BIO的线程模型<\/span><\/center>","video_width":0,"column_could_sub":true,"article_ctime":1558972800,"score":"61558972800","video_media_map":{},"video_preview":{},"video":0,"video_time_arr":{"m":"","s":"","h":""},"video_total_seconds":0},"extra":{},"error":{}}