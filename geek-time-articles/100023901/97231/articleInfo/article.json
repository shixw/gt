{"code":0,"data":{"video_id":"","sku":"100023901","video_cover":"","author_name":"王宝令","text_read_version":0,"audio_size":8804147,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/9d\/50\/9dd0ce93a7103552cd445766869b2150.jpg","subtitles":{},"product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/f6\/ba\/f6886442618684af26003b3dda798fba\/ld\/ld.m3u8","chapter_id":"0","column_had_sub":true,"audio_dubber":"王宝令","is_finished":false,"inline_video_subtitles":{},"like":{"had_done":false,"count":162},"neighbors":{"left":{"id":96736,"article_title":"37 | 设计模式模块热点问题答疑"},"right":{"id":97622,"article_title":"39 | 案例分析（二）：高性能网络应用框架Netty"}},"audio_time":"00:09:11","video_height":0,"rate_percent":0,"article_content":"<p>从今天开始，我们就进入案例分析模块了。 这个模块我们将分析四个经典的开源框架，看看它们是如何处理并发问题的，通过这四个案例的学习，相信你会对如何解决并发问题有个更深入的认识。<\/p><p>首先我们来看看<strong>Guava RateLimiter是如何解决高并发场景下的限流问题的<\/strong>。Guava是Google开源的Java类库，提供了一个工具类RateLimiter。我们先来看看RateLimiter的使用，让你对限流有个感官的印象。假设我们有一个线程池，它每秒只能处理两个任务，如果提交的任务过快，可能导致系统不稳定，这个时候就需要用到限流。<\/p><p>在下面的示例代码中，我们创建了一个流速为2个请求\/秒的限流器，这里的流速该怎么理解呢？直观地看，2个请求\/秒指的是每秒最多允许2个请求通过限流器，其实在Guava中，流速还有更深一层的意思：是一种匀速的概念，2个请求\/秒等价于1个请求\/500毫秒。<\/p><p>在向线程池提交任务之前，调用 <code>acquire()<\/code> 方法就能起到限流的作用。通过示例代码的执行结果，任务提交到线程池的时间间隔基本上稳定在500毫秒。<\/p><pre><code>\/\/限流器流速：2个请求\/秒\nRateLimiter limiter = \n  RateLimiter.create(2.0);\n\/\/执行任务的线程池\nExecutorService es = Executors\n  .newFixedThreadPool(1);\n\/\/记录上一次执行时间\nprev = System.nanoTime();\n\/\/测试执行20次\nfor (int i=0; i&lt;20; i++){\n  \/\/限流器限流\n  limiter.acquire();\n  \/\/提交任务异步执行\n  es.execute(()-&gt;{\n    long cur=System.nanoTime();\n    \/\/打印时间间隔：毫秒\n    System.out.println(\n      (cur-prev)\/1000_000);\n    prev = cur;\n  });\n}\n\n输出结果：\n...\n500\n499\n499\n500\n499\n<\/code><\/pre><h2>经典限流算法：令牌桶算法<\/h2><p>Guava的限流器使用上还是很简单的，那它是如何实现的呢？Guava采用的是<strong>令牌桶算法<\/strong>，其<strong>核心是要想通过限流器，必须拿到令牌<\/strong>。也就是说，只要我们能够限制发放令牌的速率，那么就能控制流速了。令牌桶算法的详细描述如下：<\/p><!-- [[[read_end]]] --><ol>\n<li>令牌以固定的速率添加到令牌桶中，假设限流的速率是 r\/秒，则令牌每 1\/r 秒会添加一个；<\/li>\n<li>假设令牌桶的容量是 b ，如果令牌桶已满，则新的令牌会被丢弃；<\/li>\n<li>请求能够通过限流器的前提是令牌桶中有令牌。<\/li>\n<\/ol><p>这个算法中，限流的速率 r 还是比较容易理解的，但令牌桶的容量 b 该怎么理解呢？b 其实是burst的简写，意义是<strong>限流器允许的最大突发流量<\/strong>。比如b=10，而且令牌桶中的令牌已满，此时限流器允许10个请求同时通过限流器，当然只是突发流量而已，这10个请求会带走10个令牌，所以后续的流量只能按照速率 r 通过限流器。<\/p><p>令牌桶这个算法，如何用Java实现呢？很可能你的直觉会告诉你生产者-消费者模式：一个生产者线程定时向阻塞队列中添加令牌，而试图通过限流器的线程则作为消费者线程，只有从阻塞队列中获取到令牌，才允许通过限流器。<\/p><p>这个算法看上去非常完美，而且实现起来非常简单，如果并发量不大，这个实现并没有什么问题。可实际情况却是使用限流的场景大部分都是高并发场景，而且系统压力已经临近极限了，此时这个实现就有问题了。问题就出在定时器上，在高并发场景下，当系统压力已经临近极限的时候，定时器的精度误差会非常大，同时定时器本身会创建调度线程，也会对系统的性能产生影响。<\/p><p>那还有什么好的实现方式呢？当然有，Guava的实现就没有使用定时器，下面我们就来看看它是如何实现的。<\/p><h2>Guava如何实现令牌桶算法<\/h2><p>Guava实现令牌桶算法，用了一个很简单的办法，其关键是<strong>记录并动态计算下一令牌发放的时间<\/strong>。下面我们以一个最简单的场景来介绍该算法的执行过程。假设令牌桶的容量为 b=1，限流速率 r = 1个请求\/秒，如下图所示，如果当前令牌桶中没有令牌，下一个令牌的发放时间是在第3秒，而在第2秒的时候有一个线程T1请求令牌，此时该如何处理呢？<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/39\/ce\/391179821a55fc798c9c17a6991c1dce.png?wh=1142*478\" alt=\"\"><\/p><center><span class=\"reference\">线程T1请求令牌示意图<\/span><\/center><p>对于这个请求令牌的线程而言，很显然需要等待1秒，因为1秒以后（第3秒）它就能拿到令牌了。此时需要注意的是，下一个令牌发放的时间也要增加1秒，为什么呢？因为第3秒发放的令牌已经被线程T1预占了。处理之后如下图所示。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/1a\/87\/1a4069c830e18de087ba7f490aa78087.png?wh=1142*284\" alt=\"\"><\/p><center><span class=\"reference\">线程T1请求结束示意图<\/span><\/center><p>假设T1在预占了第3秒的令牌之后，马上又有一个线程T2请求令牌，如下图所示。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/2c\/2e\/2cf695d0888a93e1e2d020d9514f5a2e.png?wh=1142*367\" alt=\"\"><\/p><center><span class=\"reference\">线程T2请求令牌示意图<\/span><\/center><p>很显然，由于下一个令牌产生的时间是第4秒，所以线程T2要等待两秒的时间，才能获取到令牌，同时由于T2预占了第4秒的令牌，所以下一令牌产生时间还要增加1秒，完全处理之后，如下图所示。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/68\/f7\/68c09a96049aacda7936c52b801c22f7.png?wh=1142*377\" alt=\"\"><\/p><center><span class=\"reference\">线程T2请求结束示意图<\/span><\/center><p>上面线程T1、T2都是在<strong>下一令牌产生时间之前<\/strong>请求令牌，如果线程在<strong>下一令牌产生时间之后<\/strong>请求令牌会如何呢？假设在线程T1请求令牌之后的5秒，也就是第7秒，线程T3请求令牌，如下图所示。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/e3\/5c\/e3125d72eb3d84eabf6de6ab987e695c.png?wh=1142*342\" alt=\"\"><\/p><center><span class=\"reference\">线程T3请求令牌示意图<\/span><\/center><p>由于在第5秒已经产生了一个令牌，所以此时线程T3可以直接拿到令牌，而无需等待。在第7秒，实际上限流器能够产生3个令牌，第5、6、7秒各产生一个令牌。由于我们假设令牌桶的容量是1，所以第6、7秒产生的令牌就丢弃了，其实等价地你也可以认为是保留的第7秒的令牌，丢弃的第5、6秒的令牌，也就是说第7秒的令牌被线程T3占有了，于是下一令牌的的产生时间应该是第8秒，如下图所示。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/ba\/fc\/baf159d05b2abf650839e29a2399a4fc.png?wh=1142*344\" alt=\"\"><\/p><center><span class=\"reference\">线程T3请求结束示意图<\/span><\/center><p>通过上面简要地分析，你会发现，我们<strong>只需要记录一个下一令牌产生的时间，并动态更新它，就能够轻松完成限流功能<\/strong>。我们可以将上面的这个算法代码化，示例代码如下所示，依然假设令牌桶的容量是1。关键是<strong>reserve()方法<\/strong>，这个方法会为请求令牌的线程预分配令牌，同时返回该线程能够获取令牌的时间。其实现逻辑就是上面提到的：如果线程请求令牌的时间在下一令牌产生时间之后，那么该线程立刻就能够获取令牌；反之，如果请求时间在下一令牌产生时间之前，那么该线程是在下一令牌产生的时间获取令牌。由于此时下一令牌已经被该线程预占，所以下一令牌产生的时间需要加上1秒。<\/p><pre><code>class SimpleLimiter {\n  \/\/下一令牌产生时间\n  long next = System.nanoTime();\n  \/\/发放令牌间隔：纳秒\n  long interval = 1000_000_000;\n  \/\/预占令牌，返回能够获取令牌的时间\n  synchronized long reserve(long now){\n    \/\/请求时间在下一令牌产生时间之后\n    \/\/重新计算下一令牌产生时间\n    if (now &gt; next){\n      \/\/将下一令牌产生时间重置为当前时间\n      next = now;\n    }\n    \/\/能够获取令牌的时间\n    long at=next;\n    \/\/设置下一令牌产生时间\n    next += interval;\n    \/\/返回线程需要等待的时间\n    return Math.max(at, 0L);\n  }\n  \/\/申请令牌\n  void acquire() {\n    \/\/申请令牌时的时间\n    long now = System.nanoTime();\n    \/\/预占令牌\n    long at=reserve(now);\n    long waitTime=max(at-now, 0);\n    \/\/按照条件等待\n    if(waitTime &gt; 0) {\n      try {\n        TimeUnit.NANOSECONDS\n          .sleep(waitTime);\n      }catch(InterruptedException e){\n        e.printStackTrace();\n      }\n    }\n  }\n}\n<\/code><\/pre><p>如果令牌桶的容量大于1，又该如何处理呢？按照令牌桶算法，令牌要首先从令牌桶中出，所以我们需要按需计算令牌桶中的数量，当有线程请求令牌时，先从令牌桶中出。具体的代码实现如下所示。我们增加了一个<strong>resync()方法<\/strong>，在这个方法中，如果线程请求令牌的时间在下一令牌产生时间之后，会重新计算令牌桶中的令牌数，<strong>新产生的令牌的计算公式是：(now-next)\/interval<\/strong>，你可对照上面的示意图来理解。reserve()方法中，则增加了先从令牌桶中出令牌的逻辑，不过需要注意的是，如果令牌是从令牌桶中出的，那么next就无需增加一个 interval 了。<\/p><pre><code>class SimpleLimiter {\n  \/\/当前令牌桶中的令牌数量\n  long storedPermits = 0;\n  \/\/令牌桶的容量\n  long maxPermits = 3;\n  \/\/下一令牌产生时间\n  long next = System.nanoTime();\n  \/\/发放令牌间隔：纳秒\n  long interval = 1000_000_000;\n  \n  \/\/请求时间在下一令牌产生时间之后,则\n  \/\/ 1.重新计算令牌桶中的令牌数\n  \/\/ 2.将下一个令牌发放时间重置为当前时间\n  void resync(long now) {\n    if (now &gt; next) {\n      \/\/新产生的令牌数\n      long newPermits=(now-next)\/interval;\n      \/\/新令牌增加到令牌桶\n      storedPermits=min(maxPermits, \n        storedPermits + newPermits);\n      \/\/将下一个令牌发放时间重置为当前时间\n      next = now;\n    }\n  }\n  \/\/预占令牌，返回能够获取令牌的时间\n  synchronized long reserve(long now){\n    resync(now);\n    \/\/能够获取令牌的时间\n    long at = next;\n    \/\/令牌桶中能提供的令牌\n    long fb=min(1, storedPermits);\n    \/\/令牌净需求：首先减掉令牌桶中的令牌\n    long nr = 1 - fb;\n    \/\/重新计算下一令牌产生时间\n    next = next + nr*interval;\n    \/\/重新计算令牌桶中的令牌\n    this.storedPermits -= fb;\n    return at;\n  }\n  \/\/申请令牌\n  void acquire() {\n    \/\/申请令牌时的时间\n    long now = System.nanoTime();\n    \/\/预占令牌\n    long at=reserve(now);\n    long waitTime=max(at-now, 0);\n    \/\/按照条件等待\n    if(waitTime &gt; 0) {\n      try {\n        TimeUnit.NANOSECONDS\n          .sleep(waitTime);\n      }catch(InterruptedException e){\n        e.printStackTrace();\n      }\n    }\n  }\n}\n<\/code><\/pre><h2>总结<\/h2><p>经典的限流算法有两个，一个是<strong>令牌桶算法（Token Bucket）<\/strong>，另一个是<strong>漏桶算法（Leaky Bucket）<\/strong>。令牌桶算法是定时向令牌桶发送令牌，请求能够从令牌桶中拿到令牌，然后才能通过限流器；而漏桶算法里，请求就像水一样注入漏桶，漏桶会按照一定的速率自动将水漏掉，只有漏桶里还能注入水的时候，请求才能通过限流器。令牌桶算法和漏桶算法很像一个硬币的正反面，所以你可以参考令牌桶算法的实现来实现漏桶算法。<\/p><p>上面我们介绍了Guava是如何实现令牌桶算法的，我们的示例代码是对Guava RateLimiter的简化，Guava RateLimiter扩展了标准的令牌桶算法，比如还能支持预热功能。对于按需加载的缓存来说，预热后缓存能支持5万TPS的并发，但是在预热前5万TPS的并发直接就把缓存击垮了，所以如果需要给该缓存限流，限流器也需要支持预热功能，在初始阶段，限制的流速 r 很小，但是动态增长的。预热功能的实现非常复杂，Guava构建了一个积分函数来解决这个问题，如果你感兴趣，可以继续深入研究。<\/p><p>欢迎在留言区与我分享你的想法，也欢迎你在留言区记录你的思考过程。感谢阅读，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给更多的朋友。<\/p><p><\/p>","footer_cover_data":{"img_url":"","mp_url":"","link_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{},"product_id":100023901,"like_count":200,"had_liked":false,"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/f6\/ba\/f6886442618684af26003b3dda798fba.mp3","id":97231,"had_viewed":false,"article_title":"38 | 案例分析（一）：高性能限流器Guava RateLimiter","column_bgcolor":"#cbd0de","share":{"content":"当面试时问到多线程、锁的问题，你还是答不上来怎么办？推荐给你《Java 并发编程实战》专栏，带你搞懂并发里的那些Bug问题，全面提升你的并发编程能力，大厂面试绝对不是问题。","title":"王宝令 · Java并发编程实战","poster":"https:\/\/static001.geekbang.org\/resource\/image\/ce\/50\/cebb5cfded54f4bfcca4d75ffe915350.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg"},"is_video_preview":false,"article_summary":"本文介绍了Guava是如何实现令牌桶算法的，Guava RateLimiter扩展了该算法，解决了高并发下的限流问题。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/b9\/57\/b9614916130269cb060ec12a481e6c57.jpeg","column_sale_type":2,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"audio_time_arr":{"m":"09","s":"11","h":"00"},"video_time":"","audio_title":"5.23 宝令 38 (1)_01","audio_md5":"f6886442618684af26003b3dda798fba","video_size":0,"text_read_percent":0,"comment_count":58,"cid":159,"article_sharetitle":"案例分析（一）：高性能限流器Guava RateLimiter","column_is_onboard":true,"article_cshort":"<p>从今天开始，我们就进入案例分析模块了。 这个模块我们将分析四个经典的开源框架，看看它们是如何处理并发问题的，通过这四个案例的学习，相信你会对如何解决并发问题有个更深入的认识。<\/p><p>首先我们来看看<strong>Guava RateLimiter是如何解决高并发场景下的限流问题的<\/strong>。Guava是Google开源的Java类库，提供了一个工具类RateLimiter。我们先来看看RateLimiter的使用，让你对限流有个感官的印象。假设我们有一个线程池，它每秒只能处理两个任务，如果提交的任务过快，可能导致系统不稳定，这个时候就需要用到限流。<\/p><p>在下面的示例代码中，我们创建了一个流速为2个请求\/秒的限流器，这里的流速该怎么理解呢？直观地看，2个请求\/秒指的是每秒最多允许2个请求通过限流器，其实在Guava中，流速还有更深一层的意思：是一种匀速的概念，2个请求\/秒等价于1个请求\/500毫秒。<\/p><p>在向线程池提交任务之前，调用 <code>acquire()<\/code> 方法就能起到限流的作用。通过示例代码的执行结果，任务提交到线程池的时间间隔基本上稳定在500毫秒。<\/p><pre><code>\/\/限流器流速：2个请求\/秒\nRateLimiter limiter = \n  RateLimiter.create(2.0);\n\/\/执行任务的线程池\nExecutorService es = Executors\n  .newFixedThreadPool(1);\n\/\/记录上一次执行时间\nprev = System.nanoTime();\n\/\/测试执行20次\nfor (int i=0; i&lt;20; i++){\n  \/\/限流器限流\n  limiter.acquire();\n  \/\/提交任务异步执行\n  es.execute(()-&gt;{\n    long cur=System.nanoTime();\n    \/\/打印时间间隔：毫秒\n    System.out.println(\n      (cur-prev)\/1000_000);\n    prev = cur;\n  });\n}\n\n输出结果：\n...\n500\n499\n499\n500\n499\n<\/code><\/pre><h2>经典限流算法：令牌桶算法<\/h2><p>Guava的限流器使用上还是很简单的，那它是如何实现的呢？Guava采用的是<strong>令牌桶算法<\/strong>，其<strong>核心是要想通过限流器，必须拿到令牌<\/strong>。也就是说，只要我们能够限制发放令牌的速率，那么就能控制流速了。令牌桶算法的详细描述如下：<\/p>","video_width":0,"column_could_sub":true,"article_ctime":1558713600,"score":"61558713600","video_media_map":{},"video_preview":{},"video":0,"video_time_arr":{"m":"","s":"","h":""},"video_total_seconds":0},"extra":{},"error":{}}