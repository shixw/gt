{"code":0,"data":{"video_id":"","sku":"100023901","video_cover":"","author_name":"王宝令","text_read_version":0,"audio_size":7823386,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/80\/7f\/8047b70edd87d8771ef3795764043c7f.jpg","subtitles":{},"product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/7d\/30\/7dd89361bb5afcbcdb844e1295617730\/ld\/ld.m3u8","chapter_id":"0","column_had_sub":true,"audio_dubber":"王宝令","is_finished":false,"inline_video_subtitles":{},"like":{"had_done":false,"count":116},"neighbors":{"left":{"id":88909,"article_title":"17 | ReadWriteLock：如何快速实现一个完备的缓存？"},"right":{"id":89461,"article_title":"19 | CountDownLatch和CyclicBarrier：如何让多线程步调一致？"}},"audio_time":"00:08:10","video_height":0,"rate_percent":0,"article_content":"<p>在<a href=\"https:\/\/time.geekbang.org\/column\/article\/88909\">上一篇文章<\/a>中，我们介绍了读写锁，学习完之后你应该已经知道“读写锁允许多个线程同时读共享变量，适用于读多写少的场景”。那在读多写少的场景中，还有没有更快的技术方案呢？还真有，Java在1.8这个版本里，提供了一种叫StampedLock的锁，它的性能就比读写锁还要好。<\/p><p>下面我们就来介绍一下StampedLock的使用方法、内部工作原理以及在使用过程中需要注意的事项。<\/p><h2>StampedLock支持的三种锁模式<\/h2><p>我们先来看看在使用上StampedLock和上一篇文章讲的ReadWriteLock有哪些区别。<\/p><p>ReadWriteLock支持两种模式：一种是读锁，一种是写锁。而StampedLock支持三种模式，分别是：<strong>写锁<\/strong>、<strong>悲观读锁<\/strong>和<strong>乐观读<\/strong>。其中，写锁、悲观读锁的语义和ReadWriteLock的写锁、读锁的语义非常类似，允许多个线程同时获取悲观读锁，但是只允许一个线程获取写锁，写锁和悲观读锁是互斥的。不同的是：StampedLock里的写锁和悲观读锁加锁成功之后，都会返回一个stamp；然后解锁的时候，需要传入这个stamp。相关的示例代码如下。<\/p><pre><code>final StampedLock sl = \n  new StampedLock();\n  \n\/\/ 获取\/释放悲观读锁示意代码\nlong stamp = sl.readLock();\ntry {\n  \/\/省略业务相关代码\n} finally {\n  sl.unlockRead(stamp);\n}\n\n\/\/ 获取\/释放写锁示意代码\nlong stamp = sl.writeLock();\ntry {\n  \/\/省略业务相关代码\n} finally {\n  sl.unlockWrite(stamp);\n}\n<\/code><\/pre><p>StampedLock的性能之所以比ReadWriteLock还要好，其关键是StampedLock支持乐观读的方式。ReadWriteLock支持多个线程同时读，但是当多个线程同时读的时候，所有的写操作会被阻塞；而StampedLock提供的乐观读，是允许一个线程获取写锁的，也就是说不是所有的写操作都被阻塞。<\/p><!-- [[[read_end]]] --><p>注意这里，我们用的是“乐观读”这个词，而不是“乐观读锁”，是要提醒你，<strong>乐观读这个操作是无锁的<\/strong>，所以相比较ReadWriteLock的读锁，乐观读的性能更好一些。<\/p><p>文中下面这段代码是出自Java SDK官方示例，并略做了修改。在distanceFromOrigin()这个方法中，首先通过调用tryOptimisticRead()获取了一个stamp，这里的tryOptimisticRead()就是我们前面提到的乐观读。之后将共享变量x和y读入方法的局部变量中，不过需要注意的是，由于tryOptimisticRead()是无锁的，所以共享变量x和y读入方法局部变量时，x和y有可能被其他线程修改了。因此最后读完之后，还需要再次验证一下是否存在写操作，这个验证操作是通过调用validate(stamp)来实现的。<\/p><pre><code>class Point {\n  private int x, y;\n  final StampedLock sl = \n    new StampedLock();\n  \/\/计算到原点的距离  \n  int distanceFromOrigin() {\n    \/\/ 乐观读\n    long stamp = \n      sl.tryOptimisticRead();\n    \/\/ 读入局部变量，\n    \/\/ 读的过程数据可能被修改\n    int curX = x, curY = y;\n    \/\/判断执行读操作期间，\n    \/\/是否存在写操作，如果存在，\n    \/\/则sl.validate返回false\n    if (!sl.validate(stamp)){\n      \/\/ 升级为悲观读锁\n      stamp = sl.readLock();\n      try {\n        curX = x;\n        curY = y;\n      } finally {\n        \/\/释放悲观读锁\n        sl.unlockRead(stamp);\n      }\n    }\n    return Math.sqrt(\n      curX * curX + curY * curY);\n  }\n}\n<\/code><\/pre><p>在上面这个代码示例中，如果执行乐观读操作的期间，存在写操作，会把乐观读升级为悲观读锁。这个做法挺合理的，否则你就需要在一个循环里反复执行乐观读，直到执行乐观读操作的期间没有写操作（只有这样才能保证x和y的正确性和一致性），而循环读会浪费大量的CPU。升级为悲观读锁，代码简练且不易出错，建议你在具体实践时也采用这样的方法。<\/p><h2>进一步理解乐观读<\/h2><p>如果你曾经用过数据库的乐观锁，可能会发现StampedLock的乐观读和数据库的乐观锁有异曲同工之妙。的确是这样的，就拿我个人来说，我是先接触的数据库里的乐观锁，然后才接触的StampedLock，我就觉得我前期数据库里乐观锁的学习对于后面理解StampedLock的乐观读有很大帮助，所以这里有必要再介绍一下数据库里的乐观锁。<\/p><p>还记得我第一次使用数据库乐观锁的场景是这样的：在ERP的生产模块里，会有多个人通过ERP系统提供的UI同时修改同一条生产订单，那如何保证生产订单数据是并发安全的呢？我采用的方案就是乐观锁。<\/p><p>乐观锁的实现很简单，在生产订单的表 product_doc 里增加了一个数值型版本号字段 version，每次更新product_doc这个表的时候，都将 version 字段加1。生产订单的UI在展示的时候，需要查询数据库，此时将这个 version 字段和其他业务字段一起返回给生产订单UI。假设用户查询的生产订单的id=777，那么SQL语句类似下面这样：<\/p><pre><code>select id，... ，version\nfrom product_doc\nwhere id=777\n<\/code><\/pre><p>用户在生产订单UI执行保存操作的时候，后台利用下面的SQL语句更新生产订单，此处我们假设该条生产订单的 version=9。<\/p><pre><code>update product_doc \nset version=version+1，...\nwhere id=777 and version=9\n<\/code><\/pre><p>如果这条SQL语句执行成功并且返回的条数等于1，那么说明从生产订单UI执行查询操作到执行保存操作期间，没有其他人修改过这条数据。因为如果这期间其他人修改过这条数据，那么版本号字段一定会大于9。<\/p><p>你会发现数据库里的乐观锁，查询的时候需要把 version 字段查出来，更新的时候要利用 version 字段做验证。这个 version 字段就类似于StampedLock里面的stamp。这样对比着看，相信你会更容易理解StampedLock里乐观读的用法。<\/p><h2>StampedLock使用注意事项<\/h2><p>对于读多写少的场景StampedLock性能很好，简单的应用场景基本上可以替代ReadWriteLock，但是<strong>StampedLock的功能仅仅是ReadWriteLock的子集<\/strong>，在使用的时候，还是有几个地方需要注意一下。<\/p><p>StampedLock在命名上并没有增加Reentrant，想必你已经猜测到StampedLock应该是不可重入的。事实上，的确是这样的，<strong>StampedLock不支持重入<\/strong>。这个是在使用中必须要特别注意的。<\/p><p>另外，StampedLock的悲观读锁、写锁都不支持条件变量，这个也需要你注意。<\/p><p>还有一点需要特别注意，那就是：如果线程阻塞在StampedLock的readLock()或者writeLock()上时，此时调用该阻塞线程的interrupt()方法，会导致CPU飙升。例如下面的代码中，线程T1获取写锁之后将自己阻塞，线程T2尝试获取悲观读锁，也会阻塞；如果此时调用线程T2的interrupt()方法来中断线程T2的话，你会发现线程T2所在CPU会飙升到100%。<\/p><pre><code>final StampedLock lock\n  = new StampedLock();\nThread T1 = new Thread(()-&gt;{\n  \/\/ 获取写锁\n  lock.writeLock();\n  \/\/ 永远阻塞在此处，不释放写锁\n  LockSupport.park();\n});\nT1.start();\n\/\/ 保证T1获取写锁\nThread.sleep(100);\nThread T2 = new Thread(()-&gt;\n  \/\/阻塞在悲观读锁\n  lock.readLock()\n);\nT2.start();\n\/\/ 保证T2阻塞在读锁\nThread.sleep(100);\n\/\/中断线程T2\n\/\/会导致线程T2所在CPU飙升\nT2.interrupt();\nT2.join();\n<\/code><\/pre><p>所以，<strong>使用StampedLock一定不要调用中断操作，如果需要支持中断功能，一定使用可中断的悲观读锁readLockInterruptibly()和写锁writeLockInterruptibly()<\/strong>。这个规则一定要记清楚。<\/p><h2>总结<\/h2><p>StampedLock的使用看上去有点复杂，但是如果你能理解乐观锁背后的原理，使用起来还是比较流畅的。建议你认真揣摩Java的官方示例，这个示例基本上就是一个最佳实践。我们把Java官方示例精简后，形成下面的代码模板，建议你在实际工作中尽量按照这个模板来使用StampedLock。<\/p><p>StampedLock读模板：<\/p><pre><code>final StampedLock sl = \n  new StampedLock();\n\n\/\/ 乐观读\nlong stamp = \n  sl.tryOptimisticRead();\n\/\/ 读入方法局部变量\n......\n\/\/ 校验stamp\nif (!sl.validate(stamp)){\n  \/\/ 升级为悲观读锁\n  stamp = sl.readLock();\n  try {\n    \/\/ 读入方法局部变量\n    .....\n  } finally {\n    \/\/释放悲观读锁\n    sl.unlockRead(stamp);\n  }\n}\n\/\/使用方法局部变量执行业务操作\n......\n<\/code><\/pre><p>StampedLock写模板：<\/p><pre><code>long stamp = sl.writeLock();\ntry {\n  \/\/ 写共享变量\n  ......\n} finally {\n  sl.unlockWrite(stamp);\n}\n<\/code><\/pre><h2>课后思考<\/h2><p>StampedLock支持锁的降级（通过tryConvertToReadLock()方法实现）和升级（通过tryConvertToWriteLock()方法实现），但是建议你要慎重使用。下面的代码也源自Java的官方示例，我仅仅做了一点修改，隐藏了一个Bug，你来看看Bug出在哪里吧。<\/p><pre><code>private double x, y;\nfinal StampedLock sl = new StampedLock();\n\/\/ 存在问题的方法\nvoid moveIfAtOrigin(double newX, double newY){\n long stamp = sl.readLock();\n try {\n  while(x == 0.0 &amp;&amp; y == 0.0){\n    long ws = sl.tryConvertToWriteLock(stamp);\n    if (ws != 0L) {\n      x = newX;\n      y = newY;\n      break;\n    } else {\n      sl.unlockRead(stamp);\n      stamp = sl.writeLock();\n    }\n  }\n } finally {\n  sl.unlock(stamp);\n}\n<\/code><\/pre><p>欢迎在留言区与我分享你的想法，也欢迎你在留言区记录你的思考过程。感谢阅读，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给更多的朋友。<\/p><p><\/p>","footer_cover_data":{"img_url":"","mp_url":"","link_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{},"product_id":100023901,"like_count":125,"had_liked":false,"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/7d\/30\/7dd89361bb5afcbcdb844e1295617730.mp3","id":89456,"had_viewed":false,"article_title":"18 | StampedLock：有没有比读写锁更快的锁？","column_bgcolor":"#cbd0de","share":{"content":"当面试时问到多线程、锁的问题，你还是答不上来怎么办？推荐给你《Java 并发编程实战》专栏，带你搞懂并发里的那些Bug问题，全面提升你的并发编程能力，大厂面试绝对不是问题。","title":"王宝令 · Java并发编程实战","poster":"https:\/\/static001.geekbang.org\/resource\/image\/ce\/50\/cebb5cfded54f4bfcca4d75ffe915350.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg"},"is_video_preview":false,"article_summary":"StampedLock的性能比读写锁还要好。本文介绍了它的使用方法、内部工作原理以及在使用时的注意事项。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/16\/51\/16c56f603bb8e3778c6beda94fe96c51.jpeg","column_sale_type":2,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"audio_time_arr":{"m":"08","s":"10","h":"00"},"video_time":"","audio_title":"4.7 宝令 18 (1)_01","audio_md5":"7dd89361bb5afcbcdb844e1295617730","video_size":0,"text_read_percent":0,"comment_count":75,"cid":159,"article_sharetitle":"StampedLock：有没有比读写锁更快的锁？","column_is_onboard":true,"article_cshort":"<p>在<a href=\"https:\/\/time.geekbang.org\/column\/article\/88909\">上一篇文章<\/a>中，我们介绍了读写锁，学习完之后你应该已经知道“读写锁允许多个线程同时读共享变量，适用于读多写少的场景”。那在读多写少的场景中，还有没有更快的技术方案呢？还真有，Java在1.8这个版本里，提供了一种叫StampedLock的锁，它的性能就比读写锁还要好。<\/p><p>下面我们就来介绍一下StampedLock的使用方法、内部工作原理以及在使用过程中需要注意的事项。<\/p><h2>StampedLock支持的三种锁模式<\/h2><p>我们先来看看在使用上StampedLock和上一篇文章讲的ReadWriteLock有哪些区别。<\/p><p>ReadWriteLock支持两种模式：一种是读锁，一种是写锁。而StampedLock支持三种模式，分别是：<strong>写锁<\/strong>、<strong>悲观读锁<\/strong>和<strong>乐观读<\/strong>。其中，写锁、悲观读锁的语义和ReadWriteLock的写锁、读锁的语义非常类似，允许多个线程同时获取悲观读锁，但是只允许一个线程获取写锁，写锁和悲观读锁是互斥的。不同的是：StampedLock里的写锁和悲观读锁加锁成功之后，都会返回一个stamp；然后解锁的时候，需要传入这个stamp。相关的示例代码如下。<\/p><pre><code>final StampedLock sl = \n  new StampedLock();\n  \n\/\/ 获取\/释放悲观读锁示意代码\nlong stamp = sl.readLock();\ntry {\n  \/\/省略业务相关代码\n} finally {\n  sl.unlockRead(stamp);\n}\n\n\/\/ 获取\/释放写锁示意代码\nlong stamp = sl.writeLock();\ntry {\n  \/\/省略业务相关代码\n} finally {\n  sl.unlockWrite(stamp);\n}\n<\/code><\/pre><p>StampedLock的性能之所以比ReadWriteLock还要好，其关键是StampedLock支持乐观读的方式。ReadWriteLock支持多个线程同时读，但是当多个线程同时读的时候，所有的写操作会被阻塞；而StampedLock提供的乐观读，是允许一个线程获取写锁的，也就是说不是所有的写操作都被阻塞。<\/p>","video_width":0,"column_could_sub":true,"article_ctime":1554739200,"score":"41554739200","video_media_map":{},"video_preview":{},"video":0,"video_time_arr":{"m":"","s":"","h":""},"video_total_seconds":0},"extra":{},"error":{}}