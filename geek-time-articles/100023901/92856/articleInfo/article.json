{"code":0,"data":{"video_id":"","sku":"100023901","video_cover":"","author_name":"王宝令","text_read_version":0,"audio_size":7626960,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/45\/26\/45444f012c3c1d6f1b0cd9a9c442bd26.jpg","subtitles":{},"product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/5b\/d1\/5be77153cdd85307c18a142dfab22dd1\/ld\/ld.m3u8","chapter_id":"0","column_had_sub":true,"audio_dubber":"王宝令","is_finished":false,"inline_video_subtitles":{},"like":{"had_done":false,"count":62},"neighbors":{"left":{"id":92849,"article_title":"27 | 并发工具类模块热点问题答疑"},"right":{"id":93154,"article_title":"29 | Copy-on-Write模式：不是延时策略的COW"}},"audio_time":"00:07:58","video_height":0,"rate_percent":0,"article_content":"<p>我们曾经说过，“多个线程同时读写同一共享变量存在并发问题”，这里的必要条件之一是读写，如果只有读，而没有写，是没有并发问题的。<\/p><p>解决并发问题，其实最简单的办法就是让共享变量只有读操作，而没有写操作。这个办法如此重要，以至于被上升到了一种解决并发问题的设计模式：<strong>不变性（Immutability）模式<\/strong>。所谓<strong>不变性，简单来讲，就是对象一旦被创建之后，状态就不再发生变化<\/strong>。换句话说，就是变量一旦被赋值，就不允许修改了（没有写操作）；没有修改操作，也就是保持了不变性。<\/p><h2>快速实现具备不可变性的类<\/h2><p>实现一个具备不可变性的类，还是挺简单的。<strong>将一个类所有的属性都设置成final的，并且只允许存在只读方法，那么这个类基本上就具备不可变性了<\/strong>。更严格的做法是<strong>这个类本身也是final的<\/strong>，也就是不允许继承。因为子类可以覆盖父类的方法，有可能改变不可变性，所以推荐你在实际工作中，使用这种更严格的做法。<\/p><p>Java SDK里很多类都具备不可变性，只是由于它们的使用太简单，最后反而被忽略了。例如经常用到的String和Long、Integer、Double等基础类型的包装类都具备不可变性，这些对象的线程安全性都是靠不可变性来保证的。如果你仔细翻看这些类的声明、属性和方法，你会发现它们都严格遵守不可变类的三点要求：<strong>类和属性都是final的，所有方法均是只读的<\/strong>。<\/p><!-- [[[read_end]]] --><p>看到这里你可能会疑惑，Java的String方法也有类似字符替换操作，怎么能说所有方法都是只读的呢？我们结合String的源代码来解释一下这个问题，下面的示例代码源自Java 1.8 SDK，我略做了修改，仅保留了关键属性value[]和replace()方法，你会发现：String这个类以及它的属性value[]都是final的；而replace()方法的实现，就的确没有修改value[]，而是将替换后的字符串作为返回值返回了。<\/p><pre><code>public final class String {\n  private final char value[];\n  \/\/ 字符替换\n  String replace(char oldChar, \n      char newChar) {\n    \/\/无需替换，直接返回this  \n    if (oldChar == newChar){\n      return this;\n    }\n\n    int len = value.length;\n    int i = -1;\n    \/* avoid getfield opcode *\/\n    char[] val = value; \n    \/\/定位到需要替换的字符位置\n    while (++i &lt; len) {\n      if (val[i] == oldChar) {\n        break;\n      }\n    }\n    \/\/未找到oldChar，无需替换\n    if (i &gt;= len) {\n      return this;\n    } \n    \/\/创建一个buf[]，这是关键\n    \/\/用来保存替换后的字符串\n    char buf[] = new char[len];\n    for (int j = 0; j &lt; i; j++) {\n      buf[j] = val[j];\n    }\n    while (i &lt; len) {\n      char c = val[i];\n      buf[i] = (c == oldChar) ? \n        newChar : c;\n      i++;\n    }\n    \/\/创建一个新的字符串返回\n    \/\/原字符串不会发生任何变化\n    return new String(buf, true);\n  }\n}\n<\/code><\/pre><p>通过分析String的实现，你可能已经发现了，如果具备不可变性的类，需要提供类似修改的功能，具体该怎么操作呢？做法很简单，那就是<strong>创建一个新的不可变对象<\/strong>，这是与可变对象的一个重要区别，可变对象往往是修改自己的属性。<\/p><p>所有的修改操作都创建一个新的不可变对象，你可能会有这种担心：是不是创建的对象太多了，有点太浪费内存呢？是的，这样做的确有些浪费，那如何解决呢？<\/p><h2>利用享元模式避免创建重复对象<\/h2><p>如果你熟悉面向对象相关的设计模式，相信你一定能想到<strong>享元模式（Flyweight Pattern）。利用享元模式可以减少创建对象的数量，从而减少内存占用。<\/strong>Java语言里面Long、Integer、Short、Byte等这些基本数据类型的包装类都用到了享元模式。<\/p><p>下面我们就以Long这个类作为例子，看看它是如何利用享元模式来优化对象的创建的。<\/p><p>享元模式本质上其实就是一个<strong>对象池<\/strong>，利用享元模式创建对象的逻辑也很简单：创建之前，首先去对象池里看看是不是存在；如果已经存在，就利用对象池里的对象；如果不存在，就会新创建一个对象，并且把这个新创建出来的对象放进对象池里。<\/p><p>Long这个类并没有照搬享元模式，Long内部维护了一个静态的对象池，仅缓存了[-128,127]之间的数字，这个对象池在JVM启动的时候就创建好了，而且这个对象池一直都不会变化，也就是说它是静态的。之所以采用这样的设计，是因为Long这个对象的状态共有 2<sup>64<\/sup> 种，实在太多，不宜全部缓存，而[-128,127]之间的数字利用率最高。下面的示例代码出自Java 1.8，valueOf()方法就用到了LongCache这个缓存，你可以结合着来加深理解。<\/p><pre><code>Long valueOf(long l) {\n  final int offset = 128;\n  \/\/ [-128,127]直接的数字做了缓存\n  if (l &gt;= -128 &amp;&amp; l &lt;= 127) { \n    return LongCache\n      .cache[(int)l + offset];\n  }\n  return new Long(l);\n}\n\/\/缓存，等价于对象池\n\/\/仅缓存[-128,127]直接的数字\nstatic class LongCache {\n  static final Long cache[] \n    = new Long[-(-128) + 127 + 1];\n\n  static {\n    for(int i=0; i&lt;cache.length; i++)\n      cache[i] = new Long(i-128);\n  }\n}\n<\/code><\/pre><p>前面我们在<a href=\"https:\/\/time.geekbang.org\/column\/article\/87749\">《13 | 理论基础模块热点问题答疑》<\/a>中提到“Integer 和 String 类型的对象不适合做锁”，其实基本上所有的基础类型的包装类都不适合做锁，因为它们内部用到了享元模式，这会导致看上去私有的锁，其实是共有的。例如在下面代码中，本意是A用锁al，B用锁bl，各自管理各自的，互不影响。但实际上al和bl是一个对象，结果A和B共用的是一把锁。<\/p><pre><code>class A {\n  Long al=Long.valueOf(1);\n  public void setAX(){\n    synchronized (al) {\n      \/\/省略代码无数\n    }\n  }\n}\nclass B {\n  Long bl=Long.valueOf(1);\n  public void setBY(){\n    synchronized (bl) {\n      \/\/省略代码无数\n    }\n  }\n}\n<\/code><\/pre><h2>使用Immutability模式的注意事项<\/h2><p>在使用Immutability模式的时候，需要注意以下两点：<\/p><ol>\n<li>对象的所有属性都是final的，并不能保证不可变性；<\/li>\n<li>不可变对象也需要正确发布。<\/li>\n<\/ol><p>在Java语言中，final修饰的属性一旦被赋值，就不可以再修改，但是如果属性的类型是普通对象，那么这个普通对象的属性是可以被修改的。例如下面的代码中，Bar的属性foo虽然是final的，依然可以通过setAge()方法来设置foo的属性age。所以，<strong>在使用Immutability模式的时候一定要确认保持不变性的边界在哪里，是否要求属性对象也具备不可变性<\/strong>。<\/p><pre><code>class Foo{\n  int age=0;\n  int name=&quot;abc&quot;;\n}\nfinal class Bar {\n  final Foo foo;\n  void setAge(int a){\n    foo.age=a;\n  }\n}\n<\/code><\/pre><p>下面我们再看看如何正确地发布不可变对象。不可变对象虽然是线程安全的，但是并不意味着引用这些不可变对象的对象就是线程安全的。例如在下面的代码中，Foo具备不可变性，线程安全，但是类Bar并不是线程安全的，类Bar中持有对Foo的引用foo，对foo这个引用的修改在多线程中并不能保证可见性和原子性。<\/p><pre><code>\/\/Foo线程安全\nfinal class Foo{\n  final int age=0;\n  final int name=&quot;abc&quot;;\n}\n\/\/Bar线程不安全\nclass Bar {\n  Foo foo;\n  void setFoo(Foo f){\n    this.foo=f;\n  }\n}\n<\/code><\/pre><p>如果你的程序仅仅需要foo保持可见性，无需保证原子性，那么可以将foo声明为volatile变量，这样就能保证可见性。如果你的程序需要保证原子性，那么可以通过原子类来实现。下面的示例代码是合理库存的原子化实现，你应该很熟悉了，其中就是用原子类解决了不可变对象引用的原子性问题。<\/p><pre><code>public class SafeWM {\n  class WMRange{\n    final int upper;\n    final int lower;\n    WMRange(int upper,int lower){\n    \/\/省略构造函数实现\n    }\n  }\n  final AtomicReference&lt;WMRange&gt;\n    rf = new AtomicReference&lt;&gt;(\n      new WMRange(0,0)\n    );\n  \/\/ 设置库存上限\n  void setUpper(int v){\n    while(true){\n      WMRange or = rf.get();\n      \/\/ 检查参数合法性\n      if(v &lt; or.lower){\n        throw new IllegalArgumentException();\n      }\n      WMRange nr = new\n          WMRange(v, or.lower);\n      if(rf.compareAndSet(or, nr)){\n        return;\n      }\n    }\n  }\n}\n<\/code><\/pre><h2>总结<\/h2><p>利用Immutability模式解决并发问题，也许你觉得有点陌生，其实你天天都在享受它的战果。Java语言里面的String和Long、Integer、Double等基础类型的包装类都具备不可变性，这些对象的线程安全性都是靠不可变性来保证的。Immutability模式是最简单的解决并发问题的方法，建议当你试图解决一个并发问题时，可以首先尝试一下Immutability模式，看是否能够快速解决。<\/p><p>具备不变性的对象，只有一种状态，这个状态由对象内部所有的不变属性共同决定。其实还有一种更简单的不变性对象，那就是<strong>无状态<\/strong>。无状态对象内部没有属性，只有方法。除了无状态的对象，你可能还听说过无状态的服务、无状态的协议等等。无状态有很多好处，最核心的一点就是性能。在多线程领域，无状态对象没有线程安全问题，无需同步处理，自然性能很好；在分布式领域，无状态意味着可以无限地水平扩展，所以分布式领域里面性能的瓶颈一定不是出在无状态的服务节点上。<\/p><h2>课后思考<\/h2><p>下面的示例代码中，Account的属性是final的，并且只有get方法，那这个类是不是具备不可变性呢？<\/p><pre><code>public final class Account{\n  private final \n    StringBuffer user;\n  public Account(String user){\n    this.user = \n      new StringBuffer(user);\n  }\n  \n  public StringBuffer getUser(){\n    return this.user;\n  }\n  public String toString(){\n    return &quot;user&quot;+user;\n  }\n}\n<\/code><\/pre><p>欢迎在留言区与我分享你的想法，也欢迎你在留言区记录你的思考过程。感谢阅读，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给更多的朋友。<\/p><p><\/p>","footer_cover_data":{"img_url":"","mp_url":"","link_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{},"product_id":100023901,"like_count":72,"had_liked":false,"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/5b\/d1\/5be77153cdd85307c18a142dfab22dd1.mp3","id":92856,"had_viewed":false,"article_title":"28 | Immutability模式：如何利用不变性解决并发问题？","column_bgcolor":"#cbd0de","share":{"content":"当面试时问到多线程、锁的问题，你还是答不上来怎么办？推荐给你《Java 并发编程实战》专栏，带你搞懂并发里的那些Bug问题，全面提升你的并发编程能力，大厂面试绝对不是问题。","title":"王宝令 · Java并发编程实战","poster":"https:\/\/static001.geekbang.org\/resource\/image\/ce\/50\/cebb5cfded54f4bfcca4d75ffe915350.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg"},"is_video_preview":false,"article_summary":"Immutability模式是最简单的解决并发问题的方法，可以作为你解决并发问题的一个首选。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/f7\/35\/f73200fdea76998808f9985288eb5835.jpeg","column_sale_type":2,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"audio_time_arr":{"m":"07","s":"58","h":"00"},"video_time":"","audio_title":"4.28 宝令 28_01","audio_md5":"5be77153cdd85307c18a142dfab22dd1","video_size":0,"text_read_percent":0,"comment_count":48,"cid":159,"article_sharetitle":"Immutability模式：如何利用不变性解决并发问题？","column_is_onboard":true,"article_cshort":"<p>我们曾经说过，“多个线程同时读写同一共享变量存在并发问题”，这里的必要条件之一是读写，如果只有读，而没有写，是没有并发问题的。<\/p><p>解决并发问题，其实最简单的办法就是让共享变量只有读操作，而没有写操作。这个办法如此重要，以至于被上升到了一种解决并发问题的设计模式：<strong>不变性（Immutability）模式<\/strong>。所谓<strong>不变性，简单来讲，就是对象一旦被创建之后，状态就不再发生变化<\/strong>。换句话说，就是变量一旦被赋值，就不允许修改了（没有写操作）；没有修改操作，也就是保持了不变性。<\/p><h2>快速实现具备不可变性的类<\/h2><p>实现一个具备不可变性的类，还是挺简单的。<strong>将一个类所有的属性都设置成final的，并且只允许存在只读方法，那么这个类基本上就具备不可变性了<\/strong>。更严格的做法是<strong>这个类本身也是final的<\/strong>，也就是不允许继承。因为子类可以覆盖父类的方法，有可能改变不可变性，所以推荐你在实际工作中，使用这种更严格的做法。<\/p><p>Java SDK里很多类都具备不可变性，只是由于它们的使用太简单，最后反而被忽略了。例如经常用到的String和Long、Integer、Double等基础类型的包装类都具备不可变性，这些对象的线程安全性都是靠不可变性来保证的。如果你仔细翻看这些类的声明、属性和方法，你会发现它们都严格遵守不可变类的三点要求：<strong>类和属性都是final的，所有方法均是只读的<\/strong>。<\/p>","video_width":0,"column_could_sub":true,"article_ctime":1556726400,"score":"51556726400","video_media_map":{},"video_preview":{},"video":0,"video_time_arr":{"m":"","s":"","h":""},"video_total_seconds":0},"extra":{},"error":{}}