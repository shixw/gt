{"code":0,"data":{"video_id":"","sku":"100023901","video_cover":"","author_name":"王宝令","text_read_version":0,"audio_size":9022659,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/80\/12\/80a6a61eba85c160677262ce59ef2912.jpg","subtitles":{},"product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/4a\/2b\/4aa22f1ad88a545fba12e6f69a2cbc2b\/ld\/ld.m3u8","chapter_id":"0","column_had_sub":true,"audio_dubber":"王宝令","is_finished":false,"inline_video_subtitles":{},"like":{"had_done":false,"count":95},"neighbors":{"left":{"id":98134,"article_title":"40 | 案例分析（三）：高性能队列Disruptor"},"right":{"id":98903,"article_title":"42 | Actor模型：面向对象原生的并发模型"}},"audio_time":"00:09:25","video_height":0,"rate_percent":0,"article_content":"<p>实际工作中，我们总会难免和数据库打交道；只要和数据库打交道，就免不了使用数据库连接池。业界知名的数据库连接池有不少，例如c3p0、DBCP、Tomcat JDBC Connection Pool、Druid等，不过最近最火的是HiKariCP。<\/p><p><strong>HiKariCP号称是业界跑得最快的数据库连接池<\/strong>，这两年发展得顺风顺水，尤其是Springboot 2.0将其作为<strong>默认数据库连接池<\/strong>后，江湖一哥的地位已是毋庸置疑了。那它为什么那么快呢？今天咱们就重点聊聊这个话题。<\/p><h2>什么是数据库连接池<\/h2><p>在详细分析HiKariCP高性能之前，我们有必要先简单介绍一下什么是数据库连接池。本质上，数据库连接池和线程池一样，都属于池化资源，作用都是避免重量级资源的频繁创建和销毁，对于数据库连接池来说，也就是避免数据库连接频繁创建和销毁。如下图所示，服务端会在运行期持有一定数量的数据库连接，当需要执行SQL时，并不是直接创建一个数据库连接，而是从连接池中获取一个；当SQL执行完，也并不是将数据库连接真的关掉，而是将其归还到连接池中。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/0b\/19\/0b106876824e43d11750334e86556519.png?wh=1142*511\" alt=\"\"><\/p><center><span class=\"reference\">数据库连接池示意图<\/span><\/center><p>在实际工作中，我们都是使用各种持久化框架来完成数据库的增删改查，基本上不会直接和数据库连接池打交道，为了能让你更好地理解数据库连接池的工作原理，下面的示例代码并没有使用任何框架，而是原生地使用HiKariCP。执行数据库操作基本上是一系列规范化的步骤：<\/p><!-- [[[read_end]]] --><ol>\n<li>通过数据源获取一个数据库连接；<\/li>\n<li>创建Statement；<\/li>\n<li>执行SQL；<\/li>\n<li>通过ResultSet获取SQL执行结果；<\/li>\n<li>释放ResultSet；<\/li>\n<li>释放Statement；<\/li>\n<li>释放数据库连接。<\/li>\n<\/ol><p>下面的示例代码，通过 <code>ds.getConnection()<\/code> 获取一个数据库连接时，其实是向数据库连接池申请一个数据库连接，而不是创建一个新的数据库连接。同样，通过 <code>conn.close()<\/code> 释放一个数据库连接时，也不是直接将连接关闭，而是将连接归还给数据库连接池。<\/p><pre><code>\/\/数据库连接池配置\nHikariConfig config = new HikariConfig();\nconfig.setMinimumIdle(1);\nconfig.setMaximumPoolSize(2);\nconfig.setConnectionTestQuery(&quot;SELECT 1&quot;);\nconfig.setDataSourceClassName(&quot;org.h2.jdbcx.JdbcDataSource&quot;);\nconfig.addDataSourceProperty(&quot;url&quot;, &quot;jdbc:h2:mem:test&quot;);\n\/\/ 创建数据源\nDataSource ds = new HikariDataSource(config);\nConnection conn = null;\nStatement stmt = null;\nResultSet rs = null;\ntry {\n  \/\/ 获取数据库连接\n  conn = ds.getConnection();\n  \/\/ 创建Statement \n  stmt = conn.createStatement();\n  \/\/ 执行SQL\n  rs = stmt.executeQuery(&quot;select * from abc&quot;);\n  \/\/ 获取结果\n  while (rs.next()) {\n    int id = rs.getInt(1);\n    ......\n  }\n} catch(Exception e) {\n   e.printStackTrace();\n} finally {\n  \/\/关闭ResultSet\n  close(rs);\n  \/\/关闭Statement \n  close(stmt);\n  \/\/关闭Connection\n  close(conn);\n}\n\/\/关闭资源\nvoid close(AutoCloseable rs) {\n  if (rs != null) {\n    try {\n      rs.close();\n    } catch (SQLException e) {\n      e.printStackTrace();\n    }\n  }\n}\n<\/code><\/pre><p><a href=\"https:\/\/github.com\/brettwooldridge\/HikariCP\/wiki\/Down-the-Rabbit-Hole\">HiKariCP官方网站<\/a>解释了其性能之所以如此之高的秘密。微观上HiKariCP程序编译出的字节码执行效率更高，站在字节码的角度去优化Java代码，HiKariCP的作者对性能的执着可见一斑，不过遗憾的是他并没有详细解释都做了哪些优化。而宏观上主要是和两个数据结构有关，一个是FastList，另一个是ConcurrentBag。下面我们来看看它们是如何提升HiKariCP的性能的。<\/p><h2>FastList解决了哪些性能问题<\/h2><p>按照规范步骤，执行完数据库操作之后，需要依次关闭ResultSet、Statement、Connection，但是总有粗心的同学只是关闭了Connection，而忘了关闭ResultSet和Statement。为了解决这种问题，最好的办法是当关闭Connection时，能够自动关闭Statement。为了达到这个目标，Connection就需要跟踪创建的Statement，最简单的办法就是将创建的Statement保存在数组ArrayList里，这样当关闭Connection的时候，就可以依次将数组中的所有Statement关闭。<\/p><p>HiKariCP觉得用ArrayList还是太慢，当通过 <code>conn.createStatement()<\/code> 创建一个Statement时，需要调用ArrayList的add()方法加入到ArrayList中，这个是没有问题的；但是当通过 <code>stmt.close()<\/code> 关闭Statement的时候，需要调用 ArrayList的remove()方法来将其从ArrayList中删除，这里是有优化余地的。<\/p><p>假设一个Connection依次创建6个Statement，分别是S1、S2、S3、S4、S5、S6，按照正常的编码习惯，关闭Statement的顺序一般是逆序的，关闭的顺序是：S6、S5、S4、S3、S2、S1，而ArrayList的remove(Object o)方法是顺序遍历查找，逆序删除而顺序查找，这样的查找效率就太慢了。如何优化呢？很简单，优化成逆序查找就可以了。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/4b\/a6\/4b5e2ef70e46b087b139b331578a82a6.png?wh=1142*389\" alt=\"\"><\/p><center><span class=\"reference\">逆序删除示意图<\/span><\/center><p>HiKariCP中的FastList相对于ArrayList的一个优化点就是将 <code>remove(Object element)<\/code> 方法的<strong>查找顺序变成了逆序查找<\/strong>。除此之外，FastList还有另一个优化点，是 <code>get(int index)<\/code> 方法没有对index参数进行越界检查，HiKariCP能保证不会越界，所以不用每次都进行越界检查。<\/p><p>整体来看，FastList的优化点还是很简单的。下面我们再来聊聊HiKariCP中的另外一个数据结构ConcurrentBag，看看它又是如何提升性能的。<\/p><h2>ConcurrentBag解决了哪些性能问题<\/h2><p>如果让我们自己来实现一个数据库连接池，最简单的办法就是用两个阻塞队列来实现，一个用于保存空闲数据库连接的队列idle，另一个用于保存忙碌数据库连接的队列busy；获取连接时将空闲的数据库连接从idle队列移动到busy队列，而关闭连接时将数据库连接从busy移动到idle。这种方案将并发问题委托给了阻塞队列，实现简单，但是性能并不是很理想。因为Java SDK中的阻塞队列是用锁实现的，而高并发场景下锁的争用对性能影响很大。<\/p><pre><code>\/\/忙碌队列\nBlockingQueue&lt;Connection&gt; busy;\n\/\/空闲队列\nBlockingQueue&lt;Connection&gt; idle;\n<\/code><\/pre><p>HiKariCP并没有使用Java SDK中的阻塞队列，而是自己实现了一个叫做ConcurrentBag的并发容器。ConcurrentBag的设计最初源自C#，它的一个核心设计是使用ThreadLocal避免部分并发问题，不过HiKariCP中的ConcurrentBag并没有完全参考C#的实现，下面我们来看看它是如何实现的。<\/p><p>ConcurrentBag中最关键的属性有4个，分别是：用于存储所有的数据库连接的共享队列sharedList、线程本地存储threadList、等待数据库连接的线程数waiters以及分配数据库连接的工具handoffQueue。其中，handoffQueue用的是Java SDK提供的SynchronousQueue，SynchronousQueue主要用于线程之间传递数据。<\/p><pre><code>\/\/用于存储所有的数据库连接\nCopyOnWriteArrayList&lt;T&gt; sharedList;\n\/\/线程本地存储中的数据库连接\nThreadLocal&lt;List&lt;Object&gt;&gt; threadList;\n\/\/等待数据库连接的线程数\nAtomicInteger waiters;\n\/\/分配数据库连接的工具\nSynchronousQueue&lt;T&gt; handoffQueue;\n<\/code><\/pre><p>当线程池创建了一个数据库连接时，通过调用ConcurrentBag的add()方法加入到ConcurrentBag中，下面是add()方法的具体实现，逻辑很简单，就是将这个连接加入到共享队列sharedList中，如果此时有线程在等待数据库连接，那么就通过handoffQueue将这个连接分配给等待的线程。<\/p><pre><code>\/\/将空闲连接添加到队列\nvoid add(final T bagEntry){\n  \/\/加入共享队列\n  sharedList.add(bagEntry);\n  \/\/如果有等待连接的线程，\n  \/\/则通过handoffQueue直接分配给等待的线程\n  while (waiters.get() &gt; 0 \n    &amp;&amp; bagEntry.getState() == STATE_NOT_IN_USE \n    &amp;&amp; !handoffQueue.offer(bagEntry)) {\n      yield();\n  }\n}\n<\/code><\/pre><p>通过ConcurrentBag提供的borrow()方法，可以获取一个空闲的数据库连接，borrow()的主要逻辑是：<\/p><ol>\n<li>首先查看线程本地存储是否有空闲连接，如果有，则返回一个空闲的连接；<\/li>\n<li>如果线程本地存储中无空闲连接，则从共享队列中获取。<\/li>\n<li>如果共享队列中也没有空闲的连接，则请求线程需要等待。<\/li>\n<\/ol><p>需要注意的是，线程本地存储中的连接是可以被其他线程窃取的，所以需要用CAS方法防止重复分配。在共享队列中获取空闲连接，也采用了CAS方法防止重复分配。<\/p><pre><code>T borrow(long timeout, final TimeUnit timeUnit){\n  \/\/ 先查看线程本地存储是否有空闲连接\n  final List&lt;Object&gt; list = threadList.get();\n  for (int i = list.size() - 1; i &gt;= 0; i--) {\n    final Object entry = list.remove(i);\n    final T bagEntry = weakThreadLocals \n      ? ((WeakReference&lt;T&gt;) entry).get() \n      : (T) entry;\n    \/\/线程本地存储中的连接也可以被窃取，\n    \/\/所以需要用CAS方法防止重复分配\n    if (bagEntry != null \n      &amp;&amp; bagEntry.compareAndSet(STATE_NOT_IN_USE, STATE_IN_USE)) {\n      return bagEntry;\n    }\n  }\n\n  \/\/ 线程本地存储中无空闲连接，则从共享队列中获取\n  final int waiting = waiters.incrementAndGet();\n  try {\n    for (T bagEntry : sharedList) {\n      \/\/如果共享队列中有空闲连接，则返回\n      if (bagEntry.compareAndSet(STATE_NOT_IN_USE, STATE_IN_USE)) {\n        return bagEntry;\n      }\n    }\n    \/\/共享队列中没有连接，则需要等待\n    timeout = timeUnit.toNanos(timeout);\n    do {\n      final long start = currentTime();\n      final T bagEntry = handoffQueue.poll(timeout, NANOSECONDS);\n      if (bagEntry == null \n        || bagEntry.compareAndSet(STATE_NOT_IN_USE, STATE_IN_USE)) {\n          return bagEntry;\n      }\n      \/\/重新计算等待时间\n      timeout -= elapsedNanos(start);\n    } while (timeout &gt; 10_000);\n    \/\/超时没有获取到连接，返回null\n    return null;\n  } finally {\n    waiters.decrementAndGet();\n  }\n}\n<\/code><\/pre><p>释放连接需要调用ConcurrentBag提供的requite()方法，该方法的逻辑很简单，首先将数据库连接状态更改为STATE_NOT_IN_USE，之后查看是否存在等待线程，如果有，则分配给等待线程；如果没有，则将该数据库连接保存到线程本地存储里。<\/p><pre><code>\/\/释放连接\nvoid requite(final T bagEntry){\n  \/\/更新连接状态\n  bagEntry.setState(STATE_NOT_IN_USE);\n  \/\/如果有等待的线程，则直接分配给线程，无需进入任何队列\n  for (int i = 0; waiters.get() &gt; 0; i++) {\n    if (bagEntry.getState() != STATE_NOT_IN_USE \n      || handoffQueue.offer(bagEntry)) {\n        return;\n    } else if ((i &amp; 0xff) == 0xff) {\n      parkNanos(MICROSECONDS.toNanos(10));\n    } else {\n      yield();\n    }\n  }\n  \/\/如果没有等待的线程，则进入线程本地存储\n  final List&lt;Object&gt; threadLocalList = threadList.get();\n  if (threadLocalList.size() &lt; 50) {\n    threadLocalList.add(weakThreadLocals \n      ? new WeakReference&lt;&gt;(bagEntry) \n      : bagEntry);\n  }\n}\n<\/code><\/pre><h2>总结<\/h2><p>HiKariCP中的FastList和ConcurrentBag这两个数据结构使用得非常巧妙，虽然实现起来并不复杂，但是对于性能的提升非常明显，根本原因在于这两个数据结构适用于数据库连接池这个特定的场景。FastList适用于逆序删除场景；而ConcurrentBag通过ThreadLocal做一次预分配，避免直接竞争共享资源，非常适合池化资源的分配。<\/p><p>在实际工作中，我们遇到的并发问题千差万别，这时选择合适的并发数据结构就非常重要了。当然能选对的前提是对特定场景的并发特性有深入的了解，只有了解到无谓的性能消耗在哪里，才能对症下药。<\/p><p>欢迎在留言区与我分享你的想法，也欢迎你在留言区记录你的思考过程。感谢阅读，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给更多的朋友。<\/p><p><\/p>","footer_cover_data":{"img_url":"","mp_url":"","link_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{},"product_id":100023901,"like_count":112,"had_liked":false,"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/4a\/2b\/4aa22f1ad88a545fba12e6f69a2cbc2b.mp3","id":98491,"had_viewed":false,"article_title":"41 | 案例分析（四）：高性能数据库连接池HiKariCP","column_bgcolor":"#cbd0de","share":{"content":"当面试时问到多线程、锁的问题，你还是答不上来怎么办？推荐给你《Java 并发编程实战》专栏，带你搞懂并发里的那些Bug问题，全面提升你的并发编程能力，大厂面试绝对不是问题。","title":"王宝令 · Java并发编程实战","poster":"https:\/\/static001.geekbang.org\/resource\/image\/ce\/50\/cebb5cfded54f4bfcca4d75ffe915350.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg"},"is_video_preview":false,"article_summary":"HiKariCP号称业界跑得最快的数据库连接池。FastList和ConcurrentBag这两个数据结构使用得很巧妙。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/53\/b4\/53846a71d9141c60795229433010a8b4.jpeg","column_sale_type":2,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/47\/f1\/47296780442c7fd11ebf97c0749103f1.jpg","column_id":159,"audio_time_arr":{"m":"09","s":"25","h":"00"},"video_time":"","audio_title":"5.30 宝令41_01","audio_md5":"4aa22f1ad88a545fba12e6f69a2cbc2b","video_size":0,"text_read_percent":0,"comment_count":33,"cid":159,"article_sharetitle":"案例分析（四）：高性能数据库连接池HiKariCP","column_is_onboard":true,"article_cshort":"<p>实际工作中，我们总会难免和数据库打交道；只要和数据库打交道，就免不了使用数据库连接池。业界知名的数据库连接池有不少，例如c3p0、DBCP、Tomcat JDBC Connection Pool、Druid等，不过最近最火的是HiKariCP。<\/p><p><strong>HiKariCP号称是业界跑得最快的数据库连接池<\/strong>，这两年发展得顺风顺水，尤其是Springboot 2.0将其作为<strong>默认数据库连接池<\/strong>后，江湖一哥的地位已是毋庸置疑了。那它为什么那么快呢？今天咱们就重点聊聊这个话题。<\/p><h2>什么是数据库连接池<\/h2><p>在详细分析HiKariCP高性能之前，我们有必要先简单介绍一下什么是数据库连接池。本质上，数据库连接池和线程池一样，都属于池化资源，作用都是避免重量级资源的频繁创建和销毁，对于数据库连接池来说，也就是避免数据库连接频繁创建和销毁。如下图所示，服务端会在运行期持有一定数量的数据库连接，当需要执行SQL时，并不是直接创建一个数据库连接，而是从连接池中获取一个；当SQL执行完，也并不是将数据库连接真的关掉，而是将其归还到连接池中。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/0b\/19\/0b106876824e43d11750334e86556519.png?wh=1142*511\" alt=\"\"><\/p><center><span class=\"reference\">数据库连接池示意图<\/span><\/center><p>在实际工作中，我们都是使用各种持久化框架来完成数据库的增删改查，基本上不会直接和数据库连接池打交道，为了能让你更好地理解数据库连接池的工作原理，下面的示例代码并没有使用任何框架，而是原生地使用HiKariCP。执行数据库操作基本上是一系列规范化的步骤：<\/p>","video_width":0,"column_could_sub":true,"article_ctime":1559318400,"score":"61559318400","video_media_map":{},"video_preview":{},"video":0,"video_time_arr":{"m":"","s":"","h":""},"video_total_seconds":0},"extra":{},"error":{}}