{"code":0,"data":{"video_id":"","sku":"100028001","video_cover":"","author_name":"刘超","text_read_version":0,"audio_size":8254275,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/24\/47\/24891007186c05e74851d3f8fb2cee47.jpg","subtitles":{},"product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/e0\/81\/e0f143c5dabddfccbd50e185ae004181\/ld\/ld.m3u8","chapter_id":"0","column_had_sub":true,"audio_dubber":"李良","is_finished":false,"inline_video_subtitles":{},"like":{"had_done":false,"count":49},"neighbors":{"left":{"id":109564,"article_title":"27 | 单例模式：如何创建单一对象优化系统性能？"},"right":{"id":110862,"article_title":"29 | 如何使用设计模式优化并发编程？"}},"audio_time":"00:08:36","video_height":0,"rate_percent":0,"article_content":"<p>你好，我是刘超。<\/p><p>原型模式和享元模式，前者是在创建多个实例时，对创建过程的性能进行调优；后者是用减少创建实例的方式，来调优系统性能。这么看，你会不会觉得两个模式有点相互矛盾呢？<\/p><p>其实不然，它们的使用是分场景的。在有些场景下，我们需要重复创建多个实例，例如在循环体中赋值一个对象，此时我们就可以采用原型模式来优化对象的创建过程；而在有些场景下，我们则可以避免重复创建多个实例，在内存中共享对象就好了。<\/p><p>今天我们就来看看这两种模式的适用场景，了解了这些你就可以更高效地使用它们提升系统性能了。<\/p><h2>原型模式<\/h2><p>我们先来了解下原型模式的实现。原型模式是通过给出一个原型对象来指明所创建的对象的类型，然后使用自身实现的克隆接口来复制这个原型对象，该模式就是用这种方式来创建出更多同类型的对象。<\/p><p><span class=\"orange\">使用这种方式创建新的对象的话，就无需再通过new实例化来创建对象了。<\/span>这是因为Object类的clone方法是一个本地方法，它可以直接操作内存中的二进制流，所以性能相对new实例化来说，更佳。<\/p><h3>实现原型模式<\/h3><p>我们现在通过一个简单的例子来实现一个原型模式：<\/p><pre><code>   \/\/实现Cloneable 接口的原型抽象类Prototype \n   class Prototype implements Cloneable {\n        \/\/重写clone方法\n        public Prototype clone(){\n            Prototype prototype = null;\n            try{\n                prototype = (Prototype)super.clone();\n            }catch(CloneNotSupportedException e){\n                e.printStackTrace();\n            }\n            return prototype;\n        }\n    }\n    \/\/实现原型类\n    class ConcretePrototype extends Prototype{\n        public void show(){\n            System.out.println(&quot;原型模式实现类&quot;);\n        }\n    }\n\n    public class Client {\n        public static void main(String[] args){\n            ConcretePrototype cp = new ConcretePrototype();\n            for(int i=0; i&lt; 10; i++){\n                ConcretePrototype clonecp = (ConcretePrototype)cp.clone();\n                clonecp.show();\n            }\n        }\n    }\n<\/code><\/pre><p><strong>要实现一个原型类，需要具备三个条件：<\/strong><\/p><ul>\n<li>实现Cloneable接口：Cloneable接口与序列化接口的作用类似，它只是告诉虚拟机可以安全地在实现了这个接口的类上使用clone方法。在JVM中，只有实现了Cloneable接口的类才可以被拷贝，否则会抛出CloneNotSupportedException异常。<\/li>\n<li>重写Object类中的clone方法：在Java中，所有类的父类都是Object类，而Object类中有一个clone方法，作用是返回对象的一个拷贝。<\/li>\n<li>在重写的clone方法中调用super.clone()：默认情况下，类不具备复制对象的能力，需要调用super.clone()来实现。<\/li>\n<\/ul><!-- [[[read_end]]] --><p>从上面我们可以看出，原型模式的主要特征就是使用clone方法复制一个对象。通常，有些人会误以为  Object a=new Object();Object b=a;  这种形式就是一种对象复制的过程，然而这种复制只是对象引用的复制，也就是a和b对象指向了同一个内存地址，如果b修改了，a的值也就跟着被修改了。<\/p><p>我们可以通过一个简单的例子来看看普通的对象复制问题：<\/p><pre><code>class Student {  \n    private String name;  \n  \n    public String getName() {  \n        return name;  \n    }  \n  \n    public void setName(String name) {  \n        this.name= name;  \n    }  \n      \n}  \npublic class Test {  \n      \n    public static void main(String args[]) {  \n        Student stu1 = new Student();  \n        stu1.setName(&quot;test1&quot;);  \n\n        Student stu2 = stu1;  \n        stu2.setName(&quot;test2&quot;);  \n \n        System.out.println(&quot;学生1:&quot; + stu1.getName());  \n        System.out.println(&quot;学生2:&quot; + stu2.getName());  \n    }  \n}\n<\/code><\/pre><p>如果是复制对象，此时打印的日志应该为：<\/p><pre><code>学生1:test1\n学生2:test2\n<\/code><\/pre><p>然而，实际上是：<\/p><pre><code>学生1:test2\n学生2:test2\n<\/code><\/pre><p><span class=\"orange\">通过clone方法复制的对象才是真正的对象复制，clone方法赋值的对象完全是一个独立的对象。<\/span>刚刚讲过了，Object类的clone方法是一个本地方法，它直接操作内存中的二进制流，特别是复制大对象时，性能的差别非常明显。我们可以用 clone 方法再实现一遍以上例子。<\/p><pre><code>\/\/学生类实现Cloneable接口\nclass Student implements Cloneable{  \n    private String name;  \/\/姓名\n  \n    public String getName() {  \n        return name;  \n    }  \n  \n    public void setName(String name) {  \n        this.name= name;  \n    } \n   \/\/重写clone方法\n   public Student clone() { \n        Student student = null; \n        try { \n            student = (Student) super.clone(); \n            } catch (CloneNotSupportedException e) { \n            e.printStackTrace(); \n            } \n            return student; \n   } \n      \n}  \npublic class Test {  \n      \n    public static void main(String args[]) {  \n        Student stu1 = new Student();  \/\/创建学生1\n        stu1.setName(&quot;test1&quot;);  \n\n        Student stu2 = stu1.clone();  \/\/通过克隆创建学生2\n        stu2.setName(&quot;test2&quot;);  \n \n        System.out.println(&quot;学生1:&quot; + stu1.getName());  \n        System.out.println(&quot;学生2:&quot; + stu2.getName());  \n    }  \n}\n<\/code><\/pre><p>运行结果：<\/p><pre><code>学生1:test1\n学生2:test2\n<\/code><\/pre><h3>深拷贝和浅拷贝<\/h3><p>在调用super.clone()方法之后，首先会检查当前对象所属的类是否支持clone，也就是看该类是否实现了Cloneable接口。<\/p><p>如果支持，则创建当前对象所属类的一个新对象，并对该对象进行初始化，使得新对象的成员变量的值与当前对象的成员变量的值一模一样，但对于其它对象的引用以及List等类型的成员属性，则只能复制这些对象的引用了。所以简单调用super.clone()这种克隆对象方式，就是一种浅拷贝。<\/p><p>所以，当我们在使用clone()方法实现对象的克隆时，就需要注意浅拷贝带来的问题。我们再通过一个例子来看看浅拷贝。<\/p><pre><code>\/\/定义学生类\nclass Student implements Cloneable{  \n    private String name; \/\/学生姓名\n    private Teacher teacher; \/\/定义老师类\n  \n    public String getName() {  \n        return name;  \n    }  \n  \n    public void setName(String name) {  \n        this.name = name;  \n    } \n\n    public Teacher getTeacher() {  \n        return teacher;  \n    }  \n  \n    public void setTeacher(Teacher teacher) {  \n        this.teacher = teacher;  \n    } \n   \/\/重写克隆方法\n   public Student clone() { \n        Student student = null; \n        try { \n            student = (Student) super.clone(); \n            } catch (CloneNotSupportedException e) { \n            e.printStackTrace(); \n            } \n            return student; \n   } \n      \n}  \n\n\/\/定义老师类\nclass Teacher implements Cloneable{  \n    private String name;  \/\/老师姓名\n  \n    public String getName() {  \n        return name;  \n    }  \n  \n    public void setName(String name) {  \n        this.name= name;  \n    } \n\n   \/\/重写克隆方法，堆老师类进行克隆\n   public Teacher clone() { \n        Teacher teacher= null; \n        try { \n            teacher= (Teacher) super.clone(); \n            } catch (CloneNotSupportedException e) { \n            e.printStackTrace(); \n            } \n            return student; \n   } \n      \n}\npublic class Test {  \n      \n    public static void main(String args[]) {\n        Teacher teacher = new Teacher (); \/\/定义老师1\n        teacher.setName(&quot;刘老师&quot;);\n        Student stu1 = new Student();  \/\/定义学生1\n        stu1.setName(&quot;test1&quot;);           \n        stu1.setTeacher(teacher);\n        \n        Student stu2 = stu1.clone(); \/\/定义学生2\n        stu2.setName(&quot;test2&quot;);  \n        stu2.getTeacher().setName(&quot;王老师&quot;);\/\/修改老师\n        System.out.println(&quot;学生&quot; + stu1.getName + &quot;的老师是:&quot; + stu1.getTeacher().getName);  \n        System.out.println(&quot;学生&quot; + stu1.getName + &quot;的老师是:&quot; + stu2.getTeacher().getName);  \n    }  \n}\n<\/code><\/pre><p>运行结果：<\/p><pre><code>学生test1的老师是：王老师\n学生test2的老师是：王老师\n<\/code><\/pre><p>观察以上运行结果，我们可以发现：在我们给学生2修改老师的时候，学生1的老师也跟着被修改了。这就是浅拷贝带来的问题。<\/p><p>我们可以通过深拷贝来解决这种问题，<span class=\"orange\">其实深拷贝就是基于浅拷贝来递归实现具体的每个对象，<\/span>代码如下：<\/p><pre><code>   public Student clone() { \n        Student student = null; \n        try { \n            student = (Student) super.clone(); \n            Teacher teacher = this.teacher.clone();\/\/克隆teacher对象\n            student.setTeacher(teacher);\n            } catch (CloneNotSupportedException e) { \n            e.printStackTrace(); \n            } \n            return student; \n   } \n<\/code><\/pre><h3>适用场景<\/h3><p>前面我详述了原型模式的实现原理，那到底什么时候我们要用它呢？<\/p><p>在一些重复创建对象的场景下，我们就可以使用原型模式来提高对象的创建性能。例如，我在开头提到的，循环体内创建对象时，我们就可以考虑用clone的方式来实现。<\/p><p>例如：<\/p><pre><code>for(int i=0; i&lt;list.size(); i++){\n  Student stu = new Student(); \n  ...\n}\n\n<\/code><\/pre><p>我们可以优化为：<\/p><pre><code>Student stu = new Student(); \nfor(int i=0; i&lt;list.size(); i++){\n Student stu1 = (Student)stu.clone();\n  ...\n}\n<\/code><\/pre><p>除此之外，原型模式在开源框架中的应用也非常广泛。例如Spring中，@Service默认都是单例的。用了私有全局变量，若不想影响下次注入或每次上下文获取bean，就需要用到原型模式，我们可以通过以下注解来实现，@Scope(“prototype”)。<\/p><h2>享元模式<\/h2><p>享元模式是运用共享技术有效地最大限度地复用细粒度对象的一种模式。该模式中，以对象的信息状态划分，可以分为内部数据和外部数据。内部数据是对象可以共享出来的信息，这些信息不会随着系统的运行而改变；外部数据则是在不同运行时被标记了不同的值。<\/p><p>享元模式一般可以分为三个角色，分别为 Flyweight（抽象享元类）、ConcreteFlyweight（具体享元类）和 FlyweightFactory（享元工厂类）。抽象享元类通常是一个接口或抽象类，向外界提供享元对象的内部数据或外部数据；具体享元类是指具体实现内部数据共享的类；享元工厂类则是主要用于创建和管理享元对象的工厂类。<\/p><h3>实现享元模式<\/h3><p>我们还是通过一个简单的例子来实现一个享元模式：<\/p><pre><code>\/\/抽象享元类\ninterface Flyweight {\n    \/\/对外状态对象\n    void operation(String name);\n    \/\/对内对象\n    String getType();\n}\n<\/code><\/pre><pre><code>\/\/具体享元类\nclass ConcreteFlyweight implements Flyweight {\n    private String type;\n\n    public ConcreteFlyweight(String type) {\n        this.type = type;\n    }\n\n    @Override\n    public void operation(String name) {\n        System.out.printf(&quot;[类型(内在状态)] - [%s] - [名字(外在状态)] - [%s]\\n&quot;, type, name);\n    }\n\n    @Override\n    public String getType() {\n        return type;\n    }\n}\n<\/code><\/pre><pre><code>\/\/享元工厂类\nclass FlyweightFactory {\n    private static final Map&lt;String, Flyweight&gt; FLYWEIGHT_MAP = new HashMap&lt;&gt;();\/\/享元池，用来存储享元对象\n\n    public static Flyweight getFlyweight(String type) {\n        if (FLYWEIGHT_MAP.containsKey(type)) {\/\/如果在享元池中存在对象，则直接获取\n            return FLYWEIGHT_MAP.get(type);\n        } else {\/\/在响应池不存在，则新创建对象，并放入到享元池\n            ConcreteFlyweight flyweight = new ConcreteFlyweight(type);\n            FLYWEIGHT_MAP.put(type, flyweight);\n            return flyweight;\n        }\n    }\n}\n<\/code><\/pre><pre><code>public class Client {\n\n    public static void main(String[] args) {\n        Flyweight fw0 = FlyweightFactory.getFlyweight(&quot;a&quot;);\n        Flyweight fw1 = FlyweightFactory.getFlyweight(&quot;b&quot;);\n        Flyweight fw2 = FlyweightFactory.getFlyweight(&quot;a&quot;);\n        Flyweight fw3 = FlyweightFactory.getFlyweight(&quot;b&quot;);\n        fw1.operation(&quot;abc&quot;);\n        System.out.printf(&quot;[结果(对象对比)] - [%s]\\n&quot;, fw0 == fw2);\n        System.out.printf(&quot;[结果(内在状态)] - [%s]\\n&quot;, fw1.getType());\n    }\n}\n<\/code><\/pre><p>输出结果：<\/p><pre><code>[类型(内在状态)] - [b] - [名字(外在状态)] - [abc]\n[结果(对象对比)] - [true]\n[结果(内在状态)] - [b]\n<\/code><\/pre><p>观察以上代码运行结果，我们可以发现：如果对象已经存在于享元池中，则不会再创建该对象了，而是共用享元池中内部数据一致的对象。这样就减少了对象的创建，同时也节省了同样内部数据的对象所占用的内存空间。<\/p><h3>适用场景<\/h3><p>享元模式在实际开发中的应用也非常广泛。例如Java的String字符串，在一些字符串常量中，会共享常量池中字符串对象，从而减少重复创建相同值对象，占用内存空间。代码如下：<\/p><pre><code> String s1 = &quot;hello&quot;;\n String s2 = &quot;hello&quot;;\n System.out.println(s1==s2);\/\/true\n<\/code><\/pre><p>还有，在日常开发中的应用。例如，线程池就是享元模式的一种实现；将商品存储在应用服务的缓存中，那么每当用户获取商品信息时，则不需要每次都从redis缓存或者数据库中获取商品信息，并在内存中重复创建商品信息了。<\/p><h2>总结<\/h2><p>通过以上讲解，相信你对原型模式和享元模式已经有了更清楚的了解了。两种模式无论是在开源框架，还是在实际开发中，应用都十分广泛。<\/p><p>在不得已需要重复创建大量同一对象时，我们可以使用原型模式，通过clone方法复制对象，这种方式比用new和序列化创建对象的效率要高；在创建对象时，如果我们可以共用对象的内部数据，那么通过享元模式共享相同的内部数据的对象，就可以减少对象的创建，实现系统调优。<\/p><h2>思考题<\/h2><p><span class=\"orange\">上一讲的单例模式和这一讲的享元模式都是为了避免重复创建对象，你知道这两者的区别在哪儿吗？<\/span><\/p><p>期待在留言区看到你的答案。也欢迎你点击“请朋友读”，把今天的内容分享给身边的朋友，邀请他一起讨论。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/bb\/67\/bbe343640d6b708832c4133ec53ed967.jpg?wh=1110*659\" alt=\"unpreview\"><\/p>","footer_cover_data":{"img_url":"","mp_url":"","link_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{},"product_id":100028001,"like_count":57,"had_liked":false,"article_subtitle":"无","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/e0\/81\/e0f143c5dabddfccbd50e185ae004181.mp3","id":109980,"had_viewed":false,"article_title":"28 | 原型模式与享元模式：提升系统性能的利器","column_bgcolor":"#F6F7FB","share":{"content":"覆盖80%以上Java应用调优场景","title":"刘超 · Java性能调优实战","poster":"https:\/\/static001.geekbang.org\/resource\/image\/ed\/99\/edfa939ff065cb8368ed4227930df399.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/b2\/01\/b2f97b2cbefe40e19af4d28508387e01.jpg"},"is_video_preview":false,"article_summary":"这讲介绍两种模式的适用场景，了解了这些你就可以更高效地使用它们来提升系统性能了。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/bc\/c2\/bcf3e0f4ad8455b9c5e02bb563b8cbc2.jpeg","column_sale_type":2,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/b2\/01\/b2f97b2cbefe40e19af4d28508387e01.jpg","column_id":185,"audio_time_arr":{"m":"08","s":"36","h":"00"},"video_time":"","audio_title":"金山刘超-27","audio_md5":"e0f143c5dabddfccbd50e185ae004181","video_size":0,"text_read_percent":0,"comment_count":39,"cid":185,"article_sharetitle":"原型模式与享元模式：提升系统性能的利器","column_is_onboard":true,"article_cshort":"<p>你好，我是刘超。<\/p><p>原型模式和享元模式，前者是在创建多个实例时，对创建过程的性能进行调优；后者是用减少创建实例的方式，来调优系统性能。这么看，你会不会觉得两个模式有点相互矛盾呢？<\/p><p>其实不然，它们的使用是分场景的。在有些场景下，我们需要重复创建多个实例，例如在循环体中赋值一个对象，此时我们就可以采用原型模式来优化对象的创建过程；而在有些场景下，我们则可以避免重复创建多个实例，在内存中共享对象就好了。<\/p><p>今天我们就来看看这两种模式的适用场景，了解了这些你就可以更高效地使用它们提升系统性能了。<\/p><h2>原型模式<\/h2><p>我们先来了解下原型模式的实现。原型模式是通过给出一个原型对象来指明所创建的对象的类型，然后使用自身实现的克隆接口来复制这个原型对象，该模式就是用这种方式来创建出更多同类型的对象。<\/p><p><span class=\"orange\">使用这种方式创建新的对象的话，就无需再通过new实例化来创建对象了。<\/span>这是因为Object类的clone方法是一个本地方法，它可以直接操作内存中的二进制流，所以性能相对new实例化来说，更佳。<\/p><h3>实现原型模式<\/h3><p>我们现在通过一个简单的例子来实现一个原型模式：<\/p><pre><code>   \/\/实现Cloneable 接口的原型抽象类Prototype \n   class Prototype implements Cloneable {\n        \/\/重写clone方法\n        public Prototype clone(){\n            Prototype prototype = null;\n            try{\n                prototype = (Prototype)super.clone();\n            }catch(CloneNotSupportedException e){\n                e.printStackTrace();\n            }\n            return prototype;\n        }\n    }\n    \/\/实现原型类\n    class ConcretePrototype extends Prototype{\n        public void show(){\n            System.out.println(&quot;原型模式实现类&quot;);\n        }\n    }\n\n    public class Client {\n        public static void main(String[] args){\n            ConcretePrototype cp = new ConcretePrototype();\n            for(int i=0; i&lt; 10; i++){\n                ConcretePrototype clonecp = (ConcretePrototype)cp.clone();\n                clonecp.show();\n            }\n        }\n    }\n<\/code><\/pre><p><strong>要实现一个原型类，需要具备三个条件：<\/strong><\/p><ul>\n<li>实现Cloneable接口：Cloneable接口与序列化接口的作用类似，它只是告诉虚拟机可以安全地在实现了这个接口的类上使用clone方法。在JVM中，只有实现了Cloneable接口的类才可以被拷贝，否则会抛出CloneNotSupportedException异常。<\/li>\n<li>重写Object类中的clone方法：在Java中，所有类的父类都是Object类，而Object类中有一个clone方法，作用是返回对象的一个拷贝。<\/li>\n<li>在重写的clone方法中调用super.clone()：默认情况下，类不具备复制对象的能力，需要调用super.clone()来实现。<\/li>\n<\/ul>","video_width":0,"column_could_sub":true,"article_ctime":1563984000,"score":"61563984000","video_media_map":{},"video_preview":{},"video":0,"video_time_arr":{"m":"","s":"","h":""},"video_total_seconds":0},"extra":{},"error":{}}