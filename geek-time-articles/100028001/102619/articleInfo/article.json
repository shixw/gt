{"code":0,"data":{"video_id":"","sku":"100028001","video_cover":"","author_name":"刘超","text_read_version":0,"audio_size":9610752,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/a8\/78\/a87f3aaf6c22e6797307c691d0a26e78.jpg","subtitles":{},"product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/\/media\/audio\/22\/41\/22c883bdac1839c6516c1579832de241\/ld\/ld.m3u8","chapter_id":"0","column_had_sub":true,"audio_dubber":"李良","is_finished":false,"inline_video_subtitles":{},"like":{"had_done":false,"count":88},"neighbors":{"left":{"id":101995,"article_title":"14 | 多线程之锁优化（下）：使用乐观锁优化并行操作"},"right":{"id":102974,"article_title":"16 | 多线程调优（下）：如何优化多线程上下文切换？"}},"audio_time":"00:10:01","video_height":0,"rate_percent":0,"article_content":"<p>你好，我是刘超。<\/p><p>我们常说“实践是检验真理的唯一标准”，这句话不光在社会发展中可行，在技术学习中也同样适用。<\/p><p>记得我刚入职上家公司的时候，恰好赶上了一次抢购活动。这是系统重构上线后经历的第一次高并发考验，如期出现了大量超时报警，不过比我预料的要好一点，起码没有挂掉重启。<\/p><p>通过工具分析，我发现 cs（上下文切换每秒次数）指标已经接近了 60w ，平时的话最高5w。再通过日志分析，我发现了大量带有 wait() 的 Exception，由此初步怀疑是大量线程处理不及时导致的，进一步锁定问题是连接池大小设置不合理。后来我就模拟了生产环境配置，对连接数压测进行调节，降低最大线程数，最后系统的性能就上去了。<\/p><p>从实践中总结经验，我知道了<span class=\"orange\">在并发程序中，并不是启动更多的线程就能让程序最大限度地并发执行。<\/span>线程数量设置太小，会导致程序不能充分地利用系统资源；线程数量设置太大，又可能带来资源的过度竞争，导致上下文切换带来额外的系统开销。<\/p><p>你看，其实很多经验就是这么一点点积累的。那么今天，我就想和你分享下“上下文切换”的相关内容，希望也能让你有所收获。<\/p><h2>初识上下文切换<\/h2><p>我们首先得明白，上下文切换到底是什么。<\/p><p>其实在单个处理器的时期，操作系统就能处理多线程并发任务。处理器给每个线程分配 CPU 时间片（Time Slice），线程在分配获得的时间片内执行任务。<\/p><!-- [[[read_end]]] --><p>CPU 时间片是 CPU 分配给每个线程执行的时间段，一般为几十毫秒。在这么短的时间内线程互相切换，我们根本感觉不到，所以看上去就好像是同时进行的一样。<\/p><p><span class=\"orange\">时间片决定了一个线程可以连续占用处理器运行的时长。<\/span>当一个线程的时间片用完了，或者因自身原因被迫暂停运行了，这个时候，另外一个线程（可以是同一个线程或者其它进程的线程）就会被操作系统选中，来占用处理器。这种一个线程被暂停剥夺使用权，另外一个线程被选中开始或者继续运行的过程就叫做上下文切换（Context Switch）。<\/p><p>具体来说，一个线程被剥夺处理器的使用权而被暂停运行，就是“切出”；一个线程被选中占用处理器开始或者继续运行，就是“切入”。在这种切出切入的过程中，操作系统需要保存和恢复相应的进度信息，这个进度信息就是“上下文”了。<\/p><p>那上下文都包括哪些内容呢？具体来说，它包括了寄存器的存储内容以及程序计数器存储的指令内容。CPU 寄存器负责存储已经、正在和将要执行的任务，程序计数器负责存储CPU 正在执行的指令位置以及即将执行的下一条指令的位置。<\/p><p>在当前 CPU 数量远远不止一个的情况下，操作系统将 CPU 轮流分配给线程任务，此时的上下文切换就变得更加频繁了，并且存在跨 CPU 上下文切换，比起单核上下文切换，跨核切换更加昂贵。<\/p><h2>多线程上下文切换诱因<\/h2><p>在操作系统中，上下文切换的类型还可以分为进程间的上下文切换和线程间的上下文切换。而在多线程编程中，我们主要面对的就是线程间的上下文切换导致的性能问题，下面我们就重点看看究竟是什么原因导致了多线程的上下文切换。开始之前，先看下系统线程的生命周期状态。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/14\/7e\/14dde8a9486799ad1aa13aa06003757e.jpg?wh=1646*622\" alt=\"\"><\/p><p>结合图示可知，线程主要有“新建”（NEW）、“就绪”（RUNNABLE）、“运行”（RUNNING）、“阻塞”（BLOCKED）、“死亡”（DEAD）五种状态。到了Java层面它们都被映射为了NEW、RUNABLE、BLOCKED、WAITING、TIMED_WAITING、TERMINADTED等6种状态。<\/p><p>在这个运行过程中，线程由RUNNABLE转为非RUNNABLE的过程就是线程上下文切换。<\/p><p>一个线程的状态由 RUNNING 转为 BLOCKED ，再由 BLOCKED 转为 RUNNABLE ，然后再被调度器选中执行，这就是一个上下文切换的过程。<\/p><p>当一个线程从 RUNNING 状态转为 BLOCKED 状态时，我们称为一个线程的暂停，线程暂停被切出之后，操作系统会保存相应的上下文，以便这个线程稍后再次进入 RUNNABLE 状态时能够在之前执行进度的基础上继续执行。<\/p><p>当一个线程从 BLOCKED 状态进入到 RUNNABLE 状态时，我们称为一个线程的唤醒，此时线程将获取上次保存的上下文继续完成执行。<\/p><p>通过线程的运行状态以及状态间的相互切换，我们可以了解到，多线程的上下文切换实际上就是由多线程两个运行状态的互相切换导致的。<\/p><p>那么在线程运行时，线程状态由 RUNNING 转为 BLOCKED 或者由 BLOCKED 转为 RUNNABLE，这又是什么诱发的呢？<\/p><p>我们可以分两种情况来分析<span class=\"orange\">，一种是程序本身触发的切换，这种我们称为自发性上下文切换，另一种是由系统或者虚拟机诱发的非自发性上下文切换。<\/span><\/p><p>自发性上下文切换指线程由 Java 程序调用导致切出，在多线程编程中，执行调用以下方法或关键字，常常就会引发自发性上下文切换。<\/p><ul>\n<li>sleep()<\/li>\n<li>wait()<\/li>\n<li>yield()<\/li>\n<li>join()<\/li>\n<li>park()<\/li>\n<li>synchronized<\/li>\n<li>lock<\/li>\n<\/ul><p>非自发性上下文切换指线程由于调度器的原因被迫切出。常见的有：线程被分配的时间片用完，虚拟机垃圾回收导致或者执行优先级的问题导致。<\/p><p>这里重点说下“<span class=\"orange\">虚拟机垃圾回收为什么会导致上下文切换<\/span>”。在 Java 虚拟机中，对象的内存都是由虚拟机中的堆分配的，在程序运行过程中，新的对象将不断被创建，如果旧的对象使用后不进行回收，堆内存将很快被耗尽。Java 虚拟机提供了一种回收机制，对创建后不再使用的对象进行回收，从而保证堆内存的可持续性分配。而这种垃圾回收机制的使用有可能会导致 stop-the-world 事件的发生，这其实就是一种线程暂停行为。<\/p><h2>发现上下文切换<\/h2><p>我们总说上下文切换会带来系统开销，那它带来的性能问题是不是真有这么糟糕呢？我们又该怎么去监测到上下文切换？上下文切换到底开销在哪些环节？接下来我将给出一段代码，来对比串联执行和并发执行的速度，然后一一解答这些问题。<\/p><pre><code>public class DemoApplication {\n       public static void main(String[] args) {\n              \/\/运行多线程\n              MultiThreadTester test1 = new MultiThreadTester();\n              test1.Start();\n              \/\/运行单线程\n              SerialTester test2 = new SerialTester();\n              test2.Start();\n       }\n       \n       \n       static class MultiThreadTester extends ThreadContextSwitchTester {\n              @Override\n              public void Start() {\n                     long start = System.currentTimeMillis();\n                     MyRunnable myRunnable1 = new MyRunnable();\n                     Thread[] threads = new Thread[4];\n                     \/\/创建多个线程\n                     for (int i = 0; i &lt; 4; i++) {\n                           threads[i] = new Thread(myRunnable1);\n                           threads[i].start();\n                     }\n                     for (int i = 0; i &lt; 4; i++) {\n                           try {\n                                  \/\/等待一起运行完\n                                  threads[i].join();\n                           } catch (InterruptedException e) {\n                                  \/\/ TODO Auto-generated catch block\n                                  e.printStackTrace();\n                           }\n                     }\n                     long end = System.currentTimeMillis();\n                     System.out.println(&quot;multi thread exce time: &quot; + (end - start) + &quot;s&quot;);\n                     System.out.println(&quot;counter: &quot; + counter);\n              }\n              \/\/ 创建一个实现Runnable的类\n              class MyRunnable implements Runnable {\n                     public void run() {\n                           while (counter &lt; 100000000) {\n                                  synchronized (this) {\n                                         if(counter &lt; 100000000) {\n                                                increaseCounter();\n                                         }\n                                         \n                                  }\n                           }\n                     }\n              }\n       }\n       \n      \/\/创建一个单线程\n       static class SerialTester extends ThreadContextSwitchTester{\n              @Override\n              public void Start() {\n                     long start = System.currentTimeMillis();\n                     for (long i = 0; i &lt; count; i++) {\n                           increaseCounter();\n                     }\n                     long end = System.currentTimeMillis();\n                     System.out.println(&quot;serial exec time: &quot; + (end - start) + &quot;s&quot;);\n                     System.out.println(&quot;counter: &quot; + counter);\n              }\n       }\n\n       \/\/父类\n       static abstract class ThreadContextSwitchTester {\n              public static final int count = 100000000;\n              public volatile int counter = 0;\n              public int getCount() {\n                     return this.counter;\n              }\n              public void increaseCounter() {\n                     \n                     this.counter += 1;\n              }\n              public abstract void Start();\n       }\n}\n<\/code><\/pre><p>执行之后，看一下两者的时间测试结果：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/be\/47\/be3a4dbe5abbafc7121bae9ab46b1f47.jpg?wh=1546*198\" alt=\"\"><\/p><p><strong>通过数据对比我们可以看到：<\/strong>串联的执行速度比并发的执行速度要快。这就是因为线程的上下文切换导致了额外的开销，使用 Synchronized 锁关键字，导致了资源竞争，从而引起了上下文切换，但即使不使用 Synchronized 锁关键字，并发的执行速度也无法超越串联的执行速度，这是因为多线程同样存在着上下文切换。<span class=\"orange\">Redis、NodeJS的设计就很好地体现了单线程串行的优势。<\/span><\/p><p>在 Linux 系统下，可以使用 Linux 内核提供的 vmstat 命令，来监视 Java 程序运行过程中系统的上下文切换频率，cs如下图所示：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/73\/29\/73c791c705eb056ef3c44fd2bf8ecd29.jpg?wh=1408*334\" alt=\"\"><\/p><p>如果是监视某个应用的上下文切换，就可以使用 pidstat命令监控指定进程的 Context Switch 上下文切换。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/f5\/f7\/f5ecbf7c77a3ecffcc79d2854b3459f7.jpg?wh=1564*582\" alt=\"\"><\/p><p>由于 Windows 没有像 vmstat 这样的工具，在 Windows 下，我们可以使用 Process Explorer，来查看程序执行时，线程间上下文切换的次数。<\/p><p>至于系统开销具体发生在切换过程中的哪些具体环节，总结如下：<\/p><ul>\n<li>操作系统保存和恢复上下文；<\/li>\n<li>调度器进行线程调度；<\/li>\n<li>处理器高速缓存重新加载；<\/li>\n<li>上下文切换也可能导致整个高速缓存区被冲刷，从而带来时间开销。<\/li>\n<\/ul><h2>总结<\/h2><p>上下文切换就是一个工作的线程被另外一个线程暂停，另外一个线程占用了处理器开始执行任务的过程。系统和 Java 程序自发性以及非自发性的调用操作，就会导致上下文切换，从而带来系统开销。<\/p><p>线程越多，系统的运行速度不一定越快。那么我们平时在并发量比较大的情况下，<span class=\"orange\">什么时候用单线程，什么时候用多线程呢？<\/span><\/p><p>一般在单个逻辑比较简单，而且速度相对来非常快的情况下，我们可以使用单线程。例如，我们前面讲到的 Redis，从内存中快速读取值，不用考虑 I\/O 瓶颈带来的阻塞问题。而在逻辑相对来说很复杂的场景，等待时间相对较长又或者是需要大量计算的场景，我建议使用多线程来提高系统的整体性能。例如，NIO 时期的文件读写操作、图像处理以及大数据分析等。<\/p><h2>思考题<\/h2><p>以上我们主要讨论的是多线程的上下文切换，前面我讲分类的时候还曾提到了进程间的上下文切换。那么你知道在多线程中使用Synchronized还会发生进程间的上下文切换吗？具体又会发生在哪些环节呢？<\/p><p>期待在留言区看到你的见解。也欢迎你点击“请朋友读”，把今天的内容分享给身边的朋友，邀请他一起讨论。<\/p><p><\/p>","footer_cover_data":{"img_url":"","mp_url":"","link_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{},"product_id":100028001,"like_count":105,"had_liked":false,"article_subtitle":"无","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/22\/41\/22c883bdac1839c6516c1579832de241.mp3","id":102619,"had_viewed":false,"article_title":"15 | 多线程调优（上）：哪些操作导致了上下文切换？","column_bgcolor":"#F6F7FB","share":{"content":"覆盖80%以上Java应用调优场景","title":"刘超 · Java性能调优实战","poster":"https:\/\/static001.geekbang.org\/resource\/image\/ed\/99\/edfa939ff065cb8368ed4227930df399.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/b2\/01\/b2f97b2cbefe40e19af4d28508387e01.jpg"},"is_video_preview":false,"article_summary":"在并发程序中，并不是启动更多的线程就能让程序最大限度地并发执行，还要考虑上下文切换带来的系统开销。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/39\/63\/396cc7787338f96f4bff1cedac04a663.jpeg","column_sale_type":2,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/b2\/01\/b2f97b2cbefe40e19af4d28508387e01.jpg","column_id":185,"audio_time_arr":{"m":"10","s":"01","h":"00"},"video_time":"","audio_title":"Java性能15","audio_md5":"22c883bdac1839c6516c1579832de241","video_size":0,"text_read_percent":0,"comment_count":46,"cid":185,"article_sharetitle":"哪些操作导致了多线程上下文切换？","column_is_onboard":true,"article_cshort":"<p>你好，我是刘超。<\/p><p>我们常说“实践是检验真理的唯一标准”，这句话不光在社会发展中可行，在技术学习中也同样适用。<\/p><p>记得我刚入职上家公司的时候，恰好赶上了一次抢购活动。这是系统重构上线后经历的第一次高并发考验，如期出现了大量超时报警，不过比我预料的要好一点，起码没有挂掉重启。<\/p><p>通过工具分析，我发现 cs（上下文切换每秒次数）指标已经接近了 60w ，平时的话最高5w。再通过日志分析，我发现了大量带有 wait() 的 Exception，由此初步怀疑是大量线程处理不及时导致的，进一步锁定问题是连接池大小设置不合理。后来我就模拟了生产环境配置，对连接数压测进行调节，降低最大线程数，最后系统的性能就上去了。<\/p><p>从实践中总结经验，我知道了<span class=\"orange\">在并发程序中，并不是启动更多的线程就能让程序最大限度地并发执行。<\/span>线程数量设置太小，会导致程序不能充分地利用系统资源；线程数量设置太大，又可能带来资源的过度竞争，导致上下文切换带来额外的系统开销。<\/p><p>你看，其实很多经验就是这么一点点积累的。那么今天，我就想和你分享下“上下文切换”的相关内容，希望也能让你有所收获。<\/p><h2>初识上下文切换<\/h2><p>我们首先得明白，上下文切换到底是什么。<\/p><p>其实在单个处理器的时期，操作系统就能处理多线程并发任务。处理器给每个线程分配 CPU 时间片（Time Slice），线程在分配获得的时间片内执行任务。<\/p>","video_width":0,"column_could_sub":true,"article_ctime":1561132800,"score":"41561132800","video_media_map":{},"video_preview":{},"video":0,"video_time_arr":{"m":"","s":"","h":""},"video_total_seconds":0},"extra":{},"error":{}}