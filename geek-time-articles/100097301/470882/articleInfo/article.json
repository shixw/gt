{"code":0,"data":{"video_id":"","sku":"100097301","video_cover":"","author_name":"范学雷","text_read_version":0,"audio_size":8165064,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/00\/ee\/0011f6a08b61a30c85209184b10325ee.jpg","subtitles":{},"product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/media\/audio\/6b\/8c\/6bb8b0cb338f9e3d0942b35a1e7ae88c\/ld\/ld.m3u8","chapter_id":"0","column_had_sub":true,"audio_dubber":"范学雷","is_finished":false,"inline_video_subtitles":{},"like":{"had_done":false,"count":1},"neighbors":{"left":{"id":469994,"article_title":"15 | 现代密码：你用的加密算法过时了吗？"},"right":{"id":472516,"article_title":"17 | 模块系统：为什么Java需要模块化？"}},"audio_time":"00:08:31","video_height":0,"rate_percent":0,"article_content":"<p>你好，我是范学雷。今天，我们讨论Java公开接口的废弃。<\/p><p>像所有的事物一样，公开接口也有生命周期。要废弃那些被广泛使用的、或者还有人使用的公开接口，是一个非常痛苦的过程。该怎么废弃一个公开接口，该怎么减少废弃接口对我们的影响呢？这是这一次我们要讨论的话题。<\/p><p>我们先来看看阅读案例。<\/p><h2>阅读案例<\/h2><p>在 JDK 中，一个公开的接口，可能会因为多种多样的原因被废弃。比如说，这个接口的设计是危险的，或者有了更新的、更好的替代接口。不管是什么原因，废弃接口的使用者们都需要尽快迁移代码，转换到替代方案上来。<\/p><p>在JDK中，公开接口的废弃需要使用两种不同的机制，也就是“Deprecated” 注解（annotation）和“Deprecated”文档标记（JavaDoc tag）。<\/p><p>Deprecated的注解会编译到类文件里，并且可以在运行时查验。这就允许像javac这样的工具检测和标记已废弃接口的使用情况了。<\/p><p>Deprecated文档标记用于描述废弃接口的文档中。除了标记接口的废弃状态之外，一般情况下，我们还要描述废弃的原因和替代的方案。<\/p><p>下面的这段代码，就是使用Java注解和文档标记来废弃一个公开接口的例子。<\/p><pre><code class=\"language-java\">public sealed abstract class Digest {\n    \/**\n     * -- snipped\n     *\n     * @deprecated This method is not performance friendly. Use\n     *             {@link #digest(byte[], byte[]) instead.\n     *\/\n    @Deprecated\n    public abstract byte[] digest(byte[] message);\n\n    \/\/ snipped\n    public void digest(byte[] message, byte[] digestValue) {\n        \/\/ snipped\n    }\n}\n<\/code><\/pre><!-- [[[read_end]]] --><p>如果一段程序使用了废弃接口，编译的时候，就会提出警告。但是，有很多编译环境的配置，把编译警告看作是编译错误。为了解决这样的问题，JDK还提供了“消除使用废弃接口的编译警告”的选项。也就是SuppressWarnings注解。<\/p><pre><code class=\"language-java\">@SuppressWarnings(\"deprecation\")\npublic static void main(String[] args) {\n    try {\n        Digest.of(\"SHA-256\")\n              .digest(\"Hello, world!\".getBytes());\n    } catch (NoSuchAlgorithmException ex) {\n        \/\/ ignore\n    }\n}\n<\/code><\/pre><p>公开接口的废弃机制，是在JDK 1.5的时候发布的。 这种机制像一座设计者和使用者之间的沟通桥梁，减轻了双方定义或者使用废弃接口的痛苦。<\/p><p>遗憾的是，直到现在，公开接口的废弃，依然是一个复杂、痛苦的过程。一个公开的接口，从声明废弃，到彻底删除是一个漫长的过程。在JDK中，还存在着大量废弃了20多年都无法删除的公开接口。<\/p><p>为什么删除废弃的公开接口这么困难呢？如果从废弃机制本身的角度来思考，下面几个问题延迟了废弃接口使用者的迁移意愿和努力。<\/p><p>第一个问题，也是最重要的问题，就是SuppressWarnings注解的使用。SuppressWarnings注解的本意是消除编译警告，保持向后的编译兼容性。可是一旦编译警告消除，SuppressWarnings注解也就抵消了Deprecated注解的功效。代码的维护者一旦使用了SuppressWarnings注解，就很难再有更合适的工具，让自己知道还在使用的废弃接口有哪些了。不知道，当然就不会有行动。<\/p><p>第二个问题，就是废弃接口的使用者并不担心使用废弃接口。虽然我们都知道不应该使用废弃的接口，但是因为一些人认为没有紧急迁移的必要性，也不急着制定代码迁移的时间表，所以倾向于先使用SuppressWarnings注解把编译警告消除了，以后再说迁移的事情。然后，就掉入了第一个问题的陷阱。<\/p><p>第三个问题，就是废弃接口的使用者并不知道接口废弃了多久。在接口使用者的眼里，废弃了十年，和废弃了一年的接口，没有什么区别。可是，在接口维护者的眼里，废弃了十年的接口，应该可以放心地删除了。然而，使用者并没有感知到这样的区别。没有感知，当然也就没有急迫感了。<\/p><p>一旦一个接口被声明为废弃，它的问题也就再难进入接口维护者的任务列表里了。所以，这个接口的实现可能充满了风险和错误。于是局面就变成了，接口维护者难以删除废弃的接口，接口的使用者又不能获得必要的提示，这种情况实在有点尴尬。<\/p><h2>改进的废弃<\/h2><p>上面这些问题，在JDK 9的接口废弃机制里有了重大的改进。<\/p><p>第一个改进是添加了一个新的工具，jdeprscan。有了这个工具，就可以扫描编译好的Java类或者包，看看有没有使用废弃的接口了。即使代码使用了SuppressWarnings注解，jdeprscan的结果也不受影响。这个工具解决了我们在阅读案例里提到的第一个问题。<\/p><p>另外，如果我们使用第三方的类库，或者已经编译好的类库，发现对废弃接口的依赖关系很重要。如果将来废弃接口被删除，使用废弃接口的类库将不能正常运行。而jdeprscan允许我们在使用一个类库之前进行废弃依赖关系检查，提前做好风险的评估。<\/p><p>第二个改进是给Deprecated注解增加了一个“forRemoval”的属性。如果这个属性设置为“true\"，那就表示这个废弃接口的删除已经提上日程了。两到三个版本之后，这个废弃的接口就会被删除。这样的改进，强调了代码迁移的紧急性，它给了使用者一个明确的提示。这个改进，解决了我们在阅读案例里提到的第二个问题。<\/p><p>第三个改进是给Deprecated注解增加了一个“since”的属性。这个属性会说明这个接口是在哪一个版本废弃的。如果我们发现一个接口已经废弃了三年以上，就要考虑尽最大努力进行代码迁移了。这样的改进，给了废弃接口的使用者一个时间上的概念，也方便开发者安排代码迁移的时间表。这个改进，解决了我们在阅读案例里提到的第三个问题。<\/p><p>下面的这段代码，就是一个使用了这两种属性的例子。<\/p><pre><code class=\"language-java\">public sealed abstract class Digest {\n    \/**\n     * -- snipped\n     *\n     * @deprecated This method is not performance friendly. Use\n     *             {@link #digest(byte[], byte[]) instead.\n     *\/\n    @Deprecated(since = \"1.4\", forRemoval = true)\n    public abstract byte[] digest(byte[] message);\n\n    \/\/ snipped\n    public void digest(byte[] message, byte[] digestValue) {\n        \/\/ snipped\n    }\n}\n<\/code><\/pre><p>如果在Deprecated注解里新加入“forRemoval”属性，并且设置为“true\"，那么以前的SuppressWarnings就会失去效果。要想消除掉编译警告，我们需要使用新的选项。就像下面的例子这样。<\/p><pre><code class=\"language-java\">@SuppressWarnings(\"removal\")\npublic static void main(String[] args) {\n    try {\n        Digest.of(\"SHA-256\")\n              .digest(\"Hello, world!\".getBytes());\n    } catch (NoSuchAlgorithmException ex) {\n        \/\/ ignore\n    }\n}\n<\/code><\/pre><p>当一个废弃接口的删除提上日程的时候，添加“forRemoval”属性让我们又有一次机会在代码编译的时候，重新审视还在使用的废弃接口了。<\/p><h2>废弃三部曲<\/h2><p>有了JDK 9的废弃改进，我们就能够看到接口废弃的一般过程了。<\/p><p>第一步，废弃一个接口，标明废弃的版本号，并且描述替代方案；<\/p><p>第二步，添加“forRemoval”属性，把删除的计划提上日程；<\/p><p>第三步，删除废弃的接口。<\/p><p>对于接口的使用者，我们应该尽量在第一步就做好代码的迁移；如果我们不能在第一步完成迁移，当看到第二步的信号时，我们也要把代码迁移的工作提高优先级，以免影响后续的版本升级。<\/p><p>对于接口的维护者，我们需要尽量按照这个过程退役一个接口，给接口的使用者充分的时间和信息，让他们能够完成代码的迁移。<\/p><h2>总结<\/h2><p>好，到这里，我来做个小结。刚才，我们讲了接口废弃的现实问题，以及接口废弃的三部曲。总体来说，我们要管理好废弃的接口。接口的废弃要遵守程序，有序推进；代码的迁移要做好计划，尽快完成。<\/p><p>另外，我们要使用好jdeprscan这个新的工具。在使用一个类库之前，要有意识地进行废弃依赖关系检查，提前做好代码风险的评估。<\/p><p>如果面试中聊到了接口废弃的问题，你可以聊一聊接口废弃的三部曲，以及每一步应该使用的Java注解形式。<\/p><h2>思考题<\/h2><p>今天的思考题，我们来练习一下接口废弃的过程。前面，我们练习过表示形状的封闭类。假设要废弃表示正方形的许可类，我们该怎么做呢？代码该怎么改动呢？<\/p><p>为了方便你阅读，我把表示形状的封闭类的代码拷贝到了下面。请再一次阅读“废弃三部曲”这一小节，然后试着修改下面的代码。<\/p><pre><code class=\"language-plain\">package co.ivi.jus.retire.review.xuelei;\n\npublic abstract sealed class Shape {\n    public final String id;\n\n    public Shape(String id) {\n        this.id = id;\n    }\n\n    public abstract double area();\n\n    public static final class Circle extends Shape {\n        public final double radius;\n\n        public Circle(String id, double radius) {\n            super(id);\n            this.radius = radius;\n        }\n\n        @Override\n        public double area() {\n            return Math.PI * radius * radius;\n        }\n    }\n\n    public static final class Square extends Shape {\n        public final double side;\n\n        public Square(String id, double side) {\n            super(id);\n            this.side = side;\n        }\n\n        @Override\n        public double area() {\n            return side * side;\n        }\n    }\n\n    \/\/ Here is your code for Rectangle.\n\n    \/\/ Here is the test for circle.\n    public static boolean isCircle(Shape shape) {\n        \/\/ Here goes your update.\n        return (shape instanceof Circle);\n    }\n\n    \/\/ Here is the code to run your test.\n    public static void main(String[] args) {\n        \/\/ Here is your code.\n    }\n}\n<\/code><\/pre><p>欢迎你在留言区留言、讨论，分享你的阅读体验以及你的设计和代码。我们下节课见！<\/p><p>注：本文使用的完整的代码可以从<a href=\"https:\/\/github.com\/XueleiFan\/java-up\/tree\/main\/src\/main\/java\/co\/ivi\/jus\/retire\">GitHub<\/a>下载，你可以通过修改<a href=\"https:\/\/github.com\/XueleiFan\/java-up\/tree\/main\/src\/main\/java\/co\/ivi\/jus\/retire\">GitHub<\/a>上<a href=\"https:\/\/github.com\/XueleiFan\/java-up\/blob\/main\/src\/main\/java\/co\/ivi\/jus\/retire\/review\/xuelei\/Shape.java\">review template<\/a>代码，完成这次的思考题。如果你想要分享你的修改或者想听听评审的意见，请提交一个 GitHub的拉取请求（Pull Request），并把拉取请求的地址贴到留言里。这一小节的拉取请求代码，请在<a href=\"https:\/\/github.com\/XueleiFan\/java-up\/tree\/main\/src\/main\/java\/co\/ivi\/jus\/retire\/review\">接口废弃专用的代码评审目录<\/a>下，建一个以你的名字命名的子目录，代码放到你专有的子目录里。比如，我的代码，就放在retire\/review\/xuelei的目录下面。<\/p>","footer_cover_data":{"img_url":"","mp_url":"","link_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{},"product_id":100097301,"like_count":1,"had_liked":false,"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/6b\/8c\/6bb8b0cb338f9e3d0942b35a1e7ae88c.mp3","id":470882,"had_viewed":false,"article_title":"16 | 改进的废弃，怎么避免使用废弃的特性？","column_bgcolor":"#F6F7FB","share":{"content":"手把手带你吃透Java新特性","title":"范学雷 · 深入剖析Java新特性","poster":"https:\/\/static001.geekbang.org\/resource\/image\/d8\/5c\/d8cdd052b756bd3a2da2c8a75b6fc85c.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/8e\/cf\/8e2874ce3bcbb86c9ec95b86d9e00acf.jpg"},"is_video_preview":false,"article_summary":"今天，我们讨论Java公开接口的废弃。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/13\/41\/13a42c32a7fe9b867a463578333b5941.jpeg","column_sale_type":2,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/8e\/cf\/8e2874ce3bcbb86c9ec95b86d9e00acf.jpg","column_id":455,"audio_time_arr":{"m":"08","s":"31","h":"00"},"video_time":"","audio_title":"范学雷-16.mp3","audio_md5":"6bb8b0cb338f9e3d0942b35a1e7ae88c","video_size":0,"text_read_percent":0,"comment_count":4,"cid":455,"article_sharetitle":"改进的废弃，怎么避免使用废弃的特性？","column_is_onboard":true,"article_cshort":"<p>你好，我是范学雷。今天，我们讨论Java公开接口的废弃。<\/p><p>像所有的事物一样，公开接口也有生命周期。要废弃那些被广泛使用的、或者还有人使用的公开接口，是一个非常痛苦的过程。该怎么废弃一个公开接口，该怎么减少废弃接口对我们的影响呢？这是这一次我们要讨论的话题。<\/p><p>我们先来看看阅读案例。<\/p><h2>阅读案例<\/h2><p>在 JDK 中，一个公开的接口，可能会因为多种多样的原因被废弃。比如说，这个接口的设计是危险的，或者有了更新的、更好的替代接口。不管是什么原因，废弃接口的使用者们都需要尽快迁移代码，转换到替代方案上来。<\/p><p>在JDK中，公开接口的废弃需要使用两种不同的机制，也就是“Deprecated” 注解（annotation）和“Deprecated”文档标记（JavaDoc tag）。<\/p><p>Deprecated的注解会编译到类文件里，并且可以在运行时查验。这就允许像javac这样的工具检测和标记已废弃接口的使用情况了。<\/p><p>Deprecated文档标记用于描述废弃接口的文档中。除了标记接口的废弃状态之外，一般情况下，我们还要描述废弃的原因和替代的方案。<\/p><p>下面的这段代码，就是使用Java注解和文档标记来废弃一个公开接口的例子。<\/p><pre><code class=\"language-java\">public sealed abstract class Digest {\n    \/**\n     * -- snipped\n     *\n     * @deprecated This method is not performance friendly. Use\n     *             {@link #digest(byte[], byte[]) instead.\n     *\/\n    @Deprecated\n    public abstract byte[] digest(byte[] message);\n\n    \/\/ snipped\n    public void digest(byte[] message, byte[] digestValue) {\n        \/\/ snipped\n    }\n}\n<\/code><\/pre>","video_width":0,"column_could_sub":true,"article_ctime":1640102400,"score":"41640102400","video_media_map":{},"video_preview":{},"video":0,"video_time_arr":{"m":"","s":"","h":""},"video_total_seconds":0},"extra":{},"error":{}}