{"code":0,"data":{"video_id":"","sku":"100097301","video_cover":"","author_name":"范学雷","text_read_version":0,"audio_size":11047184,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/e3\/50\/e313ba823df14eed757c11fbfe4e6550.jpg","subtitles":{},"product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/media\/audio\/c7\/6a\/c79ab8a4ec62ce7cf71f9b20a907ff6a\/ld\/ld.m3u8","chapter_id":"0","column_had_sub":true,"audio_dubber":"范学雷","is_finished":false,"inline_video_subtitles":{},"like":{"had_done":false,"count":1},"neighbors":{"left":{"id":461630,"article_title":"08 | 抛出异常，是不是错误处理的第一选择？"},"right":{"id":464209,"article_title":"10 | Flow，是异步编程的终极选择吗？"}},"audio_time":"00:11:32","video_height":0,"rate_percent":0,"article_content":"<p>你好，我是范学雷。今天，我们接着讨论Java的错误处理。这一讲，是上一次我们讨论的关于错误处理问题的继续和升级。<\/p><p>就像我们上一次讨论到的，Java的异常处理是一个对代码性能有着重要影响的因素。所以说，Java错误处理的缺陷和滥用也成为了一个热度始终不减的老话题。但是，Java的异常处理，有着天生的优势，特别是它在错误排查方面的作用，我们很难找到合适的替代方案。<\/p><p>那有没有可能改进Java的异常处理，保持它在错误排查方面的优势的同时，提高它的性能呢？这是一个又让马儿跑，又让马儿不吃草的问题。不过，这并不妨碍我们顺着这个思路，找一找其中的可能性。<\/p><p>我们还是先从阅读案例开始，来试着找一找其中的蛛丝马迹吧。<\/p><h2>阅读案例<\/h2><p>要尝试解决一个问题，我们首先要做的，就是把问题梳理清楚，定义好。我们先来看看Java异常处理的三个典型使用场景。<\/p><p>下面的这段代码里，有三个不同的异常使用方法。在分别解析的过程中，你可能会遇到几个疑问，不过别急，带着这几个问题，我们最后来一一解读。<\/p><pre><code class=\"language-java\">package co.ivi.jus.stack.former;\n\nimport java.security.NoSuchAlgorithmException;\n\npublic class UseCase {\n    public static void main(String[] args) {\n        String[] algorithms = {\"SHA-128\", \"SHA-192\"};\n        \n        String availableAlgorithm = null;\n        for (String algorithm : algorithms) {\n            Digest md;\n            try {\n                md = Digest.of(algorithm);\n            } catch (NoSuchAlgorithmException ex) {\n                \/\/ ignore, continue to use the next algorithm.\n                continue;\n            }\n            \n            try {\n                md.digest(\"Hello, world!\".getBytes());\n            } catch (Exception ex) {\n                System.getLogger(\"co.ivi.jus.stack.former\")\n                        .log(System.Logger.Level.WARNING,\n                             algorithm + \" does not work\",\n                             ex);\n                continue;\n            }\n            \n            availableAlgorithm = algorithm;\n        }\n        \n        if (availableAlgorithm != null) {\n            System.out.println(availableAlgorithm + \" is available\");\n        } else {\n            throw new RuntimeException(\"No available hash algorithm\");\n        }\n    }\n}\n<\/code><\/pre><!-- [[[read_end]]] --><h3>可恢复异常<\/h3><p>第一种就是可恢复的异常处理。<\/p><p>这是什么意思呢？对于代码里的异常NoSuchAlgorithmException来说，这段代码尝试捕获、识别这个异常，然后再从异常里恢复过来，继续执行代码。我们把这种可以从异常里恢复过来，继续执行的异常处理叫做可恢复的异常处理，简称为可恢复异常。<\/p><p>为了深入理解可恢复异常，我们需要仔细地看看NoSuchAlgorithmException这个异常的处理过程。这个处理的过程，其实就只有一行有效的代码，也就是catch语句。<\/p><pre><code class=\"language-java\">} catch (NoSuchAlgorithmException nsae) {\n    \/\/ ignore, continue to use the next algorithm.\n}\n<\/code><\/pre><p>只要catch语句能够捕获、识别到这个异常，这个异常的生命周期就结束了。catch只需要知道异常的名字，而不需要知道异常的调用堆栈。不使用异常的调用堆栈，也就意味着这样的异常处理，极大地消弱了Java异常在错误排查方面的作用。<\/p><p><strong>既然可恢复异常不使用异常的调用堆栈，是不是可恢复异常就不需要生成调用堆栈了呢？这是我们提出的第一个问题。<\/strong><\/p><p>从Java异常的性能基准测试结果看，我们知道，生成异常的调用堆栈是异常处理影响性能的最主要因素。如果不需要生成调用堆栈，那么Java异常的处理性能就会有成百上千倍的提升。所以，如果我们找到了第一个问题的答案，我们就解决了可恢复异常的性能瓶颈。<\/p><h3>不可恢复异常<\/h3><p>好了，我们再回头看看第二个使用场景。对于代码里的异常RuntimeException来说，上面的代码并没有尝试捕获、识别它。这个异常直接导致了程序的退出，并且把异常的信息和调用堆栈打印了出来。<\/p><pre><code class=\"language-java\">Exception in thread \"main\" java.lang.RuntimeException: No available hash algorithm\n\tat co.ivi.jus.stack.former.UseCase.main(UseCase.java:27)\n<\/code><\/pre><p>这样的异常处理方式导致了程序的中断，程序不能从异常抛出的地方恢复过来。我们把这种方式，叫做不可恢复的异常处理，简称为不可恢复异常。<\/p><p>调用堆栈对于不可恢复异常来说至关重要，因为我们可以从异常调用堆栈的打印信息里，快速定位到出问题的代码。毫无疑问，这加快了问题排查，降低了运维的成本。<\/p><p>由于不可恢复异常中断了程序的运行，所以它的性能开销是一次性的。因此，不可恢复异常对于性能的影响，其实我们不用太在意。<\/p><p>使用了异常信息和调用堆栈，又不用担心性能的影响，不可恢复异常似乎很理想。可是，在多大的程度上，我们可以允许程序由于异常中断而退出呢？这是一个很难回答的问题。<\/p><p>试想一下，如果是作为服务器的程序，我们会希望它能一直运行，遇到异常能够恢复过来。所以一般情况下，服务器的场景下，不会使用不可恢复异常。<\/p><p>现在的客户端程序呢？比如手机里的app，如果遇到异常就崩溃，我们就不会有耐心继续使用了。似乎，客户端的程序，也没有多少不可恢复异常的使用场景。<\/p><p>也许，不可恢复异常的使用场景，仅仅存在于我们的演示程序里。高质量的产品里，似乎很难允许不可恢复异常的存在。<\/p><p><strong>既然我们无法忍受程序的崩溃，那么不可恢复异常还有存在的必要吗？这是我们提出的第二个问题。<\/strong><\/p><h3>记录的调试信息<\/h3><p>最后，我们再来看看第三个使用场景。对于代码里的异常Exception来说，这段代码尝试捕获、识别这个异常，然后从异常里恢复过来继续执行代码。它是一个可恢复的异常。和第一个场景不同的是，这段代码还在日志里记录了下了这个异常；一般来说，这个异常的调试信息，也就是异常信息和调用堆栈，也会被详细地记载在日志里。<\/p><p>其实，这也是可恢复异常的一个典型的使用场景；程序可以恢复，但是异常信息可以记录待查。<\/p><p>我们再来仔细看看异常信息是怎么记录在案的。为了方便我们观察，我把日志记录的这几行代码单独摘抄了出来。<\/p><pre><code class=\"language-java\">System.getLogger(\"co.ivi.jus.stack.former\")\n        .log(System.Logger.Level.WARNING,\n             algorithm + \" does not work\",\n             ex);\n<\/code><\/pre><p>我们可以看到，日志记录下来了如下的关键信息：<\/p><ol>\n<li>在异常捕获的场景下，这个异常的记录方式，包括是否记录（“co.ivi.jus.stack.former”）；<\/li>\n<li>在异常捕获的场景下，这个异常的记录地点（System.getLogger()）；<\/li>\n<li>在异常捕获的场景下，这个异常的严重程度（Logger.Level）；<\/li>\n<li>在异常捕获的场景下，这个异常表示的影响（“[algorithm] does not work”）；<\/li>\n<li>异常生成的时候携带的信息，包括异常信息和调用堆栈（ex）。<\/li>\n<\/ol><p>其中，前四项信息，是在方法调用的代码里生成的；第五项，是在方法实现的代码里生成的。也就是说，记录在案的调试信息，既包括调用代码的信息，也包括实现代码的信息。<\/p><p><strong>如果放弃了Java的异常处理机制，我们还能够获得足够的调试信息吗？换种说法，我们有没有快速定位问题的替代方案？这是我们提出的第三个问题。<\/strong><\/p><h2>改进的共用错误码<\/h2><p>刚才，我们通过Java异常处理的三个典型场景，提出了三个棘手的问题：<\/p><ul>\n<li>既然可恢复异常不使用异常的调用堆栈，是不是可恢复异常就不需要生成调用堆栈了？<\/li>\n<li>既然我们无法忍受程序的崩溃，那么不可恢复异常还有存在的必要吗？<\/li>\n<li>我们有没有快速定位问题的替代方案？<\/li>\n<\/ul><p>带着这三个问题，我们再来看看能不能改进一下我们上一讲里讨论的共用错误码的方案。<\/p><p>共用错误码本身，并没有携带调试信息。为了能够快速定位出问题，我们需要为共用错误码的方案补上调试信息。<\/p><p>下面的两段代码，就是我们要在补充调试信息方面做的尝试。第一段代码，是我们在方法实现的代码里的尝试。在这段代码里，我们使用异常的形式补充了调试信息，包括问题描述和调用堆栈。<\/p><pre><code class=\"language-java\">public static Returned&lt;Digest&gt; of(String algorithm) {\n    return switch (algorithm) {\n        case \"SHA-256\" -&gt; new Returned.ReturnValue(new SHA256());\n        case \"SHA-512\" -&gt; new Returned.ReturnValue(new SHA512());\n        case null -&gt; {\n            System.getLogger(\"co.ivi.jus.stack.union\")\n                    .log(System.Logger.Level.WARNING,\n                        \"No algorithm is specified\",\n                        new Throwable(\"the calling stack\"));\n            yield new Returned.ErrorCode(-1);\n        }\n        default -&gt; {\n            System.getLogger(\"co.ivi.jus.stack.union\")\n                    .log(System.Logger.Level.INFO,\n                    \"Unknown algorithm is specified \" + algorithm,\n                            new Throwable(\"the calling stack\"));\n            yield new Returned.ErrorCode(-1);\n        }\n    };\n}\n<\/code><\/pre><p>第二段代码，是我们在方法调用的代码里的尝试。在这段代码里，我们补充了调用场景的信息。<\/p><pre><code class=\"language-java\">Returned&lt;Digest&gt; rt = Digest.of(\"SHA-128\");\nswitch (rt) {\n    case Returned.ReturnValue rv -&gt; {\n            Digest d = (Digest) rv.returnValue();\n            d.digest(\"Hello, world!\".getBytes());\n        }\n    case Returned.ErrorCode ec -&gt;\n        System.getLogger(\"co.ivi.jus.stack.union\")\n                .log(System.Logger.Level.INFO,\n                        \"Failed to get instance of SHA-128\");\n}\n<\/code><\/pre><p>经过这样的调整，类似于使用异常处理的、快速定位出问题的调试信息就又回来了。<\/p><pre><code class=\"language-java\">Nov 05, 2021 10:08:23 PM co.ivi.jus.stack.union.Digest of\nINFO: Unknown algorithm is specified SHA-128\njava.lang.Throwable: the calling stack\n\tat co.ivi.jus.stack.union.Digest.of(Digest.java:37)\n\tat co.ivi.jus.stack.union.UseCase.main(UseCase.java:10)\n\nNov 05, 2021 10:08:23 PM co.ivi.jus.stack.union.UseCase main\nINFO: Failed to get instance of SHA-128\n<\/code><\/pre><p>你一定会有这样的问题。调试信息又回来了，难道不是以性能损失为代价的吗？<\/p><p>是的，使用调试信息带来的性能损失，并不比使用异常性能的损失小多少。不过好在，日志记录既可以开启，又可以关闭。如果我们关闭了日志，就不用再生成调试信息了，当然它的性能影响也就消失了。当需要我们定位问题的时候，再启动日志。这时候，我们就能够把性能的影响控制到一个极小的范围内了。<\/p><p>那么，使用错误码的错误处理方案，是怎么处理我们在阅读案例提到的问题的呢？<\/p><p>其实，每一个问题的处理，都很清晰。我把问题和答案都列在了下面的表格里，你可以看一看。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/ac\/ce\/acdd47e9e5d310007aa505d45f63fbce.jpg?wh=1920x769\" alt=\"图片\"><\/p><p>当然，日志并不是唯一可以记录调试信息的方式。比如说，我们还可以使用更便捷的JFR（Java Flight Recorder）特性。<\/p><p>其实，错误码的调试信息使用方式，更符合调试的目的：只有需要调试的时候，才会生成调试信息。那么，<strong>如果继续沿用Java的异常处理机制，调试信息能不能按需开启、关闭呢？这是我们今天的第四个问题，也是提给Java语言设计师的问题。<\/strong><\/p><p>有了今天这四个问题做铺垫，如果有一天， Java语言的异常能够支持可以开合的异常处理机制了，想必到时候你就不会感到惊讶了。<\/p><h2>总结<\/h2><p>好，到这里，我来做个小结。刚才，我们了解和讨论了Java异常处理的两个概念：可恢复异常和不可恢复异常。我还给出了在使用错误码的场景下，快速定位问题的替代方案。<\/p><p>这一讲我们并没有讨论新特性，而是我们重点讨论了现在Java异常处理机制的几个热门话题。这节课的重点，是要开拓我们的思维。了解这些热门的话题，不仅可以增加你的谈资，还可以切实地提高你的代码性能和可维护性。<\/p><p>另外，我还拎出了几个今天讨论过的技术要点，这些都可能在你的面试中出现哦。通过这一次学习，你应该能够：<\/p><ul>\n<li>了解可恢复异常和不可恢复异常这两个概念，以及它们的使用场景；\n<ul>\n<li>面试问题：你的代码是怎么处理Java异常的？<\/li>\n<\/ul>\n<\/li>\n<li>了解怎么在使用错误码的方案里，添加快速定位出问题的调试信息；\n<ul>\n<li>面试问题：你的代码，是怎么定位可能存在的问题的？<\/li>\n<\/ul>\n<\/li>\n<\/ul><p>对Java错误处理机制的改进，这会是一个持续热门的话题。而能够了解替代方案，并且使用替代方案的软件工程师，现在还不多。如果你能够展示错误处理的替代方案，而且还不牺牲异常处理的优势，这是一个能够在面试里获得主动权，控制话语权的必杀技。<\/p><h2>思考题<\/h2><p>怎么通过改进Java的异常处理，来获取性能的提升，我们已经花了两讲的时间了。我们提出的这些改进方案，其实依然有很大的提升空间。比如说吧，我们使用了整数表示错误码，这里其实就存在很多问题。<\/p><p>因为有时候，我们可能需要区别不同的错误，这样我们就不能总是使用一个错误码（-1）。如果存在多个错误码，我们怎么知道方法实现的代码返回的错误码是什么呢？编译器能不能帮助我们检查错误码的使用是不是匹配？ 比如说错误码的检查有没有遗漏，有没有多余？如果返回的错误码从两个增加到三个，使用该方法的代码能不能自动地检测到？<\/p><p>解决好这些问题，能够大幅度提高代码的可维护性和健壮性。该怎么解决掉这些问题呢？这是我们今天的思考题。<\/p><p>为了方便你阅读，我把需要两个错误码的案例代码放在了下面。一段代码是方法实现的代码，一段代码是方法使用的代码。你可以在这两段代码的基础上改动，看看最后你是怎么处理多个错误码的。<\/p><p>这一段是方法实现的代码。<\/p><pre><code class=\"language-java\">public static Returned&lt;Digest&gt; of(String algorithm) {\n    return switch (algorithm) {\n        case \"SHA-256\" -&gt; new Returned.ReturnValue(new SHA256());\n        case \"SHA-512\" -&gt; new Returned.ReturnValue(new SHA512());\n        case null -&gt; {\n            System.getLogger(\"co.ivi.jus.stack.union\")\n                    .log(System.Logger.Level.WARNING,\n                        \"No algorithm is specified\",\n                        new Throwable(\"the calling stack\"));\n            yield new Returned.ErrorCode(-1);\n        }\n        default -&gt; {\n            System.getLogger(\"co.ivi.jus.stack.union\")\n                    .log(System.Logger.Level.INFO,\n                    \"Unknown algorithm is specified \" + algorithm,\n                            new Throwable(\"the calling stack\"));\n            yield new Returned.ErrorCode(-2);\n        }\n    };\n}\n<\/code><\/pre><p>这一段是方法使用的代码。<\/p><pre><code class=\"language-java\">Returned&lt;Digest&gt; rt = Digest.of(\"SHA-128\");\nswitch (rt) {\n    case Returned.ReturnValue rv -&gt; {\n            Digest d = (Digest) rv.returnValue();\n            d.digest(\"Hello, world!\".getBytes());\n        }\n    case Returned.ErrorCode ec -&gt; {\n        if (ec.errorCode() == -1) {\n            System.getLogger(\"co.ivi.jus.stack.union\")\n                    .log(System.Logger.Level.INFO,\n                            \"Unlikedly to happen\");\n        } else {\n            System.getLogger(\"co.ivi.jus.stack.union\")\n                    .log(System.Logger.Level.INFO,\n                            \"SHA-218 is not supported\");\n        }\n    }\n}\n<\/code><\/pre><p>欢迎你在留言区留言、讨论，分享你的阅读体验以及验证的代码和结果。我们下节课再见！<\/p><p>注：本文使用的完整的代码可以从<a href=\"https:\/\/github.com\/XueleiFan\/java-up\/tree\/main\/src\/main\/java\/co\/ivi\/jus\/stack\">GitHub<\/a>下载，你可以通过修改<a href=\"https:\/\/github.com\/XueleiFan\/java-up\/tree\/main\/src\/main\/java\/co\/ivi\/jus\/stack\">GitHub<\/a>上<a href=\"https:\/\/github.com\/XueleiFan\/java-up\/tree\/main\/src\/main\/java\/co\/ivi\/jus\/stack\/review\/xuelei\">review template<\/a>代码，完成这次的思考题。如果你想要分享你的修改或者想听听评审的意见，请提交一个 GitHub的拉取请求（Pull Request），并把拉取请求的地址贴到留言里。这一小节的拉取请求代码，请在<a href=\"https:\/\/github.com\/XueleiFan\/java-up\/tree\/main\/src\/main\/java\/co\/ivi\/jus\/stack\/review\">异常恢复专用的代码评审目录<\/a>下，建一个以你的名字命名的子目录，代码放到你专有的子目录里。比如，我的代码，就放在stack\/review\/xuelei的目录下面。<\/p>","footer_cover_data":{"img_url":"","mp_url":"","link_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{},"product_id":100097301,"like_count":5,"had_liked":false,"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/c7\/6a\/c79ab8a4ec62ce7cf71f9b20a907ff6a.mp3","id":462432,"had_viewed":false,"article_title":"09 | 异常恢复，付出的代价能不能少一点？","column_bgcolor":"#F6F7FB","share":{"content":"手把手带你吃透Java新特性","title":"范学雷 · 深入剖析Java新特性","poster":"https:\/\/static001.geekbang.org\/resource\/image\/d8\/5c\/d8cdd052b756bd3a2da2c8a75b6fc85c.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/8e\/cf\/8e2874ce3bcbb86c9ec95b86d9e00acf.jpg"},"is_video_preview":false,"article_summary":"今天，我们接着讨论Java的错误处理。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/e2\/f8\/e22d7ddcec9598c079e9c07d2530ccf8.jpeg","column_sale_type":2,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/8e\/cf\/8e2874ce3bcbb86c9ec95b86d9e00acf.jpg","column_id":455,"audio_time_arr":{"m":"11","s":"32","h":"00"},"video_time":"","audio_title":"范学雷-09.MP3","audio_md5":"c79ab8a4ec62ce7cf71f9b20a907ff6a","video_size":0,"text_read_percent":0,"comment_count":8,"cid":455,"article_sharetitle":"异常恢复，付出的代价能不能少一点？","column_is_onboard":true,"article_cshort":"<p>你好，我是范学雷。今天，我们接着讨论Java的错误处理。这一讲，是上一次我们讨论的关于错误处理问题的继续和升级。<\/p><p>就像我们上一次讨论到的，Java的异常处理是一个对代码性能有着重要影响的因素。所以说，Java错误处理的缺陷和滥用也成为了一个热度始终不减的老话题。但是，Java的异常处理，有着天生的优势，特别是它在错误排查方面的作用，我们很难找到合适的替代方案。<\/p><p>那有没有可能改进Java的异常处理，保持它在错误排查方面的优势的同时，提高它的性能呢？这是一个又让马儿跑，又让马儿不吃草的问题。不过，这并不妨碍我们顺着这个思路，找一找其中的可能性。<\/p><p>我们还是先从阅读案例开始，来试着找一找其中的蛛丝马迹吧。<\/p><h2>阅读案例<\/h2><p>要尝试解决一个问题，我们首先要做的，就是把问题梳理清楚，定义好。我们先来看看Java异常处理的三个典型使用场景。<\/p><p>下面的这段代码里，有三个不同的异常使用方法。在分别解析的过程中，你可能会遇到几个疑问，不过别急，带着这几个问题，我们最后来一一解读。<\/p><pre><code class=\"language-java\">package co.ivi.jus.stack.former;\n\nimport java.security.NoSuchAlgorithmException;\n\npublic class UseCase {\n    public static void main(String[] args) {\n        String[] algorithms = {\"SHA-128\", \"SHA-192\"};\n        \n        String availableAlgorithm = null;\n        for (String algorithm : algorithms) {\n            Digest md;\n            try {\n                md = Digest.of(algorithm);\n            } catch (NoSuchAlgorithmException ex) {\n                \/\/ ignore, continue to use the next algorithm.\n                continue;\n            }\n            \n            try {\n                md.digest(\"Hello, world!\".getBytes());\n            } catch (Exception ex) {\n                System.getLogger(\"co.ivi.jus.stack.former\")\n                        .log(System.Logger.Level.WARNING,\n                             algorithm + \" does not work\",\n                             ex);\n                continue;\n            }\n            \n            availableAlgorithm = algorithm;\n        }\n        \n        if (availableAlgorithm != null) {\n            System.out.println(availableAlgorithm + \" is available\");\n        } else {\n            throw new RuntimeException(\"No available hash algorithm\");\n        }\n    }\n}\n<\/code><\/pre>","video_width":0,"column_could_sub":true,"article_ctime":1638460800,"score":"31638460800","video_media_map":{},"video_preview":{},"video":0,"video_time_arr":{"m":"","s":"","h":""},"video_total_seconds":0},"extra":{},"error":{}}