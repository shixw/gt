{"code":0,"data":{"video_id":"","sku":"100114001","video_cover":"","author_name":"丁威","text_read_version":0,"audio_size":10893738,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/45\/20\/4539c519dd32053e2e59184446b2b320.jpg","subtitles":{},"product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/media\/audio\/e2\/75\/e264c0a252aa90911c924c404440a875\/ld\/ld.m3u8","chapter_id":"0","column_had_sub":true,"audio_dubber":"丁威","is_finished":false,"inline_video_subtitles":{},"like":{"had_done":false,"count":1},"neighbors":{"left":{"id":536477,"article_title":"11｜案例：如何基于Dubbo进行网关设计？"},"right":{"id":539076,"article_title":"期中测试 | 来检验一下你的学习成果吧！"}},"audio_time":"00:11:22","video_height":0,"rate_percent":0,"article_content":"<p>你好，我是丁威。<\/p><p>前面，我们讲了服务的注册与发现机制，它是微服务体系的基石，这节课，我想聊聊微服务的另外一个重要课题：服务治理。<\/p><p>随着微服务应用的不断增加，各个微服务之间的依赖关系也变得比较复杂，各个微服务的更新、升级部署给整个服务域的稳定性带来很大挑战。<strong>怎么以不停机的方式部署升级微服务呢？<\/strong><\/p><p>这就是我们这节课的任务，我们来看看<strong>如何在生产环境用蓝绿发布来满足不停机升级的要求<\/strong>。<\/p><h2>设计背景<\/h2><p>在进行技术方案的设计之前，我们先来了解一下生产环境的基本部署情况，如下图所示：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/d8\/c9\/d8ac219c76472e191810d8db2b7126c9.jpg?wh=1920x588\" alt=\"图片\"><\/p><p>用户在面向用户端（下文通称C端）下单后，C端订单系统需要远程调用订单域中的“创建订单“接口。同时，订单域、运单域相关服务都需要调用基础服务域，进行基础数据的查询服务。<\/p><p>从这里也可以看出，基础服务的稳定运行对整个微服务体系至关重要。那如何确保基础服务域不受版本的影响，始终能够提供稳定可控的服务呢？<\/p><h2>设计方案<\/h2><p>我们公司为了解决这个问题实现了<strong>蓝绿发布<\/strong>。那什么是蓝绿发布呢？<\/p><p>蓝绿发布指的是在蓝、绿两套环境中分别运行项目的两个版本的代码。但是在进行版本发布时只更新其中一个环境，这样方便另一个环境快速回滚。<\/p><p>接下来我们看一下蓝绿发布的基本流程。<\/p><p>如果系统采取蓝绿发布，在下一个版本（base-service v1.2.0）发布之前，会这样部署架构：<\/p><!-- [[[read_end]]] --><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/98\/e4\/9843fea4aaff7e639fefe7edfed9fde4.jpg?wh=1896x1178\" alt=\"图片\"><\/p><p>当前订单域调用流量进入基础服务域 GREEN环境。团队计划在12:00发布新版本（base-service v1.2.0），这时我们通常会执行下面几个操作。<\/p><ul>\n<li>将新版本1.2.0全部发布在BLUE环境上。因为此时BLUE环境没有任何流量，对运行中的系统无任何影响。<\/li>\n<li>在请求入口对<strong>流量进行切分<\/strong>。通常可以按照百分比分配流量，待系统运行良好后，再逐步将流量全部切换到新版本。<\/li>\n<li>如果发现新版本存在严重问题，可以将流量全部切换到原来的环境，实现版本<strong>快速回滚<\/strong>。<\/li>\n<\/ul><p>这个过程可以用下面这张图表示：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/8c\/cb\/8cc85447f6a749f2f363fd74df3dfacb.jpg?wh=1920x1012\" alt=\"图片\"><\/p><p>这个思路听起来很简单，但是怎么实现呢？<\/p><p>这就不得不提到上节课专门提到的<strong>路由选择（Router）<\/strong>了，它是Dubbo服务调用中非常重要的一步。路由选择的核心思想是在客户端进行负载均衡之前，通过一定的过滤规则，只在服务提供者列表中选择符合条件的提供者。<\/p><p>我们再看上面的实例图，从订单域消费者的视角，服务提供者列表大概是下面这个样子：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/8b\/a8\/8b1496a03cae53c6ca6ca96038134ba8.jpg?wh=1920x633\" alt=\"图片\"><\/p><p>然后呢，我们按照比例对入口流量进行分流。例如，80%的请求颜色为BLUE，20%的请求颜色为GREEN。那些颜色为BLUE的请求，在真正执行RPC服务调用时，只从服务提供者列表中选择“color=BLUE”的服务提供者。同样，颜色为GREEN的请求只选择“color=GREEN”的服务提供者，这就实现了流量切分。<\/p><p>具体的操作是，在Dubbo中为这个场景引入Tag路由机制。<\/p><p><strong>首先，服务提供者在启动时需要通过“-Dubbo.provider.tag”系统参数来设置服务提供者所属的标签。<\/strong><\/p><p>例如，在192.168.3.100和192.168.3.101这两台机器上启动base-service程序时，需要添加“-Dubbo.provider.tag=BLUE”系统参数；而在192.168.4.100和192.168.4.101这两台机器上启动base-service程序时，则要添加“-Dubbo.provider.tag=GREEN”系统参数，通过这个操作完成对服务提供者的打标。服务提供者启动后，生成的服务提供者URL连接如下所示：<\/p><pre><code class=\"language-plain\">dubbo:\/\/192.168.3.100:20880\/net.codingw.demo.BaseUser?dubbo.tag=BLUE\n<\/code><\/pre><p><strong>下一步，在服务入口对流量进行染色，从而实现流量切分。<\/strong><\/p><p>蓝绿发布的流量通常是在流量入口处进行染色的。例如，我们可以使用随机加权来实现流量切分算法，用它对流量进行染色，具体示范代码如下：<\/p><pre><code class=\"language-plain\">  public static String selectColor(String[] colorArr, int[] weightArr) {\n &nbsp; &nbsp; &nbsp; &nbsp;int length = colorArr.length;\n &nbsp; &nbsp; &nbsp; &nbsp;boolean sameWeight = true;\n &nbsp; &nbsp; &nbsp; &nbsp;int totalWeight = 0;\n &nbsp; &nbsp; &nbsp; &nbsp;for (int i = 0; i &lt; length; i++) {\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;int weight = weightArr[i];\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;totalWeight += weight;\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (sameWeight &amp;&amp; totalWeight != weight * (i + 1)) {\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sameWeight = false;\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  }\n &nbsp; &nbsp; &nbsp;  }\n &nbsp; &nbsp; &nbsp; &nbsp;if (totalWeight &gt; 0 &amp;&amp; !sameWeight) {\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;int offset = ThreadLocalRandom.current().nextInt(totalWeight);\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"offset:\" + offset);\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for (int i = 0; i &lt; length; i++) {\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (offset &lt; weightArr[i]) {\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return colorArr[i];\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  }\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  }\n &nbsp; &nbsp; &nbsp;  }\n &nbsp; &nbsp; &nbsp; &nbsp;return colorArr[ThreadLocalRandom.current().nextInt(length)];\n &nbsp;  }\n​\n &nbsp; &nbsp;\/\/测试代码\n &nbsp; &nbsp;public static void main(String[] args) {\n &nbsp; &nbsp; &nbsp; &nbsp;String[] colorArr = new String[]{\"GREEN\",\"BLUE\"};\n &nbsp; &nbsp; &nbsp; &nbsp;int[] weightArr = new int[] {100,50};\n &nbsp; &nbsp; &nbsp; &nbsp;for(int i = 0; i &lt; 20; i ++) {\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(selectColor(colorArr, weightArr));\n &nbsp; &nbsp; &nbsp;  }\n &nbsp;  }\n<\/code><\/pre><p>根据流量切分算法计算得到流量标识后，怎么在消费端跟进流量标识从而进行路由选择呢？我们通常会将染色标记放在ThreadLocal中，然后再编写Filter，获取或者传递路由标签。<\/p><p>但这个只是一个流量的切分算法，那如何动态设置蓝绿的比例或者说权重呢？其实，我们可以为发布系统提供一个设置权重的页面，用户设置完权重后写入到配置中心(ZooKeeper、Apollo)，然后应用程序动态感知到变化，利用最新的权重进行流量切分。<\/p><p>通过流量切分算法计算出一个请求的流量标识后，通常会存储在ThreadLocal中，实现代码如下：<\/p><pre><code class=\"language-plain\">public class ThreadLocalContext {\n &nbsp; &nbsp;private static final ThreadLocal&lt;String&gt; tagContext &nbsp;= new ThreadLocal&lt;&gt;();\n​\n &nbsp; &nbsp;public static void setTag(String tag) {\n &nbsp; &nbsp; &nbsp; &nbsp;tagContext.set(tag);\n &nbsp;  }\n​\n &nbsp; &nbsp;public static String getTag() {\n &nbsp; &nbsp; &nbsp; &nbsp;return tagContext.get();\n &nbsp;  }\n​\n &nbsp; &nbsp;public static void resetTag() {\n &nbsp; &nbsp; &nbsp; &nbsp;tagContext.remove();\n &nbsp;  }\n}\n​\n​\n\/\/在整个请求的入口\nString color = selectColor(colorArr, weightArr);\ntry {\n &nbsp;ThreadLocalContext.setTag(color);\n &nbsp;\n &nbsp;\/\/执行第一个远程调用\n &nbsp;invokeRpc1();\n &nbsp;\n &nbsp;\/\/执行另外一个远程调用\n &nbsp;invokeRpc2();\n &nbsp;\n} finally {\n &nbsp;ThreadLocalContext.reset();\n}\n<\/code><\/pre><p>将请求的流量标识存储到线程本地变量之后，还需要将流量标识附加到RPC请求调用中，这样才能触发正确的路由选择，具体代码示例如下：<\/p><pre><code class=\"language-plain\">import org.apache.commons.lang3.StringUtils;\nimport org.apache.dubbo.common.extension.Activate;\nimport org.apache.dubbo.common.logger.Logger;\nimport org.apache.dubbo.common.logger.LoggerFactory;\nimport org.apache.dubbo.rpc.*;\nimport org.apache.dubbo.rpc.cluster.router.tag.TagRouter;\n​\nimport static org.apache.dubbo.common.constants.CommonConstants.CONSUMER;\nimport static org.apache.dubbo.rpc.Constants.ACCESS_LOG_KEY;\n​\n@Activate(group = CONSUMER, value = \"tagConsumerFilter\")\npublic class TagConsumerContextFilter implements Filter {\n​\n &nbsp; &nbsp;private static final Logger logger = LoggerFactory.getLogger(TagConsumerContextFilter.class);\n​\n &nbsp; &nbsp;@Override\n &nbsp; &nbsp;public Result invoke(Invoker&lt;?&gt; invoker, Invocation invocation) throws RpcException {\n &nbsp; &nbsp; &nbsp; &nbsp;try {\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;String tag = ThreadLocalContext.getTag();\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if(StringUtils.isNotEmpty(tag)) {\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;invocation.setAttachment(TagRouter.NAME, tag );\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  }\n &nbsp; &nbsp; &nbsp;  } catch (Throwable t) {\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;logger.warn(\"Exception in TagConsumerContextFilter of service(\" + invoker + \" -&gt; \" + invocation + \")\", t);\n &nbsp; &nbsp; &nbsp;  }\n​\n &nbsp; &nbsp; &nbsp; &nbsp;\/\/ 调用链传递\n &nbsp; &nbsp; &nbsp; &nbsp;return invoker.invoke(invocation);\n &nbsp;  }\n}\n<\/code><\/pre><p>这样在RPC调用的过程中，服务调用者就能根据本地线程变量中存储的流量标记，选择不同机房的服务提供者，从而实现蓝绿发布了。<\/p><p>同时，在实际生产环境中，一个调用链条中往往会存在多个RPC调用，那第一个RPC中的路由标签能自动传递到第二个RPC调用吗？<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/cd\/c1\/cdyyb82bedb597a12dedb57a77f868c1.jpg?wh=1906x629\" alt=\"图片\"><\/p><p>答案是不可以，我们需要再写一个服务端生效的Filter，示例代码如下：<\/p><pre><code class=\"language-plain\">import org.apache.commons.lang3.StringUtils;\nimport org.apache.dubbo.common.logger.Logger;\nimport org.apache.dubbo.common.logger.LoggerFactory;\nimport org.apache.dubbo.common.extension.Activate;\nimport org.apache.dubbo.rpc.*;\nimport org.apache.dubbo.rpc.cluster.router.tag.TagRouter;\n​\nimport static org.apache.dubbo.common.constants.CommonConstants.PROVIDER;\n​\n@Activate(group = PROVIDER, value = \"tagProviderFilter\")\npublic class TagProviderContextFilter implements Filter {\n​\n &nbsp; &nbsp;private static final Logger logger = LoggerFactory.getLogger(TagProviderContextFilter.class);\n​\n &nbsp; &nbsp;@Override\n &nbsp; &nbsp;public Result invoke(Invoker&lt;?&gt; invoker, Invocation invocation) throws RpcException {\n &nbsp; &nbsp; &nbsp; &nbsp;try {\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;String tag = invocation.getAttachment(TagRouter.NAME);\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if(StringUtils.isNotEmpty(tag)) {\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ThreadLocalContext.setTag(tag);\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  }\n &nbsp; &nbsp; &nbsp;  } catch (Throwable t) {\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;logger.warn(\"Exception in TagProviderContextFilter of service(\" + invoker + \" -&gt; \" + invocation + \")\", t);\n &nbsp; &nbsp; &nbsp;  }\n &nbsp; &nbsp; &nbsp; &nbsp;\/\/ 调用链传递\n &nbsp; &nbsp; &nbsp; &nbsp;return invoker.invoke(invocation);\n &nbsp;  }\n}\n<\/code><\/pre><p>也就是将调用链中的tag存储到服务端的线程本地上下文环境中，当服务端调用其他服务时，可以继续将tag传递到下一个RPC调用链中。<\/p><p>这样，我们的蓝绿发布就基本完成了。但这里还有一个问题。规模较大的公司的生产环境往往会运行很多微服务，我们无法将蓝绿机制一下引入到所有微服务当中，<strong>必然会存在一部分应用使用蓝绿发布，但其他应用没有使用蓝绿的情况。怎么做到兼容呢？<\/strong><\/p><p>比方说，我们公司目前核心业务域的蓝绿部署情况如下：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/c7\/12\/c7eb8b78c052bdf9588cae897f7a6012.jpg?wh=1920x738\" alt=\"图片\"><\/p><p>这里，订单域接入了蓝绿发布；C端应用需要调用订单域相关接口，因此也接入了蓝绿发布；但运单中心并未接入蓝绿发布。这时候，运单中心能调用订单域的服务吗？<\/p><p>要回答这个问题，我们要先看看Dubbo官方的降级策略。<\/p><ul>\n<li>如果消费者侧设置了标签，那么如果集群中没有对应标签的服务提供者，默认可以选择不带任何标签的服务提供者进行服务调用。该行为可以通过设置request.tag.force=true来禁止，这就是说如果request.tag.force为true，一旦没有对应标签的服务提供者，就会跑出“No Provider”异常。<\/li>\n<li>如果消费者侧没有设置标签，那就只能向集群中没有设置标签的服务提供者发起请求，如果不存在没有标签的服务提供者，则报“No Provider”异常。<\/li>\n<\/ul><p>回到上面的问题，运单中心由于未接入蓝绿发布，所以不带任何标签，它无法调用订单域的服务。为了解决这个问题，订单域还需要部署一些不带标签的服务。订单域最终的部署大概如下图所示：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/21\/e2\/213580a7e1c1917517b3f6b74270d2e2.jpg?wh=1920x593\" alt=\"图片\"><\/p><p>也就是说，订单域为了兼容那些还没接入蓝绿发布的应用需要部署3套环境，一套为不设置标签的服务提供者，一套为蓝颜色的服务提供者，另一套为绿颜色的服务提供者。<\/p><p>蓝绿发布实践就介绍到这里了，在这节课的最后，我们再来学习一下蓝绿发布底层依托的原理。<\/p><h2>实现原理<\/h2><p>先来看一下Dubbo服务调用的基本时序图：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/55\/28\/55d82c1eeb04d7107fc57f794083e128.jpg?wh=1920x1104\" alt=\"图片\"><\/p><p>我建议你按照这张时序图跟踪一下源码，更加详细地了解Dubbo服务调用的核心流程与实现关键点，我在这里总结了几个要点：<\/p><ul>\n<li>Dubbo的服务调用支持容错，对应的抽象类为AbstractClusterInvoker，它封装了服务调用的基本流程。Dubbo内置了failover、failfast、failsafe、failback、forking等失败容错策略，每一个策略对应AbstractClusterInvoker的一个实现；<\/li>\n<li>在调用AbstractClusterInvoker服务的时候，首先需要获取所有的服务提供者列表，这个过程我们称之为服务动态发现（具体实现类为DynamicDirectory）。在获取路由信息之前，需要调用RouterChain的route方法，执行路由选择策略，筛选出服务动态发现的服务提供者列表。我们这一课的重点，标签路由的具体实现类TagRouter就是在这里发挥作用的。<\/li>\n<\/ul><p>我们也详细拆解一下TagRouter的route方法。因为这个方法的实现代码比较多，我们还是分步讲解。<\/p><p><strong>第一步，<\/strong>执行静态路由过滤机制，代码如下：<\/p><pre><code class=\"language-plain\">final TagRouterRule tagRouterRuleCopy = tagRouterRule;\nif (tagRouterRuleCopy == null || !tagRouterRuleCopy.isValid() || !tagRouterRuleCopy.isEnabled()) {\n    return filterUsingStaticTag(invokers, url, invocation);\n}\n<\/code><\/pre><p>如果路由规则为空，则根据tag进行过滤。我们顺便也看一下基于tag的静态过滤机制是如何实现的：<\/p><pre><code class=\"language-plain\">private &lt;T&gt; List&lt;Invoker&lt;T&gt;&gt; filterUsingStaticTag(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation) {\n &nbsp; List&lt;Invoker&lt;T&gt;&gt; result;\n &nbsp; String tag = StringUtils.isEmpty(invocation.getAttachment(TAG_KEY)) ? url.getParameter(TAG_KEY) \n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  :invocation.getAttachment(TAG_KEY)\n &nbsp; if (!StringUtils.isEmpty(tag)) {\n &nbsp; &nbsp; &nbsp; &nbsp;result = filterInvoker(invokers, invoker -&gt; tag.equals(invoker.getUrl().getParameter(TAG_KEY)));\n &nbsp; &nbsp; &nbsp; &nbsp;if (CollectionUtils.isEmpty(result) &amp;&amp; !isForceUseTag(invocation)) {\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;result = filterInvoker(invokers, invoker -&gt; &nbsp; &nbsp; \n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; StringUtils.isEmpty(invoker.getUrl().getParameter(TAG_KEY)));\n &nbsp; &nbsp; &nbsp;  }\n &nbsp; } else {\n &nbsp; &nbsp; &nbsp; &nbsp;result = filterInvoker(invokers, invoker -&gt; \n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; StringUtils.isEmpty(invoker.getUrl().getParameter(TAG_KEY)));\n &nbsp; }\n &nbsp; return result;\n}\n<\/code><\/pre><p>尝试从Invocation（服务调用上下文）中或者从URL中获取tag的值，根据tag是否为空，执行两种不同的策略：<\/p><ul>\n<li>如果tag不为空，首先按照tag找到服务提供者列表中打了同样标签的服务提供者列表，如果dubbo.force.tag的设置为false，则查找服务提供者列表，筛查出没有打标签的服务提供者列表。<\/li>\n<li>如果tag为空，则直接查找没有打标签的服务提供者列表。<\/li>\n<\/ul><p>我们继续回到TagRouter的route方法。第二步操作是，按照路由规则进行筛选，具体代码如下：<\/p><pre><code class=\"language-plain\">\/\/ if we are requesting for a Provider with a specific tag\nif (StringUtils.isNotEmpty(tag)) {\n &nbsp; List&lt;String&gt; addresses = tagRouterRuleCopy.getTagnameToAddresses().get(tag);\n &nbsp; if (CollectionUtils.isNotEmpty(addresses)) {\n &nbsp; &nbsp; &nbsp;result = filterInvoker(invokers, invoker -&gt; addressMatches(invoker.getUrl(), addresses));\n &nbsp; &nbsp; &nbsp;if (CollectionUtils.isNotEmpty(result) || tagRouterRuleCopy.isForce()) {\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return result;\n &nbsp; &nbsp;  }\n &nbsp; } else {\n &nbsp; &nbsp; result = filterInvoker(invokers, invoker -&gt; tag.equals(invoker.getUrl().getParameter(TAG_KEY)));\n &nbsp; }\n &nbsp; if (CollectionUtils.isNotEmpty(result) || isForceUseTag(invocation)) {\n &nbsp; &nbsp; &nbsp;return result;\n &nbsp; } else {\n &nbsp; &nbsp; &nbsp;List&lt;Invoker&lt;T&gt;&gt; tmp = filterInvoker(invokers, invoker -&gt; addressNotMatches(invoker.getUrl(),\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;tagRouterRuleCopy.getAddresses()));\n &nbsp; &nbsp; &nbsp;return filterInvoker(tmp, invoker -&gt; StringUtils.isEmpty(invoker.getUrl().getParameter(TAG_KEY)));\n &nbsp; }\n} \n<\/code><\/pre><p>上面这段代码比较简单，它的过滤思路和静态tag过滤是相似的。不同点是，这里可以通过YAML格式配置单个服务的路由规则。具体的配置格式如下：<\/p><pre><code class=\"language-plain\">force: true\nenabled: true\n priority: 1\n key: demo-provider(服务名称)\n tags:\n  - name: tag1\n &nbsp;  addresses: [ip1, ip2]\n  - name: tag2\n &nbsp;  addresses: [ip3, ip4]\n<\/code><\/pre><p>这些数据都会记录在注册中心，并在发生变化后实时通知TagRouter，从而实现路由规则的动态配置。<\/p><h2>总结<\/h2><p>好了，这节课就讲到这里。刚才，我们从微服务不停机发布这个需求谈起，引出了蓝绿发布机制。<\/p><p>蓝绿发布的实现要点是对应用分别部署蓝、绿两套环境，在版本稳定后由一套环境对外提供服务，当需要发布新版本时，将新版本一次性部署到没有流量的环境，待部署成功后再逐步将流量切换到新版本。如果新版本在验证阶段遇到严重的问题，可以直接将流量切回老版本，实现应用发布的快速回滚。<\/p><p>然后，我们借助蓝绿发布的指导思想，一步一步实现了基于Dubbo的蓝绿发布。<\/p><p>蓝绿发布的底层原理是借助Dubbo内置的标签路由功能，其核心思路是，当服务发起调用时，经过服务发现得到一个服务提供者列表，但是并不直接使用这些服务提供者进行负载均衡，而是在进行负载均衡之前，先按照路由规则对这些提供者进行过滤，挑选符合路由规则的服务提供者列表进行服务调用，从而实现服务的动态分组。<\/p><h2>课后题<\/h2><p>最后，我还是照例给你留一道思考题。<\/p><p>你认为蓝绿发布和灰度发布的共同点是什么，这两者又有什么区别？<\/p><p>欢迎你在留言区与我交流讨论，我们下节课再见！<\/p>","footer_cover_data":{"img_url":"","mp_url":"","link_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{},"product_id":100114001,"like_count":3,"had_liked":false,"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/e2\/75\/e264c0a252aa90911c924c404440a875.mp3","id":537518,"had_viewed":false,"article_title":"12｜案例：如何实现蓝绿发布？","column_bgcolor":"#F6F7FB","share":{"content":"吃透中间件，突破系统高并发瓶颈","title":"丁威 · 中间件核心技术与实战","poster":"https:\/\/static001.geekbang.org\/resource\/image\/5d\/2c\/5da39ca9cfdaa40920d01dc0b7667c2c.jpeg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/76\/be\/7691d0fa3c359555fedff3293b0c35be.jpeg"},"is_video_preview":false,"article_summary":"前面，我们讲了服务的注册与发现机制，它是微服务体系的基石，这节课，我想聊聊微服务的另外一个重要课题：服务治理。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/df\/b1\/dfd8d8620997998a3c9410461213ffb1.jpeg","column_sale_type":2,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/76\/be\/7691d0fa3c359555fedff3293b0c35be.jpeg","column_id":506,"audio_time_arr":{"m":"11","s":"22","h":"00"},"video_time":"","audio_title":"7.9 丁威-12.MP3_01.mp3","audio_md5":"e264c0a252aa90911c924c404440a875","video_size":0,"text_read_percent":0,"comment_count":5,"cid":506,"article_sharetitle":"案例：如何实现蓝绿发布？","column_is_onboard":true,"article_cshort":"<p>你好，我是丁威。<\/p><p>前面，我们讲了服务的注册与发现机制，它是微服务体系的基石，这节课，我想聊聊微服务的另外一个重要课题：服务治理。<\/p><p>随着微服务应用的不断增加，各个微服务之间的依赖关系也变得比较复杂，各个微服务的更新、升级部署给整个服务域的稳定性带来很大挑战。<strong>怎么以不停机的方式部署升级微服务呢？<\/strong><\/p><p>这就是我们这节课的任务，我们来看看<strong>如何在生产环境用蓝绿发布来满足不停机升级的要求<\/strong>。<\/p><h2>设计背景<\/h2><p>在进行技术方案的设计之前，我们先来了解一下生产环境的基本部署情况，如下图所示：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/d8\/c9\/d8ac219c76472e191810d8db2b7126c9.jpg?wh=1920x588\" alt=\"图片\"><\/p><p>用户在面向用户端（下文通称C端）下单后，C端订单系统需要远程调用订单域中的“创建订单“接口。同时，订单域、运单域相关服务都需要调用基础服务域，进行基础数据的查询服务。<\/p><p>从这里也可以看出，基础服务的稳定运行对整个微服务体系至关重要。那如何确保基础服务域不受版本的影响，始终能够提供稳定可控的服务呢？<\/p><h2>设计方案<\/h2><p>我们公司为了解决这个问题实现了<strong>蓝绿发布<\/strong>。那什么是蓝绿发布呢？<\/p><p>蓝绿发布指的是在蓝、绿两套环境中分别运行项目的两个版本的代码。但是在进行版本发布时只更新其中一个环境，这样方便另一个环境快速回滚。<\/p><p>接下来我们看一下蓝绿发布的基本流程。<\/p><p>如果系统采取蓝绿发布，在下一个版本（base-service v1.2.0）发布之前，会这样部署架构：<\/p>","video_width":0,"column_could_sub":true,"article_ctime":1657468800,"score":"41657468800","video_media_map":{},"video_preview":{},"video":0,"video_time_arr":{"m":"","s":"","h":""},"video_total_seconds":0},"extra":{},"error":{}}