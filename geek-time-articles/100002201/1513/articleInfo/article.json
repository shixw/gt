{"code":0,"data":{"video_id":"","sku":"100002201","video_cover":"","author_name":"陈皓","text_read_version":0,"audio_size":9165855,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/0d\/27\/0d084ff5a962d7ce21d27fa7f7c1bc27.jpg","subtitles":{},"product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/media\/audio\/d7\/f8\/d7c401330b7eb81c7dc45d2da7faacf8\/ld\/ld.m3u8","chapter_id":"0","column_had_sub":true,"audio_dubber":"杨超","is_finished":false,"inline_video_subtitles":{},"like":{"had_done":false,"count":505},"neighbors":{"left":{"id":1512,"article_title":"23 | 分布式系统的技术栈"},"right":{"id":1604,"article_title":"25 | 分布式系统关键技术：服务调度"}},"audio_time":"00:09:34","video_height":0,"rate_percent":0,"article_content":"<p>你好，我是陈皓，网名左耳朵耗子。<\/p>\n<p>首先，我们需要全栈系统监控，它就像是我们的眼睛，没有它，我们就不知道系统到底发生了什么，我们将无法管理或是运维整个分布式系统。所以，这个系统是非常非常关键的。<\/p>\n<p>而在分布式或Cloud Native的情况下，系统分成多层，服务各种关联，需要监控的东西特别多。没有一个好的监控系统，我们将无法进行自动化运维和资源调度。<\/p>\n<p>这个监控系统需要完成的功能为：<\/p>\n<ul>\n<li>全栈监控；<\/li>\n<li>关联分析；<\/li>\n<li>跨系统调用的串联；<\/li>\n<li>实时报警和自动处置；<\/li>\n<li>系统性能分析。<\/li>\n<\/ul>\n<h1>多层体系的监控<\/h1>\n<p>所谓全栈监控，其实就是三层监控。<\/p>\n<ul>\n<li>\n<p><strong>基础层<\/strong>：监控主机和底层资源。比如：CPU、内存、网络吞吐、硬盘I\/O、硬盘使用等。<\/p>\n<\/li>\n<li>\n<p><strong>中间层<\/strong>：就是中间件层的监控。比如：Nginx、Redis、ActiveMQ、Kafka、MySQL、Tomcat等。<\/p>\n<\/li>\n<li>\n<p><strong>应用层<\/strong>：监控应用层的使用。比如：HTTP访问的吞吐量、响应时间、返回码、调用链路分析、性能瓶颈，还包括用户端的监控。<\/p>\n<\/li>\n<\/ul>\n<p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/fe\/4f\/fe3aaf79df1565505cdac32494078a4f.jpg?wh=2145x1152\" alt=\"\" \/><br \/>\n这还需要一些监控的标准化。<\/p>\n<ul>\n<li>日志数据结构化；<\/li>\n<li>监控数据格式标准化；<\/li>\n<li>统一的监控平台；<\/li>\n<li>统一的日志分析。<\/li>\n<\/ul>\n<h1>什么才是好的监控系统<\/h1>\n<p>这里还要多说一句，现在我们的很多监控系统都做得很不好，它们主要有两个很大的问题。<\/p>\n<!-- [[[read_end]]] -->\n<ol>\n<li>\n<p><strong>监控数据是隔离开来的<\/strong>。因为公司分工的问题，开发、应用运维、系统运维，各管各的，所以很多公司的监控系统之间都有一道墙，完全串不起来。<\/p>\n<\/li>\n<li>\n<p><strong>监控的数据项太多<\/strong>。有些公司的运维团队把监控的数据项多作为一个亮点到处讲，比如监控指标达到5万多个。老实说，这太丢人了。因为信息太多等于没有信息，抓不住重点的监控才会做成这个样子，完全就是使蛮力的做法。<\/p>\n<\/li>\n<\/ol>\n<p>一个好的监控系统应该有以下几个特征。<\/p>\n<ul>\n<li>\n<p><strong>关注于整体应用的SLA<\/strong>。主要从为用户服务的API来监控整个系统。<\/p>\n<\/li>\n<li>\n<p><strong>关联指标聚合<\/strong>。把有关联的系统及其指标聚合展示。主要是三层系统数据：基础层、平台中间件层和应用层。其中，最重要的是把服务和相关的中间件以及主机关联在一起，服务有可能运行在Docker中，也有可能运行在微服务平台上的多个JVM中，也有可能运行在Tomcat中。总之，无论运行在哪里，我们都需要把服务的具体实例和主机关联在一起，否则，对于一个分布式系统来说，定位问题犹如大海捞针。<\/p>\n<\/li>\n<li>\n<p><strong>快速故障定位<\/strong>。对于现有的系统来说，故障总是会发生的，而且还会频繁发生。故障发生不可怕，可怕的是故障的恢复时间过长。所以，快速地定位故障就相当关键。快速定位问题需要对整个分布式系统做一个用户请求跟踪的trace监控，我们需要监控到所有的请求在分布式系统中的调用链，这个事最好是做成没有侵入性的。<\/p>\n<\/li>\n<\/ul>\n<p>换句话说，一个好的监控系统主要是为以下两个场景所设计的。<\/p>\n<h2>“体检”<\/h2>\n<ul>\n<li>\n<p><strong>容量管理<\/strong>。提供一个全局的系统运行时数据的展示，可以让工程师团队知道是否需要增加机器或者其它资源。<\/p>\n<\/li>\n<li>\n<p><strong>性能管理<\/strong>。可以通过查看大盘，找到系统瓶颈，并有针对性地优化系统和相应代码。<\/p>\n<\/li>\n<\/ul>\n<h2>“急诊”<\/h2>\n<ul>\n<li>\n<p><strong>定位问题<\/strong>。可以快速地暴露并找到问题的发生点，帮助技术人员诊断问题。<\/p>\n<\/li>\n<li>\n<p><strong>性能分析<\/strong>。当出现非预期的流量提升时，可以快速地找到系统的瓶颈，并帮助开发人员深入代码。<\/p>\n<\/li>\n<\/ul>\n<p>只有做到了上述的这些关键点才能是一个好的监控系统。<\/p>\n<h1>如何做出一个好的监控系统<\/h1>\n<p>下面是我认为一个好的监控系统应该实现的功能。<\/p>\n<ul>\n<li><strong>服务调用链跟踪<\/strong>。这个监控系统应该从对外的API开始，然后将后台的实际服务给关联起来，然后再进一步将这个服务的依赖服务关联起来，直到最后一个服务（如MySQL或Redis），这样就可以把整个系统的服务全部都串连起来了。这个事情的最佳实践是Google Dapper系统，其对应于开源的实现是Zipkin。对于Java类的服务，我们可以使用字节码技术进行字节码注入，做到代码无侵入式。<\/li>\n<\/ul>\n<p>如下图所示（截图来自我做的一个APM的监控系统）。<\/p>\n<p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/5e\/91\/5eb0a776e9470192ce816e6c840f8591.jpg?wh=2073x1203\" alt=\"\" \/><\/p>\n<ul>\n<li><strong>服务调用时长分布<\/strong>。使用Zipkin，可以看到一个服务调用链上的时间分布，这样有助于我们知道最耗时的服务是什么。下图是Zipkin的服务调用时间分布。<\/li>\n<\/ul>\n<p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/fb\/2d\/fb5545ca0777f86e007a2aa022fdf32d.jpg?wh=2361x1743\" alt=\"\" \/><\/p>\n<ul>\n<li><strong>服务的TOP N视图<\/strong>。所谓TOP N视图就是一个系统请求的排名情况。一般来说，这个排名会有三种排名的方法：a）按调用量排名，b) 按请求最耗时排名，c）按热点排名（一个时间段内的请求次数的响应时间和）。<\/li>\n<\/ul>\n<p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/f4\/f1\/f4f91d5a3ee95b478c47f62499b0dcf1.png?wh=391*423\" alt=\"\" \/><\/p>\n<ul>\n<li><strong>数据库操作关联<\/strong>。对于Java应用，我们可以很方便地通过JavaAgent字节码注入技术拿到JDBC执行数据库操作的执行时间。对此，我们可以和相关的请求对应起来。<\/li>\n<\/ul>\n<p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/29\/f4\/29587fed0823f6e8ae7a2d38eaf35af4.png?wh=391*459\" alt=\"\" \/><\/p>\n<ul>\n<li><strong>服务资源跟踪<\/strong>。我们的服务可能运行在物理机上，也可能运行在虚拟机里，还可能运行在一个Docker的容器里，Docker容器又运行在物理机或是虚拟机上。我们需要把服务运行的机器节点上的数据（如CPU、MEM、I\/O、DISK、NETWORK）关联起来。<\/li>\n<\/ul>\n<p>这样一来，我们就可以知道服务和基础层资源的关系。如果是Java应用，我们还要和JVM里的东西进行关联，这样我们才能知道服务所运行的JVM中的情况（比如GC的情况）。<\/p>\n<p>有了这些数据上的关联，我们就可以达到如下的目标。<\/p>\n<ol>\n<li>\n<p>当一台机器挂掉是因为CPU或I\/O过高的时候，我们马上可以知道其会影响到哪些对外服务的API。<\/p>\n<\/li>\n<li>\n<p>当一个服务响应过慢的时候，我们马上能关联出来是否在做Java GC，或是其所在的计算结点上是否有资源不足的情况，或是依赖的服务是否出现了问题。<\/p>\n<\/li>\n<li>\n<p>当发现一个SQL操作过慢的时候，我们能马上知道其会影响哪个对外服务的API。<\/p>\n<\/li>\n<li>\n<p>当发现一个消息队列拥塞的时候，我们能马上知道其会影响哪些对外服务的API。<\/p>\n<\/li>\n<\/ol>\n<p>总之，我们就是想知道用户访问哪些请求会出现问题，这对于我们了解故障的影响面非常有帮助。<\/p>\n<p>一旦了解了这些信息，我们就可以做出调度。比如：<\/p>\n<ul>\n<li>\n<p>一旦发现某个服务过慢是因为CPU使用过多，我们就可以做弹性伸缩。<\/p>\n<\/li>\n<li>\n<p>一旦发现某个服务过慢是因为MySQL出现了一个慢查询，我们就无法在应用层上做弹性伸缩，只能做流量限制，或是降级操作了。<\/p>\n<\/li>\n<\/ul>\n<p>所以，一个分布式系统，或是一个自动化运维系统，或是一个Cloud Native的云化系统，最重要的事就是把监控系统做好。在把数据收集好的同时，更重要的是把数据关联好。这样，我们才可能很快地定位故障，进而才能进行自动化调度。<\/p>\n<p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/6b\/33\/6b17dd779cfecd62e02924dc8618e833.png?wh=865*381\" alt=\"\" \/><\/p>\n<p>上图只是简单地展示了一个分布式系统的服务调用链接上都在报错，其根本原因是数据库链接过多，服务不过来。另外一个原因是，Java在做Full GC导致处理过慢。于是，消息队列出现消息堆积堵塞。这个图只是一个示例，其形象地体现了在分布式系统中监控数据关联的重要性。<\/p>\n<h1>小结<\/h1>\n<p>回顾一下今天的要点内容。首先，我强调了全栈系统监控的重要性，它就像是我们的眼睛，没有它，我们根本就不知道系统到底发生了什么。随后，从基础层、中间层和应用层三个层面，讲述了全栈监控系统要监控哪些内容。然后，阐释了什么才是好的监控系统，以及如何做出好的监控。最后，欢迎你分享一下你在监控系统中的比较好的实践和方法。<\/p>\n<p>在下一讲中，我将讲述分布式系统的另一关键技术：服务调度。<\/p>\n<p>下面我列出了《分布式系统架构的本质》系列文章的目录，方便你快速找到自己感兴趣的内容。<\/p>\n<ul>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/1411\">分布式系统架构的冰与火<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/1505\">从亚马逊的实践，谈分布式系统的难点<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/1512\">分布式系统的技术栈<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/1513\">分布式系统关键技术：全栈监控<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/1604\">分布式系统关键技术：服务调度<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/1609\">分布式系统关键技术：流量与数据调度<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/1610\">洞悉PaaS平台的本质<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/2080\">推荐阅读：分布式系统架构经典资料<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/2421\">推荐阅读：分布式数据调度相关论文<\/a><\/li>\n<\/ul>\n","footer_cover_data":{"img_url":"","mp_url":"","link_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{},"product_id":100002201,"like_count":547,"had_liked":false,"article_subtitle":"无","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/d7\/f8\/d7c401330b7eb81c7dc45d2da7faacf8.mp3","id":1513,"had_viewed":false,"article_title":"24 | 分布式系统关键技术：全栈监控","column_bgcolor":"#6091b2","share":{"content":"左耳朵耗子的专栏，20年骨灰级程序员，专栏涵盖程序员练级攻略、全栈程序员的体系化学习路线与进阶底图。专栏已有32000人加入学习，可以说是程序员必备宝典。","title":"陈皓 · 左耳听风","poster":"https:\/\/static001.geekbang.org\/resource\/image\/08\/c1\/084b2e8b8757ccb8401d6e6501ef8bc1.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/21\/da\/216b472de3f9027371576e107601c2da.jpg"},"is_video_preview":false,"article_summary":"全栈系统监控尤其重要，它就像是我们的眼睛，没有它，我们根本不知道系统到底发生了什么。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/68\/5f\/681465a415d78b0954d36dd35d9f6b5f.jpeg","column_sale_type":2,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/21\/da\/216b472de3f9027371576e107601c2da.jpg","column_id":48,"audio_time_arr":{"m":"09","s":"34","h":"00"},"video_time":"","audio_title":"1.3 杨超 024_01的副本.MP3","audio_md5":"d7c401330b7eb81c7dc45d2da7faacf8","video_size":0,"text_read_percent":0,"comment_count":53,"cid":48,"article_sharetitle":"左耳朵耗子谈分布式系统关键技术——全栈监控","column_is_onboard":true,"article_cshort":"<p>你好，我是陈皓，网名左耳朵耗子。<\/p>\n<p>首先，我们需要全栈系统监控，它就像是我们的眼睛，没有它，我们就不知道系统到底发生了什么，我们将无法管理或是运维整个分布式系统。所以，这个系统是非常非常关键的。<\/p>\n<p>而在分布式或Cloud Native的情况下，系统分成多层，服务各种关联，需要监控的东西特别多。没有一个好的监控系统，我们将无法进行自动化运维和资源调度。<\/p>\n<p>这个监控系统需要完成的功能为：<\/p>\n<ul>\n<li>全栈监控；<\/li>\n<li>关联分析；<\/li>\n<li>跨系统调用的串联；<\/li>\n<li>实时报警和自动处置；<\/li>\n<li>系统性能分析。<\/li>\n<\/ul>\n<h1>多层体系的监控<\/h1>\n<p>所谓全栈监控，其实就是三层监控。<\/p>\n<ul>\n<li>\n<p><strong>基础层<\/strong>：监控主机和底层资源。比如：CPU、内存、网络吞吐、硬盘I\/O、硬盘使用等。<\/p>\n<\/li>\n<li>\n<p><strong>中间层<\/strong>：就是中间件层的监控。比如：Nginx、Redis、ActiveMQ、Kafka、MySQL、Tomcat等。<\/p>\n<\/li>\n<li>\n<p><strong>应用层<\/strong>：监控应用层的使用。比如：HTTP访问的吞吐量、响应时间、返回码、调用链路分析、性能瓶颈，还包括用户端的监控。<\/p>\n<\/li>\n<\/ul>\n<p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/fe\/4f\/fe3aaf79df1565505cdac32494078a4f.jpg?wh=2145x1152\" alt=\"\" \/><br \/>\n这还需要一些监控的标准化。<\/p>\n<ul>\n<li>日志数据结构化；<\/li>\n<li>监控数据格式标准化；<\/li>\n<li>统一的监控平台；<\/li>\n<li>统一的日志分析。<\/li>\n<\/ul>\n<h1>什么才是好的监控系统<\/h1>\n<p>这里还要多说一句，现在我们的很多监控系统都做得很不好，它们主要有两个很大的问题。<\/p>\n","video_width":0,"column_could_sub":true,"article_ctime":1513810800,"score":"21513810800","video_media_map":{},"video_preview":{},"video":0,"video_time_arr":{"m":"","s":"","h":""},"video_total_seconds":0},"extra":{},"error":{}}