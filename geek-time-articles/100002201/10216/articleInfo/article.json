{"code":0,"data":{"video_id":"","sku":"100002201","video_cover":"","author_name":"陈皓","text_read_version":0,"audio_size":7575427,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/89\/8f\/890bb2e1f9e0f7a027446c35a1cb9d8f.jpg","subtitles":{},"product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/media\/audio\/67\/c4\/67850e8f8772dd0f962c2aca7046c0c4\/ld\/ld.m3u8","chapter_id":"0","column_had_sub":true,"audio_dubber":"杨超","is_finished":false,"inline_video_subtitles":{},"like":{"had_done":false,"count":414},"neighbors":{"left":{"id":9851,"article_title":"78 | 程序员练级攻略：异步I\/O模型和Lock-Free编程"},"right":{"id":10301,"article_title":"80 | 程序员练级攻略：数据库"}},"audio_time":"00:07:55","video_height":0,"rate_percent":0,"article_content":"<p>你好，我是陈皓，网名左耳朵耗子。<\/p><p>前两篇文章分享的是系统底层方面的内容，今天我们进入高手成长篇的第二部分——Java底层知识。<\/p><h1>Java 字节码相关<\/h1><p>首先，Java最黑科技的玩法就是字节码编程，也就是动态修改或是动态生成Java字节码。Java的字节码相当于汇编，其中的一些细节你可以从下面的这几个教程中学习。<\/p><ul>\n<li>\n<p><a href=\"https:\/\/dzone.com\/articles\/introduction-to-java-bytecode\">Java Zone: Introduction to Java Bytecode<\/a> ，这篇文章图文并茂地向你讲述了Java字节码的一些细节，是一篇很不错的入门文章。<\/p>\n<\/li>\n<li>\n<p><a href=\"https:\/\/www.ibm.com\/developerworks\/library\/it-haggar_bytecode\/index.html\">IBM DeveloperWorks: Java bytecode<\/a> ，虽然这篇文章很老了，但是这篇文章是一篇非常好的讲Java 字节码的文章。<\/p>\n<\/li>\n<li>\n<p><a href=\"https:\/\/github.com\/jon-bell\/bytecode-examples\">Java Bytecode and JVMTI Examples<\/a>，这是一些使用 <a href=\"http:\/\/docs.oracle.com\/javase\/7\/docs\/platform\/jvmti\/jvmti.html\">JVM Tool Interface<\/a> 操作字节码的比较实用的例子。包括方法调用统计、静态字节码修改、Heap Taggin和Heap Walking。<\/p>\n<\/li>\n<\/ul><p>当然，一般来说，我们不使用JVMTI操作字节码，而是用一些更好用的库。这里有三个库可以帮你比较容易地做这个事。<\/p><ul>\n<li><a href=\"https:\/\/wiki.openjdk.java.net\/display\/CodeTools\/asmtools\">asmtools<\/a> - 用于生产环境的Java .class文件开发工具。<\/li>\n<li><a href=\"http:\/\/bytebuddy.net\/\">Byte Buddy<\/a> - 代码生成库：运行时创建Class文件而不需要编译器帮助。<\/li>\n<li><a href=\"https:\/\/github.com\/qmx\/jitescript\">Jitescript<\/a> - 和 <a href=\"https:\/\/github.com\/headius\/bitescript\">BiteScript<\/a> 类似的字节码生成库。<\/li>\n<\/ul><!-- [[[read_end]]] --><p>就我而言，我更喜欢Byte Buddy，它在2015年还获了Oracle的 “<a href=\"https:\/\/www.oracle.com\/corporate\/pressrelease\/dukes-award-102815.html\">Duke’s Choice<\/a>”大奖，其中说Byte Buddy极大地发展了Java的技术。<\/p><p>使用字节码编程可以玩出很多高级玩法，最高级的还是在Java程序运行时进行字节码修改和代码注入。听起来是不是一些很黑客，也很黑科技的事？是的，这个方式使用Java这门静态语言在运行时可以进行各种动态的代码修改，而且可以进行无侵入的编程。<\/p><p>比如， 我们不需要在代码中埋点做统计或监控，可以使用这种技术把我们的监控代码直接以字节码的方式注入到别人的代码中，从而实现对实际程序运行情况进行统计和监控。如果你看过我的《编程范式游记》，你就知道这种技术的威力了，其可以很魔法地把业务逻辑和代码控制分离开来。<\/p><p>要做到这个事，你还需要学习一个叫Java Agent的技术。Java Agent使用的是 “<a href=\"https:\/\/stackoverflow.com\/questions\/11898566\/tutorials-about-javaagents\">Java Instrumentation API<\/a>”，其主要方法是实现一个叫 <code>premain()<\/code> 的方法（嗯，一个比 <code>main()<\/code> 函数还要超前执行的 main 函数），然后把你的代码编译成一个jar文件。<\/p><p>在JVM启动时，使用这样的命令行来引入你的jar文件：<code>java -javaagent:yourAwesomeAgent.jar -jar App.jar<\/code>。更为详细的文章你可以参看：“<a href=\"https:\/\/www.javacodegeeks.com\/2015\/09\/java-agents.html\">Java Code Geeks: Java Agents<\/a>”，你还可以看一下这个示例项目：<a href=\"https:\/\/github.com\/toptal\/jvm-monitoring-agent\">jvm-monitoring-agent<\/a> 或是 <a href=\"https:\/\/gist.github.com\/EntryPointKR\/152f089f6f3884047abcd19d39297c9e\">EntryPointKR\/Agent.java<\/a>。如果想用ByteBuddy来玩，你可以看看这篇文章 “<a href=\"http:\/\/www.infoq.com\/cn\/articles\/Easily-Create-Java-Agents-with-ByteBuddy\">通过使用Byte Buddy，便捷地创建Java Agent<\/a>”。如果你想学习如何用Java Agent做监控，你可以看一下这个项目 <a href=\"http:\/\/www.stagemonitor.org\/\">Stage Monitor<\/a>。<\/p><h1>JVM 相关<\/h1><p>接下来讲讲Java底层知识中另一个非常重要的内容——JVM。<\/p><p>说起JVM，你有必要读一下JVM的规格说明书，我在这里放一个Java 8的， <a href=\"https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se8\/jvms8.pdf\">The Java Virtual Machine Specification Java SE 8 Edition<\/a> 。对于规格说明书的阅读，我认为是系统了解JVM规范的最佳文档，这个文档可以让你对于搞不清楚或是诡异的问题恍然大悟。关于中文翻译，有人在GitHub上开了个Repo - “<a href=\"https:\/\/github.com\/waylau\/java-virtual-machine-specification\">java-virtual-machine-specification<\/a>”。<\/p><p>另外，也推荐一下 <a href=\"https:\/\/shipilev.net\/jvm-anatomy-park\/\">JVM Anatomy Park<\/a> JVM解剖公园，这是一个系列的文章，每篇文章都不长，但是都很精彩，带你一点一点地把JVM中的一些技术解开。<\/p><p>学习Java底层原理还有Java的内存模型，官方文章是 <a href=\"http:\/\/www.jcp.org\/en\/jsr\/detail?id=133\">JSR 133<\/a>。还有马里兰大学的威廉·皮尤（William Pugh）教授收集的和Java内存模型相关的文献 - <a href=\"http:\/\/www.cs.umd.edu\/~pugh\/java\/memoryModel\/\">The Java Memory Model<\/a> ，你可以前往浏览。<\/p><p>对于内存方面，道格·利（Doug Lea）有两篇文章也是很有价值的。<\/p><ul>\n<li>\n<p><a href=\"http:\/\/gee.cs.oswego.edu\/dl\/jmm\/cookbook.html\">The JSR-133 Cookbook for Compiler Writers<\/a>，解释了怎样实现Java内存模型，特别是在考虑到多处理器（或多核）系统的情况下，多线程和读写屏障的实现。<\/p>\n<\/li>\n<li>\n<p><a href=\"http:\/\/gee.cs.oswego.edu\/dl\/html\/j9mm.html\">Using JDK 9 Memory Order Modes<\/a>，讲了怎样通过VarHandle来使用plain、opaque、release\/acquire和volatile四种共享内存的访问模式，并剖析了底层的原理。<\/p>\n<\/li>\n<\/ul><p>垃圾回收机制也是需要好好学习的，在这里推荐一本书 《<a href=\"https:\/\/book.douban.com\/subject\/6809987\/\">The Garbage Collection Handbook<\/a>》，在豆瓣上的得分居然是9.9（当然，评价人数不多）。这本书非常全面地介绍了垃圾收集的原理、设计和算法。但是这本书也是相当难啃的。中文翻译《<a href=\"https:\/\/book.douban.com\/subject\/26740958\/\">垃圾回收算法手册<\/a>》翻译得很一般，有人说翻译得很烂。所以，如果可能，还是读英文版的。如果你对从事垃圾回收相关的工作有兴趣，那么你需要好好看一下这本书。<\/p><p>当然，更多的人可能只需要知道怎么调优垃圾回收， 那么推荐读读 <a href=\"http:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/guides\/vm\/gctuning\/\">Garbage Collection Tuning Guide<\/a> ，它是Hotspot Java虚拟机的垃圾回收调优指南，对你很有帮助。<\/p><p><a href=\"https:\/\/gist.github.com\/djspiewak\/464c11307cabc80171c90397d4ec34ef\">Quick Tips for Fast Code on the JVM<\/a> 也是一篇很不错的文章，里面有写出更快的Java代码的几个小提示，值得一读。<\/p><h1>小结<\/h1><p>好了，总结一下今天学到的内容。Java最黑科技的玩法就是字节码编程，也就是动态修改或是动态生成Java字节码。Java的字节码相当于汇编，学习其中的细节很有意思，为此我精心挑选了3篇文章，供你学习。我们一般不使用JVMTI操作字节码，而是用一些更好用的库，如asmtools、Byte Buddy和BiteScript等。使用字节码编程可以玩出很多高级玩法，其中最高级的玩法是在Java程序运行时进行字节码修改和代码注入。同时，我介绍了Java Agent技术，帮助你更好地实现这种高级玩法。<\/p><p>JVM也是学习Java过程中非常重要的一部分内容。我推荐阅读一下JVM的规格说明书，我认为，它是系统了解JVM规范的最佳文档，可以让你对于搞不清楚或是诡异的问题恍然大悟。同时推荐了 <a href=\"https:\/\/shipilev.net\/jvm-anatomy-park\/\">JVM Anatomy Park<\/a> 系列文章，也非常值得一读。<\/p><p>随后介绍的是Java的内存模型和垃圾回收机制，尤其给出了如何调优垃圾回收方面的资料。这些内容都很底层，但也都很重要。对于想成为高手的你来说，还是有必要花时间来啃一啃的。<\/p><p>下篇文章是数据库方面的内容，我们将探讨各种类型的数据库，非常有意思。敬请期待。<\/p><p>下面是《程序员练级攻略》系列文章的目录。<\/p><ul>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/8136\">开篇词<\/a><\/li>\n<li>入门篇\n<ul>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/8216\">零基础启蒙<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/8217\">正式入门<\/a><\/li>\n<\/ul>\n<\/li>\n<li>修养篇\n<ul>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/8700\">程序员修养<\/a><\/li>\n<\/ul>\n<\/li>\n<li>专业基础篇\n<ul>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/8701\">编程语言<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/8887\">理论学科<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/8888\">系统知识<\/a><\/li>\n<\/ul>\n<\/li>\n<li>软件设计篇\n<ul>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/9369\">软件设计<\/a><\/li>\n<\/ul>\n<\/li>\n<li>高手成长篇\n<ul>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/9759\">Linux系统、内存和网络（系统底层知识）<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/9851\">异步I\/O模型和Lock-Free编程（系统底层知识）<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/10216\">Java底层知识<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/10301\">数据库<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/10603\">分布式架构入门（分布式架构）<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/10604\">分布式架构经典图书和论文（分布式架构）<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/11232\">分布式架构工程设计(分布式架构)<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/11116\">微服务<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/11665\">容器化和自动化运维<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/11669\">机器学习和人工智能<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/12271\">前端基础和底层原理（前端方向）<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/12389\">前端性能优化和框架（前端方向）<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/12486\">UI\/UX设计（前端方向）<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/12561\">技术资源集散地<\/a><\/li>\n<\/ul>\n<\/li>\n<\/ul>","footer_cover_data":{"img_url":"","mp_url":"","link_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{},"product_id":100002201,"like_count":469,"had_liked":false,"article_subtitle":"无","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/67\/c4\/67850e8f8772dd0f962c2aca7046c0c4.mp3","id":10216,"had_viewed":false,"article_title":"79 | 程序员练级攻略：Java底层知识","column_bgcolor":"#6091b2","share":{"content":"左耳朵耗子的专栏，20年骨灰级程序员，专栏涵盖程序员练级攻略、全栈程序员的体系化学习路线与进阶底图。专栏已有32000人加入学习，可以说是程序员必备宝典。","title":"陈皓 · 左耳听风","poster":"https:\/\/static001.geekbang.org\/resource\/image\/08\/c1\/084b2e8b8757ccb8401d6e6501ef8bc1.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/21\/da\/216b472de3f9027371576e107601c2da.jpg"},"is_video_preview":false,"article_summary":"Java最黑科技的玩法是字节码编程，从而使得Java这门静态语言在运行时可以进行各种动态的代码修改。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/3f\/06\/3fcc6b141303ff3b1a24333245d0ca06.jpeg","column_sale_type":2,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/21\/da\/216b472de3f9027371576e107601c2da.jpg","column_id":48,"audio_time_arr":{"m":"07","s":"55","h":"00"},"video_time":"","audio_title":"5.12 杨超 079_01.MP3","audio_md5":"67850e8f8772dd0f962c2aca7046c0c4","video_size":0,"text_read_percent":0,"comment_count":28,"cid":48,"article_sharetitle":"左耳朵耗子 | 程序员练级攻略：Java底层知识","column_is_onboard":true,"article_cshort":"<p>你好，我是陈皓，网名左耳朵耗子。<\/p><p>前两篇文章分享的是系统底层方面的内容，今天我们进入高手成长篇的第二部分——Java底层知识。<\/p><h1>Java 字节码相关<\/h1><p>首先，Java最黑科技的玩法就是字节码编程，也就是动态修改或是动态生成Java字节码。Java的字节码相当于汇编，其中的一些细节你可以从下面的这几个教程中学习。<\/p><ul>\n<li>\n<p><a href=\"https:\/\/dzone.com\/articles\/introduction-to-java-bytecode\">Java Zone: Introduction to Java Bytecode<\/a> ，这篇文章图文并茂地向你讲述了Java字节码的一些细节，是一篇很不错的入门文章。<\/p>\n<\/li>\n<li>\n<p><a href=\"https:\/\/www.ibm.com\/developerworks\/library\/it-haggar_bytecode\/index.html\">IBM DeveloperWorks: Java bytecode<\/a> ，虽然这篇文章很老了，但是这篇文章是一篇非常好的讲Java 字节码的文章。<\/p>\n<\/li>\n<li>\n<p><a href=\"https:\/\/github.com\/jon-bell\/bytecode-examples\">Java Bytecode and JVMTI Examples<\/a>，这是一些使用 <a href=\"http:\/\/docs.oracle.com\/javase\/7\/docs\/platform\/jvmti\/jvmti.html\">JVM Tool Interface<\/a> 操作字节码的比较实用的例子。包括方法调用统计、静态字节码修改、Heap Taggin和Heap Walking。<\/p>\n<\/li>\n<\/ul><p>当然，一般来说，我们不使用JVMTI操作字节码，而是用一些更好用的库。这里有三个库可以帮你比较容易地做这个事。<\/p><ul>\n<li><a href=\"https:\/\/wiki.openjdk.java.net\/display\/CodeTools\/asmtools\">asmtools<\/a> - 用于生产环境的Java .class文件开发工具。<\/li>\n<li><a href=\"http:\/\/bytebuddy.net\/\">Byte Buddy<\/a> - 代码生成库：运行时创建Class文件而不需要编译器帮助。<\/li>\n<li><a href=\"https:\/\/github.com\/qmx\/jitescript\">Jitescript<\/a> - 和 <a href=\"https:\/\/github.com\/headius\/bitescript\">BiteScript<\/a> 类似的字节码生成库。<\/li>\n<\/ul>","video_width":0,"column_could_sub":true,"article_ctime":1530572400,"score":"81530572400","video_media_map":{},"video_preview":{},"video":0,"video_time_arr":{"m":"","s":"","h":""},"video_total_seconds":0},"extra":{},"error":{}}