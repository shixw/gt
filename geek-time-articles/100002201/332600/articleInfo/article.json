{"code":0,"data":{"video_id":"","sku":"100002201","video_cover":"","author_name":"陈皓","text_read_version":0,"audio_size":9467773,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/d2\/6a\/d24b6703ea7e1e8a1560294b1fd9fb6a.jpg","subtitles":{},"product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/media\/audio\/fa\/0b\/fae42121755b52ac63fafd84cbf6580b\/ld\/ld.m3u8","chapter_id":"0","column_had_sub":true,"audio_dubber":"杨超","is_finished":false,"inline_video_subtitles":{},"like":{"had_done":false,"count":24},"neighbors":{"left":{"id":41008,"article_title":"106 | 高效沟通：好好说话的艺术"},"right":{"id":332602,"article_title":"108 | Go 编程模式：错误处理"}},"audio_time":"00:09:53","video_height":0,"rate_percent":0,"article_content":"<p>你好，我是陈皓，网名左耳朵耗子。<\/p><p>今天是我们的第一节课，我先带你学习下Go语言编程模式的一些基本技术和要点。了解了这些内容，你就可以更轻松地掌握Go语言编程了，其中主要包括数组切片的一些小坑、接口编程，以及时间和程序运行性能相关的内容。<\/p><p>话不多说，我们直接开始。<\/p><h2>Slice<\/h2><p>首先，我来介绍下Slice，中文翻译叫“切片”，这个东西在Go语言中不是数组，而是一个结构体，其定义如下：<\/p><pre><code>type slice struct {\n    array unsafe.Pointer \/\/指向存放数据的数组指针\n    len   int            \/\/长度有多大\n    cap   int            \/\/容量有多大\n}\n<\/code><\/pre><p>一个空的Slice的表现如下图所示：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/3e\/80\/3e82a8bfb0f9cc51430cf9206c8fcf80.jpg?wh=996x945\" alt=\"\"><\/p><p>熟悉C\/C++的同学一定会知道在结构体里用数组指针的问题——<strong>数据会发生共享<\/strong>！下面我们来看看Slice的一些操作：<\/p><pre><code>foo = make([]int, 5)\nfoo[3] = 42\nfoo[4] = 100\n\nbar  := foo[1:4]\nbar[1] = 99\n<\/code><\/pre><p>我来解释下这段代码：<\/p><ul>\n<li>首先，创建一个foo的Slice，其中的长度和容量都是5；<\/li>\n<li>然后，开始对foo所指向的数组中的索引为3和4的元素进行赋值；<\/li>\n<li>最后，对foo做切片后赋值给bar，再修改bar[1]。<\/li>\n<\/ul><p>为了方便你理解，我画了一张图：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/66\/20\/66ed288ef019a8445b639db92d79a420.jpg?wh=1803x1242\" alt=\"\"><br>\n从这张图片中，我们可以看到，因为foo和bar的内存是共享的，所以，foo和bar对数组内容的修改都会影响到对方。<\/p><p>接下来，我们再来看一个数据操作 <code>append()<\/code> 的示例：<\/p><pre><code>a := make([]int, 32)\nb := a[1:16]\na = append(a, 1)\na[2] = 42\n<\/code><\/pre><p>在这段代码中，把 <code>a[1:16]<\/code> 的切片赋给 <code>b<\/code> ，此时，<code>a<\/code> 和 <code>b<\/code> 的内存空间是共享的，然后，对 <code>a<\/code> 做了一个 <code>append()<\/code>的操作，这个操作会让 <code>a<\/code> 重新分配内存，这就会导致 <code>a<\/code> 和 <code>b<\/code> 不再共享，如下图所示：<\/p><!-- [[[read_end]]] --><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/90\/21\/90e91f0e9517594b6c26fb64d531c621.jpg?wh=1743x1482\" alt=\"\"><br>\n从图中，我们可以看到，<code>append()<\/code>操作让 <code>a<\/code> 的容量变成了64，而长度是33。这里你需要重点注意一下，<strong><code>append()<\/code>这个函数在 <code>cap<\/code> 不够用的时候，就会重新分配内存以扩大容量，如果够用，就不会重新分配内存了<\/strong>！<\/p><p>我们再来看一个例子：<\/p><pre><code>func main() {\n    path := []byte(&quot;AAAA\/BBBBBBBBB&quot;)\n    sepIndex := bytes.IndexByte(path,'\/')\n\n    dir1 := path[:sepIndex]\n    dir2 := path[sepIndex+1:]\n\n    fmt.Println(&quot;dir1 =&gt;&quot;,string(dir1)) \/\/prints: dir1 =&gt; AAAA\n    fmt.Println(&quot;dir2 =&gt;&quot;,string(dir2)) \/\/prints: dir2 =&gt; BBBBBBBBB\n\n    dir1 = append(dir1,&quot;suffix&quot;...)\n\n    fmt.Println(&quot;dir1 =&gt;&quot;,string(dir1)) \/\/prints: dir1 =&gt; AAAAsuffix\n    fmt.Println(&quot;dir2 =&gt;&quot;,string(dir2)) \/\/prints: dir2 =&gt; uffixBBBB\n}\n<\/code><\/pre><p>在这个例子中，<code>dir1<\/code> 和 <code>dir2<\/code> 共享内存，虽然 <code>dir1<\/code> 有一个 <code>append()<\/code> 操作，但是因为 cap 足够，于是数据扩展到了<code>dir2<\/code> 的空间。下面是相关的图示（注意上图中 <code>dir1<\/code> 和 <code>dir2<\/code> 结构体中的 <code>cap<\/code> 和 <code>len<\/code> 的变化）：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/33\/01\/33b6fb6a551a13cef4e0d9644a410601.jpg?wh=1983x2022\" alt=\"\"><br>\n如果要解决这个问题，我们只需要修改一行代码。我们要把代码<\/p><pre><code>dir1 := path[:sepIndex]\n<\/code><\/pre><p>修改为：<\/p><pre><code>dir1 := path[:sepIndex:sepIndex]\n<\/code><\/pre><p>新的代码使用了 Full Slice Expression，最后一个参数叫“Limited Capacity”，于是，后续的 <code>append()<\/code> 操作会导致重新分配内存。<\/p><h2>深度比较<\/h2><p>当我们复制一个对象时，这个对象可以是内建数据类型、数组、结构体、Map……在复制结构体的时候，如果我们需要比较两个结构体中的数据是否相同，就要使用深度比较，而不只是简单地做浅度比较。这里需要使用到反射 <code>reflect.DeepEqual()<\/code> ，下面是几个示例：<\/p><pre><code>import (\n    &quot;fmt&quot;\n    &quot;reflect&quot;\n)\n\nfunc main() {\n\n    v1 := data{}\n    v2 := data{}\n    fmt.Println(&quot;v1 == v2:&quot;,reflect.DeepEqual(v1,v2))\n    \/\/prints: v1 == v2: true\n\n    m1 := map[string]string{&quot;one&quot;: &quot;a&quot;,&quot;two&quot;: &quot;b&quot;}\n    m2 := map[string]string{&quot;two&quot;: &quot;b&quot;, &quot;one&quot;: &quot;a&quot;}\n    fmt.Println(&quot;m1 == m2:&quot;,reflect.DeepEqual(m1, m2))\n    \/\/prints: m1 == m2: true\n\n    s1 := []int{1, 2, 3}\n    s2 := []int{1, 2, 3}\n    fmt.Println(&quot;s1 == s2:&quot;,reflect.DeepEqual(s1, s2))\n    \/\/prints: s1 == s2: true\n}\n<\/code><\/pre><h2>接口编程<\/h2><p>下面，我们来看段代码，其中是两个方法，它们都是要输出一个结构体，其中一个使用一个函数，另一个使用一个“成员函数”。<\/p><pre><code>func PrintPerson(p *Person) {\n    fmt.Printf(&quot;Name=%s, Sexual=%s, Age=%d\\n&quot;,\n  p.Name, p.Sexual, p.Age)\n}\n\nfunc (p *Person) Print() {\n    fmt.Printf(&quot;Name=%s, Sexual=%s, Age=%d\\n&quot;,\n  p.Name, p.Sexual, p.Age)\n}\n\nfunc main() {\n    var p = Person{\n        Name: &quot;Hao Chen&quot;,\n        Sexual: &quot;Male&quot;,\n        Age: 44,\n    }\n\n    PrintPerson(&amp;p)\n    p.Print()\n}\n<\/code><\/pre><p>你更喜欢哪种方式呢？在 Go 语言中，使用“成员函数”的方式叫“Receiver”，这种方式是一种封装，因为 <code>PrintPerson()<\/code>本来就是和 <code>Person<\/code>强耦合的，所以理应放在一起。更重要的是，这种方式可以进行接口编程，对于接口编程来说，也就是一种抽象，主要是用在“多态”，这个技术，我在《<a href=\"https:\/\/coolshell.cn\/articles\/8460.html#%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%A4%9A%E6%80%81\">Go语言简介（上）：接口与多态<\/a>》中讲过，你可以点击链接查看。<\/p><p>在这里，我想讲另一个Go语言接口的编程模式。<\/p><p>首先，我们来看一段代码：<\/p><pre><code>type Country struct {\n    Name string\n}\n\ntype City struct {\n    Name string\n}\n\ntype Printable interface {\n    PrintStr()\n}\nfunc (c Country) PrintStr() {\n    fmt.Println(c.Name)\n}\nfunc (c City) PrintStr() {\n    fmt.Println(c.Name)\n}\n\nc1 := Country {&quot;China&quot;}\nc2 := City {&quot;Beijing&quot;}\nc1.PrintStr()\nc2.PrintStr()\n<\/code><\/pre><p>可以看到，这段代码中使用了一个 <code>Printable<\/code> 的接口，而 <code>Country<\/code> 和 <code>City<\/code> 都实现了接口方法 <code>PrintStr()<\/code> 把自己输出。然而，这些代码都是一样的，能不能省掉呢？<\/p><p>其实，我们可以使用“结构体嵌入”的方式来完成这个事，如下所示：<\/p><pre><code>type WithName struct {\n    Name string\n}\n\ntype Country struct {\n    WithName\n}\n\ntype City struct {\n    WithName\n}\n\ntype Printable interface {\n    PrintStr()\n}\n\nfunc (w WithName) PrintStr() {\n    fmt.Println(w.Name)\n}\n\nc1 := Country {WithName{ &quot;China&quot;}}\nc2 := City { WithName{&quot;Beijing&quot;}}\nc1.PrintStr()\nc2.PrintStr()\n<\/code><\/pre><p>引入一个叫 <code>WithName<\/code>的结构体，但是这会带来一个问题：在初始化的时候变得有点乱。那么，有没有更好的方法呢？再来看另外一个解。<\/p><pre><code>type Country struct {\n    Name string\n}\n\ntype City struct {\n    Name string\n}\n\ntype Stringable interface {\n    ToString() string\n}\nfunc (c Country) ToString() string {\n    return &quot;Country = &quot; + c.Name\n}\nfunc (c City) ToString() string{\n    return &quot;City = &quot; + c.Name\n}\n\nfunc PrintStr(p Stringable) {\n    fmt.Println(p.ToString())\n}\n\nd1 := Country {&quot;USA&quot;}\nd2 := City{&quot;Los Angeles&quot;}\nPrintStr(d1)\nPrintStr(d2)\n<\/code><\/pre><p>在这段代码中，我们可以看到，<strong>我们使用了一个叫<\/strong><code>Stringable<\/code> 的接口，我们用这个接口把“业务类型” <code>Country<\/code> 和 <code>City<\/code> 和“控制逻辑” <code>Print()<\/code> 给解耦了。于是，只要实现了<code>Stringable<\/code> 接口，都可以传给 <code>PrintStr()<\/code> 来使用。<\/p><p>这种编程模式在Go 的标准库有很多的示例，最著名的就是 <code>io.Read<\/code> 和 <code>ioutil.ReadAll<\/code> 的玩法，其中 <code>io.Read<\/code> 是一个接口，你需要实现它的一个 <code>Read(p []byte) (n int, err error)<\/code> 接口方法，只要满足这个规则，就可以被 <code>ioutil.ReadAll<\/code>这个方法所使用。<strong>这就是面向对象编程方法的黄金法则——“Program to an interface not an implementation”。<\/strong><\/p><h2>接口完整性检查<\/h2><p>另外，我们可以看到，Go语言的编译器并没有严格检查一个对象是否实现了某接口所有的接口方法，如下面这个示例：<\/p><pre><code>type Shape interface {\n    Sides() int\n    Area() int\n}\ntype Square struct {\n    len int\n}\nfunc (s* Square) Sides() int {\n    return 4\n}\nfunc main() {\n    s := Square{len: 5}\n    fmt.Printf(&quot;%d\\n&quot;,s.Sides())\n}\n<\/code><\/pre><p>可以看到，<code>Square<\/code> 并没有实现 <code>Shape<\/code> 接口的所有方法，程序虽然可以跑通，但是这样的编程方式并不严谨，如果我们需要强制实现接口的所有方法，那该怎么办呢？<\/p><p>在Go语言编程圈里，有一个比较标准的做法：<\/p><pre><code>var _ Shape = (*Square)(nil)\n<\/code><\/pre><p>声明一个 <code>_<\/code> 变量（没人用）会把一个 <code>nil<\/code> 的空指针从 <code>Square<\/code> 转成 <code>Shape<\/code>，这样，如果没有实现完相关的接口方法，编译器就会报错：<\/p><blockquote>\n<p><em>cannot use (*Square)(nil) (type *Square) as type Shape in assignment: *Square does not implement Shape (missing Area method)<\/em><\/p>\n<\/blockquote><p>这样就做到了强验证的方法。<\/p><h2>时间<\/h2><p>对于时间来说，这应该是编程中比较复杂的问题了，相信我，时间是一种非常复杂的事（比如《<a href=\"https:\/\/coolshell.cn\/articles\/5075.html\">你确信你了解时间吗？<\/a>》《<a href=\"https:\/\/coolshell.cn\/articles\/7804.html\">关于闰秒<\/a>》等文章）。而且，时间有时区、格式、精度等问题，其复杂度不是一般人能处理的。所以，一定要重用已有的时间处理，而不是自己干。<\/p><p>在 Go 语言中，你一定要使用 <code>time.Time<\/code> 和 <code>time.Duration<\/code>  这两个类型。<\/p><ul>\n<li>在命令行上，<code>flag<\/code> 通过 <code>time.ParseDuration<\/code> 支持了 <code>time.Duration<\/code>。<\/li>\n<li>JSON 中的 <code>encoding\/json<\/code> 中也可以把<code>time.Time<\/code> 编码成 <a href=\"https:\/\/tools.ietf.org\/html\/rfc3339\">RFC 3339<\/a> 的格式。<\/li>\n<li>数据库使用的 <code>database\/sql<\/code> 也支持把 <code>DATATIME<\/code> 或 <code>TIMESTAMP<\/code> 类型转成 <code>time.Time<\/code>。<\/li>\n<li>YAML也可以使用 <code>gopkg.in\/yaml.v2<\/code> 支持 <code>time.Time<\/code> 、<code>time.Duration<\/code> 和 <a href=\"https:\/\/tools.ietf.org\/html\/rfc3339\">RFC 3339<\/a> 格式。<\/li>\n<\/ul><p>如果你要和第三方交互，实在没有办法，也请使用 <a href=\"https:\/\/tools.ietf.org\/html\/rfc3339\">RFC 3339<\/a> 的格式。<\/p><p>最后，如果你要做全球化跨时区的应用，一定要把所有服务器和时间全部使用UTC时间。<\/p><h2>性能提示<\/h2><p>Go 语言是一个高性能的语言，但并不是说这样我们就不用关心性能了，我们还是需要关心的。下面我给你提供一份在编程方面和性能相关的提示。<\/p><ul>\n<li>如果需要把数字转换成字符串，使用 <code>strconv.Itoa()<\/code> 比 <code>fmt.Sprintf()<\/code> 要快一倍左右。<\/li>\n<li>尽可能避免把<code>String<\/code>转成<code>[]Byte<\/code> ，这个转换会导致性能下降。<\/li>\n<li>如果在for-loop里对某个Slice 使用 <code>append()<\/code>，请先把 Slice的容量扩充到位，这样可以避免内存重新分配以及系统自动按2的N次方幂进行扩展但又用不到的情况，从而避免浪费内存。<\/li>\n<li>使用<code>StringBuffer<\/code> 或是<code>StringBuild<\/code> 来拼接字符串，性能会比使用 <code>+<\/code> 或 <code>+=<\/code>高三到四个数量级。<\/li>\n<li>尽可能使用并发的 goroutine，然后使用 <code>sync.WaitGroup<\/code> 来同步分片操作。<\/li>\n<li>避免在热代码中进行内存分配，这样会导致gc很忙。尽可能使用  <code>sync.Pool<\/code> 来重用对象。<\/li>\n<li>使用 lock-free的操作，避免使用 mutex，尽可能使用 <code>sync\/Atomic<\/code>包（关于无锁编程的相关话题，可参看《<a href=\"https:\/\/coolshell.cn\/articles\/8239.html\">无锁队列实现<\/a>》或《<a href=\"https:\/\/coolshell.cn\/articles\/9703.html\">无锁Hashmap实现<\/a>》）。<\/li>\n<li>使用 I\/O缓冲，I\/O是个非常非常慢的操作，使用 <code>bufio.NewWrite()<\/code> 和 <code>bufio.NewReader()<\/code> 可以带来更高的性能。<\/li>\n<li>对于在for-loop里的固定的正则表达式，一定要使用 <code>regexp.Compile()<\/code> 编译正则表达式。性能会提升两个数量级。<\/li>\n<li>如果你需要更高性能的协议，就要考虑使用 <a href=\"https:\/\/github.com\/golang\/protobuf\">protobuf<\/a> 或 <a href=\"https:\/\/github.com\/tinylib\/msgp\">msgp<\/a> 而不是JSON，因为JSON的序列化和反序列化里使用了反射。<\/li>\n<li>你在使用Map的时候，使用整型的key会比字符串的要快，因为整型比较比字符串比较要快。<\/li>\n<\/ul><h2>参考文档<\/h2><p>其实，还有很多不错的技巧，我给你推荐一些参考文档，它们可以帮助你写出更好的Go的代码，必读！<\/p><ul>\n<li><a href=\"https:\/\/golang.org\/doc\/effective_go.html\"><strong>Effective Go<\/strong><\/a><\/li>\n<li><a href=\"https:\/\/github.com\/uber-go\/guide\/blob\/master\/style.md\"><strong>Uber Go Style<\/strong><\/a><\/li>\n<li><a href=\"http:\/\/devs.cloudimmunity.com\/gotchas-and-common-mistakes-in-go-golang\/\"><strong>50 Shades of Go: Traps, Gotchas, and Common Mistakes for New Golang Devs<\/strong><\/a><\/li>\n<li><a href=\"https:\/\/github.com\/cristaloleg\/go-advice\"><strong>Go Advice<\/strong><\/a><\/li>\n<li><a href=\"https:\/\/www.instana.com\/blog\/practical-golang-benchmarks\/\"><strong>Practical Go Benchmarks<\/strong><\/a><\/li>\n<li><a href=\"https:\/\/github.com\/alecthomas\/go_serialization_benchmarks\"><strong>Benchmarks of Go serialization methods<\/strong><\/a><\/li>\n<li><a href=\"https:\/\/github.com\/golang\/go\/wiki\/Performance\"><strong>Debugging performance issues in Go programs<\/strong><\/a><\/li>\n<li><a href=\"https:\/\/medium.com\/@val_deleplace\/go-code-refactoring-the-23x-performance-hunt-156746b522f7\"><strong>Go code refactoring: the 23x performance hunt<\/strong><\/a><\/li>\n<\/ul><p>好了，这节课就到这里。如果你觉得今天的内容对你有所帮助，欢迎你帮我分享给更多人。<\/p>","footer_cover_data":{"img_url":"","mp_url":"","link_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":false,"rate":{},"product_id":100002201,"like_count":57,"had_liked":false,"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/fa\/0b\/fae42121755b52ac63fafd84cbf6580b.mp3","id":332600,"had_viewed":false,"article_title":"107 | Go编程模式：切片、接口、时间和性能","column_bgcolor":"#6091b2","share":{"content":"左耳朵耗子的专栏，20年骨灰级程序员，专栏涵盖程序员练级攻略、全栈程序员的体系化学习路线与进阶底图。专栏已有32000人加入学习，可以说是程序员必备宝典。","title":"陈皓 · 左耳听风","poster":"https:\/\/static001.geekbang.org\/resource\/image\/08\/c1\/084b2e8b8757ccb8401d6e6501ef8bc1.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/21\/da\/216b472de3f9027371576e107601c2da.jpg"},"is_video_preview":false,"article_summary":"今天，我先带你学习下Go语言编程模式的一些基本技术和要点。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/88\/00\/88004b50c1828b2088aaa866d6c20800.jpeg","column_sale_type":2,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/21\/da\/216b472de3f9027371576e107601c2da.jpg","column_id":48,"audio_time_arr":{"m":"09","s":"53","h":"00"},"video_time":"","audio_title":"6.20 杨超 107_01.MP3","audio_md5":"fae42121755b52ac63fafd84cbf6580b","video_size":0,"text_read_percent":0,"comment_count":12,"cid":48,"article_sharetitle":"Go编程模式：切片、接口、时间和性能","column_is_onboard":true,"article_cshort":"<p>你好，我是陈皓，网名左耳朵耗子。<\/p><p>今天是我们的第一节课，我先带你学习下Go语言编程模式的一些基本技术和要点。了解了这些内容，你就可以更轻松地掌握Go语言编程了，其中主要包括数组切片的一些小坑、接口编程，以及时间和程序运行性能相关的内容。<\/p><p>话不多说，我们直接开始。<\/p><h2>Slice<\/h2><p>首先，我来介绍下Slice，中文翻译叫“切片”，这个东西在Go语言中不是数组，而是一个结构体，其定义如下：<\/p><pre><code>type slice struct {\n    array unsafe.Pointer \/\/指向存放数据的数组指针\n    len   int            \/\/长度有多大\n    cap   int            \/\/容量有多大\n}\n<\/code><\/pre><p>一个空的Slice的表现如下图所示：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/3e\/80\/3e82a8bfb0f9cc51430cf9206c8fcf80.jpg?wh=996x945\" alt=\"\"><\/p><p>熟悉C\/C++的同学一定会知道在结构体里用数组指针的问题——<strong>数据会发生共享<\/strong>！下面我们来看看Slice的一些操作：<\/p><pre><code>foo = make([]int, 5)\nfoo[3] = 42\nfoo[4] = 100\n\nbar  := foo[1:4]\nbar[1] = 99\n<\/code><\/pre><p>我来解释下这段代码：<\/p><ul>\n<li>首先，创建一个foo的Slice，其中的长度和容量都是5；<\/li>\n<li>然后，开始对foo所指向的数组中的索引为3和4的元素进行赋值；<\/li>\n<li>最后，对foo做切片后赋值给bar，再修改bar[1]。<\/li>\n<\/ul><p>为了方便你理解，我画了一张图：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/66\/20\/66ed288ef019a8445b639db92d79a420.jpg?wh=1803x1242\" alt=\"\"><br>\n从这张图片中，我们可以看到，因为foo和bar的内存是共享的，所以，foo和bar对数组内容的修改都会影响到对方。<\/p><p>接下来，我们再来看一个数据操作 <code>append()<\/code> 的示例：<\/p><pre><code>a := make([]int, 32)\nb := a[1:16]\na = append(a, 1)\na[2] = 42\n<\/code><\/pre><p>在这段代码中，把 <code>a[1:16]<\/code> 的切片赋给 <code>b<\/code> ，此时，<code>a<\/code> 和 <code>b<\/code> 的内存空间是共享的，然后，对 <code>a<\/code> 做了一个 <code>append()<\/code>的操作，这个操作会让 <code>a<\/code> 重新分配内存，这就会导致 <code>a<\/code> 和 <code>b<\/code> 不再共享，如下图所示：<\/p>","video_width":0,"column_could_sub":true,"article_ctime":1610618400,"score":"121610618400","video_media_map":{},"video_preview":{},"video":0,"video_time_arr":{"m":"","s":"","h":""},"video_total_seconds":0},"extra":{},"error":{}}