{"code":0,"data":{"video_id":"","sku":"100002201","video_cover":"","author_name":"陈皓","text_read_version":0,"audio_size":16401649,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/ef\/22\/ef778476a893c816039d660885b86122.jpg","subtitles":{},"product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/media\/audio\/f0\/3a\/f0dd3ba4b04c0667cc67ce8f0f2eec3a\/ld\/ld.m3u8","chapter_id":"0","column_had_sub":true,"audio_dubber":"杨超","is_finished":false,"inline_video_subtitles":{},"like":{"had_done":false,"count":250},"neighbors":{"left":{"id":301,"article_title":"30 | 编程范式游记（1）- 起源"},"right":{"id":2017,"article_title":"32 | 编程范式游记（3） - 类型系统和泛型的本质"}},"audio_time":"00:17:07","video_height":0,"rate_percent":0,"article_content":"<p>你好，我是陈皓，网名左耳朵耗子。<\/p><p>在上节课，我从C语言开始说起，聊了聊面向过程式的编程范式，相信从代码的角度你对这类型的语言已经有了一些理解。作为一门高级语言，C语言绝对是编程语言历史发展中的一个重要里程碑，但随着认知的升级，面向过程的C语言已经无法满足更高层次的编程的需要。于是，C++出现了。<\/p><h1>C++语言<\/h1><p>1980年，AT&amp;T贝尔实验室的<strong>Bjarne Stroustrup<\/strong>创建的C++语言横空出世，它既可以全面兼容C语言，又巧妙揉合了一些面向对象的编程理念。现在来看，不得不佩服Stroustrup的魄力。在这里，我也向你推荐一本书，书名是《C++语言的设计和演化》。<\/p><p>这本书系统介绍了C++诞生的背景以及初衷，书的作者就是<a href=\"https:\/\/book.douban.com\/author\/362072\/\">Stroustrup<\/a>本人，所以你可以非常详细地从语言创建者的角度了解他的设计思路和创新之旅。当然，就是在今天，C++这门语言也还有很多争议，这里我不细说。如果你感兴趣的话，可以看看我几年前在酷壳上发表的文章《<a href=\"https:\/\/coolshell.cn\/articles\/7992.html\">C++的坑真的多吗？<\/a>》。<\/p><p>从语言角度来说，实际上早期C++的许多工作是对C的强化和净化，并把完全兼容C作为强制性要求（这也是C++复杂晦涩的原因，这点Java就干得比C++彻底得多）。在C89、C99这两个C语言的标准中，有许多改进都是从C++中引进的。<\/p><!-- [[[read_end]]] --><p>可见，C++对C语言的贡献非常之大。是的，因为C++很大程度就是用来解决C语言中的各种问题和各种不方便的。比如：<\/p><ul>\n<li>\n<p>用引用来解决指针的问题。<\/p>\n<\/li>\n<li>\n<p>用namespace来解决名字空间冲突的问题。<\/p>\n<\/li>\n<li>\n<p>通过try-catch来解决检查返回值编程的问题。<\/p>\n<\/li>\n<li>\n<p>用class来解决对象的创建、复制、销毁的问题，从而可以达到在结构体嵌套时可以深度复制的内存安全问题。<\/p>\n<\/li>\n<li>\n<p>通过重载操作符来达到操作上的泛型。（比如，消除<a href=\"https:\/\/time.geekbang.org\/column\/article\/301\">《01 | 编程范式游记：起源》<\/a>中提到的比较函数<code>cmpFn<\/code>，再比如用<code>&gt;&gt;<\/code>操作符消除<code>printf()<\/code>的数据类型不够泛型的问题。）<\/p>\n<\/li>\n<li>\n<p>通过模板template和虚函数的多态以及运行时识别来达到更高层次的泛型和多态。<\/p>\n<\/li>\n<li>\n<p>用RAII、智能指针的方式，解决了C语言中因为需要释放资源而出现的那些非常ugly也很容易出错的代码的问题。<\/p>\n<\/li>\n<li>\n<p>用STL解决了C语言中算法和数据结构的N多种坑。<\/p>\n<\/li>\n<\/ul><h1>C++泛型编程<\/h1><p>C++是支持编程范式最多的一门语言，它虽然解决了很多C语言的问题，但我个人觉得它最大的意义是解决了C语言泛型编程的问题。因为，我们可以看到一些C++的标准规格说明书里，有一半以上都在说明STL的标准规格应该是什么样的，这说明泛型编程是C++重点中的重点。<\/p><p>理想情况下，算法应是和数据结构以及类型无关的，各种特殊的数据类型理应做好自己分内的工作，算法只关心一个标准的实现。<strong>而对于泛型的抽象，我们需要回答的问题是，如果我们的数据类型符合通用算法，那么对数据类型的最小需求又是什么呢？<\/strong><\/p><p>我们来看看C++是如何有效解决程序泛型问题的，我认为有三点。<\/p><p><strong>第一，它通过类的方式来解决<\/strong>。<\/p><ul>\n<li>类里面会有构造函数、析构函数表示这个类的分配和释放。<\/li>\n<li>还有它的拷贝构造函数，表示了对内存的复制。<\/li>\n<li>还有重载操作符，像我们要去比较大于、等于、不等于。<\/li>\n<\/ul><p>这样可以让一个用户自定义的数据类型和内建的那些数据类型就很一致了。<\/p><p><strong>第二，通过模板达到类型和算法的妥协<\/strong>。<\/p><ul>\n<li>模板有点像DSL，模板的特化会根据使用者的类型在编译时期生成那个模板的代码。<\/li>\n<li>模板可以通过一个虚拟类型来做类型绑定，这样不会导致类型转换时的问题。<\/li>\n<\/ul><p>模板很好地取代了C时代宏定义带来的问题。<\/p><p><strong>第三，通过虚函数和运行时类型识别<\/strong>。<\/p><ul>\n<li>虚函数带来的多态在语义上可以支持“同一类”的类型泛型。<\/li>\n<li>运行时类型识别技术可以做到在泛型时对具体类型的特殊处理。<\/li>\n<\/ul><p>这样一来，就可以写出基于抽象接口的泛型。<\/p><p>拥有了这些C++引入的技术，我们就可以做到C语言很难做到的泛型编程了。<\/p><p>正如前面说过的，一个良好的泛型编程需要解决如下几个泛型编程的问题：<\/p><ol>\n<li>算法的泛型；<\/li>\n<li>类型的泛型；<\/li>\n<li>数据结构（数据容器）的泛型。<\/li>\n<\/ol><h2>C++泛型编程的示例 - Search函数<\/h2><p>就像前面的<code>search()<\/code>函数，里面的 <code>for(int i=0; i&lt;len; i++)<\/code> 这样的遍历方式，只能适用于<strong>顺序型的数据结构<\/strong>的方式迭代，如：array、set、queue、list和link等。并不适用于<strong>非顺序型的数据结构<\/strong>。<\/p><p>如哈希表hash table，二叉树binary tree、图graph等这样数据不是按顺序存放的数据结构（数据容器）。所以，如果找不到一种<strong>泛型的数据结构的操作方式（如遍历、查找、增加、删除、修改……）<\/strong>，那么，任何的算法或是程序都不可能做到真正意义上的泛型。<\/p><p>除了<code>search()<\/code>函数的“遍历操作”之外，还有search函数的返回值，是一个整型的索引下标。这个整型的下标对于“顺序型的数据结构”是没有问题的，但是对于“非顺序的数据结构”，在语义上都存在问题。<\/p><p>比如，如果我要在一个hash table中查找一个key，返回什么呢？一定不是返回“索引下标”，因为在hash table这样的数据结构中，数据的存放位置不是顺序的，而且还会因为容量不够的问题被重新hash后改变，所以返回数组下标是没有意义的。<\/p><p>对此，我们要把这个事做得泛型和通用一些。如果找到，返回找到的这个元素的一个指针（地址）会更靠谱一些。<\/p><p>所以，为了解决泛型的问题，我们需要动用以下几个C++的技术。<\/p><ol>\n<li>\n<p>使用模板技术来抽象类型，这样可以写出类型无关的数据结构（数据容器）。<\/p>\n<\/li>\n<li>\n<p>使用一个迭代器来遍历或是操作数据结构内的元素。<\/p>\n<\/li>\n<\/ol><p>我们来看一下C++版的<code>search()<\/code>函数是什么样的。<\/p><p>先重温一下C语言版的代码：<\/p><pre><code class=\"language-c\">int search(void* a, size_t size, void* target, \n\tsize_t elem_size, int(*cmpFn)(void*, void*) )\n{\n\tfor(int i=0; i&lt;size; i++) {\n\t\tif ( cmpFn (a + elem_size * i, target) == 0 ) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n<\/code><\/pre><p>我们再来看一下C++泛型版的代码：<\/p><pre><code class=\"language-c++\">template&lt;typename T, typename Iter&gt;\nIter search(Iter pStart, Iter pEnd, T target) \n{\n\tfor(Iter p = pStart; p != pEnd; p++) {\n\t\tif ( *p == target ) \n\t\t\treturn p;\n\t}\n\treturn NULL;\n}\n<\/code><\/pre><p>在C++的泛型版本中，我们可以看到：<\/p><ul>\n<li>\n<p>使用<code>typename T<\/code>抽象了数据结构中存储数据的类型。<\/p>\n<\/li>\n<li>\n<p>使用<code>typename Iter<\/code>，这是不同的数据结构需要自己实现的“迭代器”，这样也就抽象掉了不同类型的数据结构。<\/p>\n<\/li>\n<li>\n<p>然后，我们对数据容器的遍历使用了<code>Iter<\/code>中的<code>++<\/code>方法，这是数据容器需要重载的操作符，这样通过操作符重载也就泛型掉了遍历。<\/p>\n<\/li>\n<li>\n<p>在函数的入参上使用了<code>pStart<\/code>和<code>pEnd<\/code>来表示遍历的起止。<\/p>\n<\/li>\n<li>\n<p>使用<code>*Iter<\/code>来取得这个“指针”的内容。这也是通过重载 <code>*<\/code> 取值操作符来达到的泛型。<\/p>\n<\/li>\n<\/ul><p>当然，你可能会问，为什么我们不用标准接口<code>Iter.Next()<\/code>取代<code>++<\/code>， 用<code>Iter.GetValue()<\/code>来取代<code>*<\/code>，而是通过重载操作符？其实这样做是为了兼容原有C语言的编程习惯。<\/p><p>说明一下，所谓的<code>Iter<\/code>，在实际代码中，就是像<code>vector&lt;int&gt;::iterator<\/code>或<code>map&lt;int, string&gt;::iterator<\/code>这样的东西。这是由相应的数据容器来实现和提供的。<\/p><p>注：下面是C++ STL中的<code>find()<\/code>函数的代码。<\/p><pre><code class=\"language-c++\">template&lt;class InputIterator, class T&gt;\n  InputIterator find (InputIterator first, InputIterator last, const T&amp; val)\n{\n  while (first!=last) {\n    if (*first==val) return first;\n    ++first;\n  }\n  return last;\n}\n<\/code><\/pre><h2>C++泛型编程示例 - Sum 函数<\/h2><p>也许你觉得到这一步，我们的泛型设计就完成了。其实，还远远不够。<code>search<\/code>函数只是一个开始，我们还有很多别的算法会让问题变得更为复杂。<\/p><p>我们再来看一个<code>sum()<\/code>函数。<\/p><p>先看C语言版：<\/p><pre><code class=\"language-c\">long sum(int *a, size_t size) {\n\tlong result = 0;\n\tfor(int i=0; i&lt;size; i++) {\n\t\tresult += a[i];\n\t}\n\treturn result;\n}\n<\/code><\/pre><p>再看一下C++泛型的版本：<\/p><pre><code class=\"language-c++\">template&lt;typename T, typename Iter&gt;\nT sum(Iter pStart, Iter pEnd) {\n\tT result = 0;\n\tfor(Iter p=pStart; p!=pEnd; p++) {\n\t\tresult += *p;\n\t}\n\treturn result;\t\n}\n<\/code><\/pre><p>你看到了什么样的问题？这个代码中最大的问题就是 <code>T result = 0;<\/code> 这条语句：<\/p><ul>\n<li>那个<code>0<\/code>假设了类型是<code>int<\/code>；<\/li>\n<li>那个<code>T<\/code>假设了Iter中出来的类型是<code>T<\/code>。<\/li>\n<\/ul><p>这样的假设是有问题的，如果类型不一样，就会导致转型的问题，这会带来非常buggy的代码。那么，我们怎么解决呢？<\/p><h2>C++泛型编程的重要技术 - 迭代器<\/h2><p>我们知道<code>Iter<\/code>在实际调用者那会是一个具体的像<code>vector&lt;int&gt;::iterator<\/code>这样的东西。在这个声明中，<code>int<\/code>已经被传入<code>Iter<\/code>中了。所以，定义<code>result<\/code>的<code>T<\/code>应该可以从<code>Iter<\/code>中来。这样就可以保证类型是一样的，而且不会有被转型的问题。<\/p><p>所以，我们需要精心地实现一个“迭代器”。下面是一个“精简版”的迭代器（我没有把C++ STL代码里的迭代器列出来，是因为代码太多太复杂，我这里只是为了说明问题）。<\/p><pre><code class=\"language-c++\">template &lt;class T&gt;\nclass container {\npublic:\n\tclass iterator {\n\tpublic:\n\t\ttypedef iterator self_type;\n\t\ttypedef T   value_type;\n\t\ttypedef T*  pointer;\n\t\ttypedef T&amp; \treference;\n\n\t\treference operator*();\n\t\tpointer operator-&gt;();\n\t\tbool operator==(const self_type&amp; rhs)；\n\t\tbool operator!=(const self_type&amp; rhs)；\n\t\tself_type operator++() { self_type i = *this; ptr_++; return i; }\n\t\tself_type operator++(int junk) { ptr_++; return *this; }\n\t\t...\n\t\t...\n\tprivate:\n\t\tpointer _ptr;\n\t};\n\n\titerator begin();\n\titerator end();\n\t...\n\t...\n};\n<\/code><\/pre><p>上面的代码是我写的一个迭代器（这个迭代器在语义上是没有问题的），我没有把所有的代码列出来，而把它的一些基本思路列了出来。这里我说明一下几个关键点。<\/p><ul>\n<li>\n<p>首先，一个迭代器需要和一个容器在一起，因为里面是对这个容器的具体的代码实现。<\/p>\n<\/li>\n<li>\n<p>它需要重载一些操作符，比如：取值操作<code>*<\/code>、成员操作<code>-&gt;<\/code>、比较操作<code>==<\/code>和<code>!=<\/code>，还有遍历操作<code>++<\/code>，等等。<\/p>\n<\/li>\n<li>\n<p>然后，还要<code>typedef<\/code>一些类型，比如<code>value_type<\/code>，告诉我们容器内的数据的实际类型是什么样子。<\/p>\n<\/li>\n<li>\n<p>还有一些，如<code>begin()<\/code>和<code>end()<\/code>的基本操作。<\/p>\n<\/li>\n<li>\n<p>我们还可以看到其中有一个<code>pointer _ptr<\/code>的内部指针来指向当前的数据（注意，<code>pointer<\/code>就是 <code>T*<\/code>）。<\/p>\n<\/li>\n<\/ul><p>好了，有了这个迭代器后，我们还要解决<code>T result = 0<\/code>后面的这个<code>0<\/code>的问题。这个事，算法没有办法搞定，最好由用户传入。于是出现了下面最终泛型的<code>sum()<\/code>版函数。<\/p><pre><code class=\"language-c++\">template &lt;class Iter&gt;\ntypename Iter::value_type\nsum(Iter start, Iter end, T init) {\n\ttypename Iter::value_type result = init;\n\twhile (start != end) {\n\t\tresult = result + *start;\n\t\tstart++;\n\t}\n\treturn result;\n}\n<\/code><\/pre><p>我们可以看到<code>typename Iter::value_type result = init<\/code>这条语句是关键。我们解决了所有的问题。<\/p><p>我们使用如下：<\/p><pre><code class=\"language-c++\">container&lt;int&gt; c;\ncontainer&lt;int&gt;::iterator it = c.begin();\nsum(c.begin(), c.end(), 0);\n<\/code><\/pre><p>这就是整个STL的泛型方法，其中包括：<\/p><ul>\n<li>泛型的数据容器；<\/li>\n<li>泛型数据容器的迭代器；<\/li>\n<li>然后泛型的算法就很容易写了。<\/li>\n<\/ul><h1>需要更多的抽象<\/h1><h2>更为复杂的需求<\/h2><p>但是，还能不能做到更为泛型呢？比如：如果我们有这样的一个数据结构Employee，里面有vacation就是休假多少天，以及工资。<\/p><pre><code class=\"language-c++\">struct Employee {\n\tstring name;\n\tstring id;\n\tint vacation;\n\tdouble salary；\n};\n<\/code><\/pre><p>现在我想计算员工的总薪水，或是总休假天数。<\/p><pre><code class=\"language-c++\">vector&lt;Employee&gt; staff;\n\/\/total salary or total vacation days?\nsum(staff.begin(), staff.end(), 0);\n<\/code><\/pre><p>我们的<code>sum<\/code>完全不知道怎么搞了，因为要累加的是<code>Employee<\/code>类中的不同字段，即便我们的Employee中重载了<code>+<\/code>操作，也不知道要加哪个字段。<\/p><p>另外，我们可能还会有：求平均值average，求最小值min，求最大值max，求中位数mean等等。你会发现，算法写出来基本上都是一样的，只是其中的“累加”操作变成了另外一个操作。就这个例子而言，我想计算员工薪水里面最高的，和休假最少的，或者我想计算全部员工的总共休假多少天。那么面对这么多的需求，我们是否可以泛型一些呢？怎样解决这些问题呢？<\/p><h2>更高维度的抽象<\/h2><p>要解决这个问题，我希望我的这个算法只管遍历，具体要干什么，那是业务逻辑，由外面的调用方来定义我就好了，和我无关。这样一来，代码的重用度就更高了。<\/p><p>下面是一个抽象度更高的版本，这个版本再叫<code>sum<\/code>就不太合适了。这个版本应该是<code>reduce<\/code>——用于把一个数组reduce成一个值。<\/p><pre><code class=\"language-c++\">template&lt;class Iter, class T, class Op&gt;\nT reduce (Iter start, Iter end, T init, Op op) {\n\tT result = init;\n\twhile ( start != end ) {\n\t\tresult = op( result, *start );\n\t\tstart++;\n\t}\n\treturn result;\n}\n\n<\/code><\/pre><p>上面的代码中，我们需要传一个函数进来。在STL中，它是个函数对象，我们还是这套算法，但是result不是像前面那样去加，是把整个迭代器值给你一个operation，然后由它来做。我把这个方法又拿出去了，所以就会变成这个样子。<\/p><p>在C++ STL中，与我的这个reduce函数对应的函数名叫 <code>accumulate()<\/code>，其实际代码有两个版本。<\/p><p>第一个版本就是下面的版本，只不过是用<code>for<\/code>语句而不是<code>while<\/code>。<\/p><pre><code class=\"language-c++\">template&lt;class InputIt, class T&gt;\nT accumulate(InputIt first, InputIt last, T init)\n{\n    for (; first != last; ++first) {\n        init = init + *first;\n    }\n    return init;\n}\n<\/code><\/pre><p>第二个版本，更为抽象，因为需要传入一个“二元操作函数”——<code>BinaryOperation op<\/code>来做accumulate。accumulate的语义比sum更抽象了。<\/p><pre><code class=\"language-c++\">template&lt;class InputIt, class T, class BinaryOperation&gt;\nT accumulate(InputIt first, InputIt last, T init, \n             BinaryOperation op)\n{\n    for (; first != last; ++first) {\n        init = op(init, *first);\n    }\n    return init;\n}\n<\/code><\/pre><p>来看看我们在使用中是什么样子的：<\/p><pre><code class=\"language-c++\">double sum_salaries = \n  reduce( staff.begin(), staff.end(), 0.0,\n\t\t  [](double s, Employee e)\n\t\t    {return s + e.salary;}  );\n\ndouble max_salary =\n  reduce( staff.begin(), staff.end(), 0.0,\n\t\t  [](double s, Employee e)\n\t\t    {return s &gt; e.salary? s: e.salary; } );\n<\/code><\/pre><p>注意：我这里用了C++的lambda表达式。<\/p><p>你可以很清楚地看到，reduce这个函数就更通用了，具体要干什么样的事情呢？放在匿名函数里面，它会定义我，我只做一个reduce。更抽象地来说，我就把一个数组，一个集合，变成一个值。怎么变成一个值呢？由这个函数来决定。<\/p><h3>Reduce 函数<\/h3><p>我们来看看如何使用reduce和其它函数完成一个更为复杂的功能。<\/p><p>下面这个示例中，我先定义了一个函数对象<code>counter<\/code>。这个函数对象需要一个<code>Cond<\/code>的函数对象，它是个条件判断函数，如果满足条件，则加1，否则加0。<\/p><pre><code class=\"language-c++\">template&lt;class T, class Cond&gt;\nstruct counter {\n\tsize_t operator()(size_t c, T t) const {\n\t\treturn c + (Cond(t) ? 1 : 0);\n\t}\n};\n<\/code><\/pre><p>然后，我用上面的<code>counter<\/code>函数对象和<code>reduce<\/code>函数共同来打造一个<code>counter_if<\/code>算法（当条件满足的时候我就记个数，也就是统计满足某个条件的个数），我们可以看到，就是一行代码的事。<\/p><pre><code class=\"language-c++\">template&lt;class Iter, class Cond&gt;\nsize_t count_if(Iter begin, Iter end, Cond c){\n\treturn reduce(begin, end, 0, \n\t\t\t\t  counter&lt;Iter::value_type, Cond&gt;(c));\n}\n<\/code><\/pre><p>至于是什么样的条件，这个属于业务逻辑，不是我的流程控制，所以，这应该交给使用方。<\/p><p>于是，当我需要统计薪资超过1万元的员工的数量时，一行代码就完成了。<\/p><pre><code class=\"language-c++\">size_t cnt = count_if(staff.begin(), staff.end(), \n\t\t\t\t\t[](Employee e){ return e.salary &gt; 10000; });\n<\/code><\/pre><p>Reduce时可以只对结构体中的某些值做Reduce，比如说只对 <code>salary&gt;10000<\/code> 的人做，只选出这个里面的值，它用Reduce就可以达到这步，只要传不同的方式给它，你就可以又造出一个新的东西出来。<\/p><p>说着说着，就到了函数式编程。函数式编程里面，我们可以用很多的像reduce这样的函数来完成更多的像STL里面的<code>count_if()<\/code>这样有具体意义的函数。关于函数式编程，我们会在后面继续具体聊。<\/p><h1>小结<\/h1><p>在这篇文章中，我们聊到C++语言是如何通过泛型来解决C语言遇到的问题，其实这里面主要就是泛型编程和函数式编程的基本方法相关的细节，虽然解决编程语言中类型带来的问题可能有多种方式，不一定就是C++这种方式。<\/p><p>而我之所以从C\/C++开始，目的只是因为C\/C++都是比较偏底层的编程语言。从底层的原理上，我们可以更透彻地了解，从C到C++的演进这一过程中带来的编程方式的变化。这可以让你看到，在静态类型语言方面解决泛型编程的一些技术和方法，从而感受到其中的奥妙和原理。<\/p><p><strong>因为形式是多样的，但是原理是相通的，所以，这个过程会非常有助于你更深刻地了解后面会谈到的更多的编程范式<\/strong>。<\/p><p>以下是《编程范式游记》系列文章的目录，方便你了解这一系列内容的全貌。<\/p><ul>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/301\">01 | 编程范式游记：起源<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/303\">02 | 编程范式游记：泛型编程<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/2017\">03 | 编程范式游记：类型系统和泛型的本质<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/2711\">04 | 编程范式游记：函数式编程<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/2723\">05 | 编程范式游记：修饰器模式<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/2729\">06 | 编程范式游记：面向对象编程<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/2741\">07 | 编程范式游记：基于原型的编程范式<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/2748\">08 | 编程范式游记：Go 语言的委托模式<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/2751\">09 | 编程范式游记：编程的本质<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/2752\">10 | 编程范式游记：逻辑编程范式<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/2754\">11 | 编程范式游记：程序世界里的编程范式<\/a><\/li>\n<\/ul>","footer_cover_data":{"img_url":"","mp_url":"","link_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{},"product_id":100002201,"like_count":271,"had_liked":false,"article_subtitle":"无","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/f0\/3a\/f0dd3ba4b04c0667cc67ce8f0f2eec3a.mp3","id":303,"had_viewed":false,"article_title":"31 | 编程范式游记（2）- 泛型编程","column_bgcolor":"#6091b2","share":{"content":"左耳朵耗子的专栏，20年骨灰级程序员，专栏涵盖程序员练级攻略、全栈程序员的体系化学习路线与进阶底图。专栏已有32000人加入学习，可以说是程序员必备宝典。","title":"陈皓 · 左耳听风","poster":"https:\/\/static001.geekbang.org\/resource\/image\/08\/c1\/084b2e8b8757ccb8401d6e6501ef8bc1.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/21\/da\/216b472de3f9027371576e107601c2da.jpg"},"is_video_preview":false,"article_summary":"C++语言是如何通过泛型来解决C语言遇到的问题的？","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/22\/03\/228a58fca6c4af1f631d4b6bad065003.jpeg","column_sale_type":2,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/21\/da\/216b472de3f9027371576e107601c2da.jpg","column_id":48,"audio_time_arr":{"m":"17","s":"07","h":"00"},"video_time":"","audio_title":"1.23 杨超 031_01.MP3","audio_md5":"f0dd3ba4b04c0667cc67ce8f0f2eec3a","video_size":0,"text_read_percent":0,"comment_count":47,"cid":48,"article_sharetitle":"左耳朵耗子的编程范式游记（2）-泛型编程","column_is_onboard":true,"article_cshort":"<p>你好，我是陈皓，网名左耳朵耗子。<\/p><p>在上节课，我从C语言开始说起，聊了聊面向过程式的编程范式，相信从代码的角度你对这类型的语言已经有了一些理解。作为一门高级语言，C语言绝对是编程语言历史发展中的一个重要里程碑，但随着认知的升级，面向过程的C语言已经无法满足更高层次的编程的需要。于是，C++出现了。<\/p><h1>C++语言<\/h1><p>1980年，AT&amp;T贝尔实验室的<strong>Bjarne Stroustrup<\/strong>创建的C++语言横空出世，它既可以全面兼容C语言，又巧妙揉合了一些面向对象的编程理念。现在来看，不得不佩服Stroustrup的魄力。在这里，我也向你推荐一本书，书名是《C++语言的设计和演化》。<\/p><p>这本书系统介绍了C++诞生的背景以及初衷，书的作者就是<a href=\"https:\/\/book.douban.com\/author\/362072\/\">Stroustrup<\/a>本人，所以你可以非常详细地从语言创建者的角度了解他的设计思路和创新之旅。当然，就是在今天，C++这门语言也还有很多争议，这里我不细说。如果你感兴趣的话，可以看看我几年前在酷壳上发表的文章《<a href=\"https:\/\/coolshell.cn\/articles\/7992.html\">C++的坑真的多吗？<\/a>》。<\/p><p>从语言角度来说，实际上早期C++的许多工作是对C的强化和净化，并把完全兼容C作为强制性要求（这也是C++复杂晦涩的原因，这点Java就干得比C++彻底得多）。在C89、C99这两个C语言的标准中，有许多改进都是从C++中引进的。<\/p>","video_width":0,"column_could_sub":true,"article_ctime":1516057200,"score":"31516057200","video_media_map":{},"video_preview":{},"video":0,"video_time_arr":{"m":"","s":"","h":""},"video_total_seconds":0},"extra":{},"error":{}}