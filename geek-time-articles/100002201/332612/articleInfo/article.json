{"code":0,"data":{"video_id":"","sku":"100002201","video_cover":"","author_name":"陈皓","text_read_version":0,"audio_size":5698093,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/0d\/5f\/0dc6f1031a2d398ba17074252815035f.jpg","subtitles":{},"product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/media\/audio\/2f\/c9\/2fb8458ae073995bef32f675d34d81c9\/ld\/ld.m3u8","chapter_id":"0","column_had_sub":true,"audio_dubber":"杨超","is_finished":false,"inline_video_subtitles":{},"like":{"had_done":false,"count":6},"neighbors":{"left":{"id":332610,"article_title":"114 | Go编程模式：Pipeline"},"right":{"id":41118,"article_title":"结束语 | 业精于勤，行成于思"}},"audio_time":"00:05:57","video_height":0,"rate_percent":0,"article_content":"<p>你好，我是陈皓，网名左耳朵耗子。<\/p><p>这节课，我们来重点讨论一下，Kubernetes 的 <code>kubectl<\/code> 命令中的使用到的一个编程模式：Visitor（其实，<code>kubectl<\/code> 主要使用到了两个，一个是Builder，另一个是Visitor）。<\/p><p>本来，Visitor 是面向对象设计模式中一个很重要的设计模式（可以看下Wikipedia <a href=\"https:\/\/en.wikipedia.org\/wiki\/Visitor_pattern\">Visitor Pattern词条<\/a>），这个模式是将算法与操作对象的结构分离的一种方法。这种分离的实际结果是能够在不修改结构的情况下向现有对象结构添加新操作，是遵循开放\/封闭原则的一种方法。这节课，我们重点学习一下 <code>kubelet<\/code> 中是怎么使用函数式的方法来实现这个模式的。<\/p><h2>一个简单示例<\/h2><p>首先，我们来看一个简单设计模式的Visitor的示例。<\/p><ul>\n<li>我们的代码中有一个<code>Visitor<\/code>的函数定义，还有一个<code>Shape<\/code>接口，这需要使用 <code>Visitor<\/code>函数作为参数。<\/li>\n<li>我们的实例的对象 <code>Circle<\/code>和 <code>Rectangle<\/code>实现了 <code>Shape<\/code> 接口的 <code>accept()<\/code> 方法，这个方法就是等外面给我们传递一个Visitor。<\/li>\n<\/ul><pre><code>package main\n\nimport (\n    &quot;encoding\/json&quot;\n    &quot;encoding\/xml&quot;\n    &quot;fmt&quot;\n)\n\ntype Visitor func(shape Shape)\n\ntype Shape interface {\n    accept(Visitor)\n}\n\ntype Circle struct {\n    Radius int\n}\n\nfunc (c Circle) accept(v Visitor) {\n    v(c)\n}\n\ntype Rectangle struct {\n    Width, Heigh int\n}\n\nfunc (r Rectangle) accept(v Visitor) {\n    v(r)\n}\n<\/code><\/pre><p>然后，我们实现两个Visitor：一个是用来做JSON序列化的；另一个是用来做XML序列化的。<\/p><!-- [[[read_end]]] --><pre><code>func JsonVisitor(shape Shape) {\n    bytes, err := json.Marshal(shape)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(string(bytes))\n}\n\nfunc XmlVisitor(shape Shape) {\n    bytes, err := xml.Marshal(shape)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(string(bytes))\n}\n<\/code><\/pre><p>下面是使用Visitor这个模式的代码：<\/p><pre><code>func main() {\n  c := Circle{10}\n  r :=  Rectangle{100, 200}\n  shapes := []Shape{c, r}\n\n  for _, s := range shapes {\n    s.accept(JsonVisitor)\n    s.accept(XmlVisitor)\n  }\n\n}\n<\/code><\/pre><p>其实，这段代码的目的就是想解耦数据结构和算法。虽然使用 Strategy 模式也是可以完成的，而且会比较干净，<strong>但是在有些情况下，多个Visitor是来访问一个数据结构的不同部分，这种情况下，数据结构有点像一个数据库，而各个Visitor会成为一个个的小应用。<\/strong>  <code>kubectl<\/code>就是这种情况。<\/p><h2>Kubernetes相关背景<\/h2><p>接下来，我们再来了解一下相关的知识背景。<\/p><ul>\n<li>Kubernetes抽象了很多种的Resource，比如Pod、ReplicaSet、ConfigMap、Volumes、Namespace、Roles……种类非常繁多，这些东西构成了Kubernetes的数据模型（你可以看看  <a href=\"https:\/\/github.com\/kubernauts\/practical-kubernetes-problems\/blob\/master\/images\/k8s-resources-map.png\">Kubernetes Resources 地图<\/a>  ，了解下有多复杂）。<\/li>\n<li><code>kubectl<\/code> 是Kubernetes中的一个客户端命令，操作人员用这个命令来操作Kubernetes。<code>kubectl<\/code> 会联系到 Kubernetes 的API Server，API Server会联系每个节点上的 <code>kubelet<\/code> ，从而控制每个节点。<\/li>\n<li><code>kubectl<\/code>  的主要工作是处理用户提交的东西（包括命令行参数、YAML文件等），接着会把用户提交的这些东西组织成一个数据结构体，发送给 API Server。<\/li>\n<li>相关的源代码在 <code>src\/k8s.io\/cli-runtime\/pkg\/resource\/visitor.go<\/code> 中（<a href=\"https:\/\/github.com\/kubernetes\/kubernetes\/blob\/cea1d4e20b4a7886d8ff65f34c6d4f95efcb4742\/staging\/src\/k8s.io\/cli-runtime\/pkg\/resource\/visitor.go\">源码链接<\/a>）。<\/li>\n<\/ul><p><code>kubectl<\/code> 的代码比较复杂，不过，简单来说，基本原理就是<strong>它从命令行和YAML文件中获取信息，通过Builder模式并把其转成一系列的资源，最后用 Visitor 模式来迭代处理这些Reources<\/strong>。<\/p><p>下面我们来看看 <code>kubectl<\/code> 的实现。为了简化，我不直接分析复杂的源码，而是用一个小的示例来表明 。<\/p><h2>kubectl的实现方法<\/h2><h3>Visitor模式定义<\/h3><p>首先，<code>kubectl<\/code> 主要是用来处理 <code>Info<\/code>结构体，下面是相关的定义：<\/p><pre><code>type VisitorFunc func(*Info, error) error\n\ntype Visitor interface {\n    Visit(VisitorFunc) error\n}\n\ntype Info struct {\n    Namespace   string\n    Name        string\n    OtherThings string\n}\nfunc (info *Info) Visit(fn VisitorFunc) error {\n  return fn(info, nil)\n}\n<\/code><\/pre><p>可以看到，<\/p><ul>\n<li>有一个 <code>VisitorFunc<\/code> 的函数类型的定义；<\/li>\n<li>一个 <code>Visitor<\/code> 的接口，其中需要 <code>Visit(VisitorFunc) error<\/code> 的方法（这就像是我们上面那个例子的 <code>Shape<\/code> ）；<\/li>\n<li>最后，为<code>Info<\/code> 实现 <code>Visitor<\/code> 接口中的 <code>Visit()<\/code> 方法，实现就是直接调用传进来的方法（与前面的例子相仿）。<\/li>\n<\/ul><p>我们再来定义几种不同类型的 Visitor。<\/p><h3>Name Visitor<\/h3><p>这个Visitor 主要是用来访问 <code>Info<\/code> 结构中的 <code>Name<\/code> 和 <code>NameSpace<\/code> 成员：<\/p><pre><code>type NameVisitor struct {\n  visitor Visitor\n}\n\nfunc (v NameVisitor) Visit(fn VisitorFunc) error {\n  return v.visitor.Visit(func(info *Info, err error) error {\n    fmt.Println(&quot;NameVisitor() before call function&quot;)\n    err = fn(info, err)\n    if err == nil {\n      fmt.Printf(&quot;==&gt; Name=%s, NameSpace=%s\\n&quot;, info.Name, info.Namespace)\n    }\n    fmt.Println(&quot;NameVisitor() after call function&quot;)\n    return err\n  })\n}\n<\/code><\/pre><p>可以看到，在这段代码中：<\/p><ul>\n<li>声明了一个 <code>NameVisitor<\/code> 的结构体，这个结构体里有一个 <code>Visitor<\/code> 接口成员，这里意味着多态；<\/li>\n<li>在实现 <code>Visit()<\/code> 方法时，调用了自己结构体内的那个 <code>Visitor<\/code>的 <code>Visitor()<\/code> 方法，这其实是一种修饰器的模式，用另一个Visitor修饰了自己（关于修饰器模式，可以复习下<a href=\"https:\/\/time.geekbang.org\/column\/article\/332608\">第113讲<\/a>）。<\/li>\n<\/ul><h3>Other Visitor<\/h3><p>这个Visitor主要用来访问 <code>Info<\/code> 结构中的 <code>OtherThings<\/code> 成员：<\/p><pre><code>type OtherThingsVisitor struct {\n  visitor Visitor\n}\n\nfunc (v OtherThingsVisitor) Visit(fn VisitorFunc) error {\n  return v.visitor.Visit(func(info *Info, err error) error {\n    fmt.Println(&quot;OtherThingsVisitor() before call function&quot;)\n    err = fn(info, err)\n    if err == nil {\n      fmt.Printf(&quot;==&gt; OtherThings=%s\\n&quot;, info.OtherThings)\n    }\n    fmt.Println(&quot;OtherThingsVisitor() after call function&quot;)\n    return err\n  })\n}\n<\/code><\/pre><p>实现逻辑同上，我就不再重新讲了。<\/p><h3>Log Visitor<\/h3><pre><code>type LogVisitor struct {\n  visitor Visitor\n}\n\nfunc (v LogVisitor) Visit(fn VisitorFunc) error {\n  return v.visitor.Visit(func(info *Info, err error) error {\n    fmt.Println(&quot;LogVisitor() before call function&quot;)\n    err = fn(info, err)\n    fmt.Println(&quot;LogVisitor() after call function&quot;)\n    return err\n  })\n}\n<\/code><\/pre><h3>使用方代码<\/h3><p>现在，我们看看使用上面的代码：<\/p><pre><code>func main() {\n  info := Info{}\n  var v Visitor = &amp;info\n  v = LogVisitor{v}\n  v = NameVisitor{v}\n  v = OtherThingsVisitor{v}\n\n  loadFile := func(info *Info, err error) error {\n    info.Name = &quot;Hao Chen&quot;\n    info.Namespace = &quot;MegaEase&quot;\n    info.OtherThings = &quot;We are running as remote team.&quot;\n    return nil\n  }\n  v.Visit(loadFile)\n}\n<\/code><\/pre><p>可以看到，<\/p><ul>\n<li>Visitor们一层套一层；<\/li>\n<li>我用 <code>loadFile<\/code> 假装从文件中读取数据；<\/li>\n<li>最后执行  <code>v.Visit(loadfile)<\/code>  ，这样，我们上面的代码就全部开始激活工作了。<\/li>\n<\/ul><p>这段代码输出如下的信息，你可以看到代码是怎么执行起来的：<\/p><pre><code>LogVisitor() before call function\nNameVisitor() before call function\nOtherThingsVisitor() before call function\n==&gt; OtherThings=We are running as remote team.\nOtherThingsVisitor() after call function\n==&gt; Name=Hao Chen, NameSpace=MegaEase\nNameVisitor() after call function\nLogVisitor() after call function\n<\/code><\/pre><p>上面的代码有以下几种功效：<\/p><ul>\n<li>解耦了数据和程序；<\/li>\n<li>使用了修饰器模式；<\/li>\n<li>还做出了Pipeline的模式。<\/li>\n<\/ul><p>所以，其实我们可以重构一下上面的代码。<\/p><h3>Visitor修饰器<\/h3><p>我们用<a href=\"https:\/\/coolshell.cn\/articles\/17929.html\">修饰器模式<\/a>来重构一下上面的代码。<\/p><pre><code>type DecoratedVisitor struct {\n  visitor    Visitor\n  decorators []VisitorFunc\n}\n\nfunc NewDecoratedVisitor(v Visitor, fn ...VisitorFunc) Visitor {\n  if len(fn) == 0 {\n    return v\n  }\n  return DecoratedVisitor{v, fn}\n}\n\n\/\/ Visit implements Visitor\nfunc (v DecoratedVisitor) Visit(fn VisitorFunc) error {\n  return v.visitor.Visit(func(info *Info, err error) error {\n    if err != nil {\n      return err\n    }\n    if err := fn(info, nil); err != nil {\n      return err\n    }\n    for i := range v.decorators {\n      if err := v.decorators[i](info, nil); err != nil {\n        return err\n      }\n    }\n    return nil\n  })\n}\n<\/code><\/pre><p>这段代码并不复杂，我来解释下。<\/p><ul>\n<li>用一个 <code>DecoratedVisitor<\/code> 的结构来存放所有的<code>VistorFunc<\/code>函数；<\/li>\n<li><code>NewDecoratedVisitor<\/code> 可以把所有的 <code>VisitorFunc<\/code>转给它，构造 <code>DecoratedVisitor<\/code> 对象；<\/li>\n<li><code>DecoratedVisitor<\/code>实现了 <code>Visit()<\/code> 方法，里面就是来做一个for-loop，顺着调用所有的 <code>VisitorFunc<\/code>。<\/li>\n<\/ul><p>这样，我们的代码就可以这样运作了：<\/p><pre><code>info := Info{}\nvar v Visitor = &amp;info\nv = NewDecoratedVisitor(v, NameVisitor, OtherVisitor)\n\nv.Visit(LoadFile)\n<\/code><\/pre><p>是不是比之前的那个简单？需要注意的是，这个<code>DecoratedVisitor<\/code> 同样可以成为一个Visitor来使用。上面的这些代码全部存在于 <code>kubectl<\/code> 的代码中，只要你看懂了这里面的代码逻辑，就一定能看懂 <code>kubectl<\/code> 的代码。<\/p><p>好了，这节课就到这里。如果你觉得今天的内容对你有所帮助，欢迎你帮我分享给更多人。<\/p>","footer_cover_data":{"img_url":"","mp_url":"","link_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":false,"rate":{},"product_id":100002201,"like_count":22,"had_liked":false,"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/2f\/c9\/2fb8458ae073995bef32f675d34d81c9.mp3","id":332612,"had_viewed":false,"article_title":"115 | Go 编程模式：Kubernetes Visitor模式","column_bgcolor":"#6091b2","share":{"content":"左耳朵耗子的专栏，20年骨灰级程序员，专栏涵盖程序员练级攻略、全栈程序员的体系化学习路线与进阶底图。专栏已有32000人加入学习，可以说是程序员必备宝典。","title":"陈皓 · 左耳听风","poster":"https:\/\/static001.geekbang.org\/resource\/image\/08\/c1\/084b2e8b8757ccb8401d6e6501ef8bc1.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/21\/da\/216b472de3f9027371576e107601c2da.jpg"},"is_video_preview":false,"article_summary":"这节课，我们重点学习一下 kubelet 中是怎么使用函数式的方法来实现Visitor模式的。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/c8\/c0\/c836867a07fbda79fe763ac17cd02cc0.jpeg","column_sale_type":2,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/21\/da\/216b472de3f9027371576e107601c2da.jpg","column_id":48,"audio_time_arr":{"m":"05","s":"57","h":"00"},"video_time":"","audio_title":"6.28 杨超 115_01.MP3","audio_md5":"2fb8458ae073995bef32f675d34d81c9","video_size":0,"text_read_percent":0,"comment_count":4,"cid":48,"article_sharetitle":"Go 编程模式：Kubernetes Visitor模式","column_is_onboard":true,"article_cshort":"<p>你好，我是陈皓，网名左耳朵耗子。<\/p><p>这节课，我们来重点讨论一下，Kubernetes 的 <code>kubectl<\/code> 命令中的使用到的一个编程模式：Visitor（其实，<code>kubectl<\/code> 主要使用到了两个，一个是Builder，另一个是Visitor）。<\/p><p>本来，Visitor 是面向对象设计模式中一个很重要的设计模式（可以看下Wikipedia <a href=\"https:\/\/en.wikipedia.org\/wiki\/Visitor_pattern\">Visitor Pattern词条<\/a>），这个模式是将算法与操作对象的结构分离的一种方法。这种分离的实际结果是能够在不修改结构的情况下向现有对象结构添加新操作，是遵循开放\/封闭原则的一种方法。这节课，我们重点学习一下 <code>kubelet<\/code> 中是怎么使用函数式的方法来实现这个模式的。<\/p><h2>一个简单示例<\/h2><p>首先，我们来看一个简单设计模式的Visitor的示例。<\/p><ul>\n<li>我们的代码中有一个<code>Visitor<\/code>的函数定义，还有一个<code>Shape<\/code>接口，这需要使用 <code>Visitor<\/code>函数作为参数。<\/li>\n<li>我们的实例的对象 <code>Circle<\/code>和 <code>Rectangle<\/code>实现了 <code>Shape<\/code> 接口的 <code>accept()<\/code> 方法，这个方法就是等外面给我们传递一个Visitor。<\/li>\n<\/ul><pre><code>package main\n\nimport (\n    &quot;encoding\/json&quot;\n    &quot;encoding\/xml&quot;\n    &quot;fmt&quot;\n)\n\ntype Visitor func(shape Shape)\n\ntype Shape interface {\n    accept(Visitor)\n}\n\ntype Circle struct {\n    Radius int\n}\n\nfunc (c Circle) accept(v Visitor) {\n    v(c)\n}\n\ntype Rectangle struct {\n    Width, Heigh int\n}\n\nfunc (r Rectangle) accept(v Visitor) {\n    v(r)\n}\n<\/code><\/pre><p>然后，我们实现两个Visitor：一个是用来做JSON序列化的；另一个是用来做XML序列化的。<\/p>","video_width":0,"column_could_sub":true,"article_ctime":1610618880,"score":"121610618880","video_media_map":{},"video_preview":{},"video":0,"video_time_arr":{"m":"","s":"","h":""},"video_total_seconds":0},"extra":{},"error":{}}