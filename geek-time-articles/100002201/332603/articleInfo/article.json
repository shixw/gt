{"code":0,"data":{"video_id":"","sku":"100002201","video_cover":"","author_name":"陈皓","text_read_version":0,"audio_size":5430379,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/20\/0c\/2079f8e5997f53f81f43437cb40d250c.jpg","subtitles":{},"product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/media\/audio\/a0\/8f\/a0bffa5a0bc49ed39dc309bda3b1938f\/ld\/ld.m3u8","chapter_id":"0","column_had_sub":true,"audio_dubber":"杨超","is_finished":false,"inline_video_subtitles":{},"like":{"had_done":false,"count":10},"neighbors":{"left":{"id":332602,"article_title":"108 | Go 编程模式：错误处理"},"right":{"id":332605,"article_title":"110 | Go编程模式：委托和反转控制"}},"audio_time":"00:05:40","video_height":0,"rate_percent":0,"article_content":"<p>你好，我是陈皓，网名左耳朵耗子。<\/p><p>这节课，我们来讨论一下Functional Options这个编程模式。这是一个函数式编程的应用案例，编程技巧也很好，是目前Go语言中最流行的一种编程模式。<\/p><p>但是，在正式讨论这个模式之前，我们先来看看要解决什么样的问题。<\/p><h2>配置选项问题<\/h2><p>在编程中，我们经常需要对一个对象（或是业务实体）进行相关的配置。比如下面这个业务实体（注意，这只是一个示例）：<\/p><pre><code>type Server struct {\n    Addr     string\n    Port     int\n    Protocol string\n    Timeout  time.Duration\n    MaxConns int\n    TLS      *tls.Config\n}\n<\/code><\/pre><p>在这个 <code>Server<\/code> 对象中，我们可以看到：<\/p><ul>\n<li>要有侦听的IP地址 <code>Addr<\/code> 和端口号 <code>Port<\/code> ，这两个配置选项是必填的（当然，IP地址和端口号都可以有默认值，不过这里我们用于举例，所以是没有默认值，而且不能为空，需要是必填的）。<\/li>\n<li>然后，还有协议 <code>Protocol<\/code> 、 <code>Timeout<\/code> 和<code>MaxConns<\/code> 字段，这几个字段是不能为空的，但是有默认值的，比如，协议是TCP，超时<code>30<\/code>秒 和 最大链接数<code>1024<\/code>个。<\/li>\n<li>还有一个 <code>TLS<\/code>  ，这个是安全链接，需要配置相关的证书和私钥。这个是可以为空的。<\/li>\n<\/ul><p>所以，针对这样的配置，我们需要有多种不同的创建不同配置 <code>Server<\/code> 的函数签名，如下所示：<\/p><pre><code>func NewDefaultServer(addr string, port int) (*Server, error) {\n  return &amp;Server{addr, port, &quot;tcp&quot;, 30 * time.Second, 100, nil}, nil\n}\n\nfunc NewTLSServer(addr string, port int, tls *tls.Config) (*Server, error) {\n  return &amp;Server{addr, port, &quot;tcp&quot;, 30 * time.Second, 100, tls}, nil\n}\n\nfunc NewServerWithTimeout(addr string, port int, timeout time.Duration) (*Server, error) {\n  return &amp;Server{addr, port, &quot;tcp&quot;, timeout, 100, nil}, nil\n}\n\nfunc NewTLSServerWithMaxConnAndTimeout(addr string, port int, maxconns int, timeout time.Duration, tls *tls.Config) (*Server, error) {\n  return &amp;Server{addr, port, &quot;tcp&quot;, 30 * time.Second, maxconns, tls}, nil\n}\n<\/code><\/pre><p>因为Go语言不支持重载函数，所以，你得用不同的函数名来应对不同的配置选项。<\/p><!-- [[[read_end]]] --><h2>配置对象方案<\/h2><p>要解决这个问题，最常见的方式是使用一个配置对象，如下所示：<\/p><pre><code>type Config struct {\n    Protocol string\n    Timeout  time.Duration\n    Maxconns int\n    TLS      *tls.Config\n}\n<\/code><\/pre><p>我们把那些非必输的选项都移到一个结构体里，这样一来，  <code>Server<\/code> 对象就会变成：<\/p><pre><code>type Server struct {\n    Addr string\n    Port int\n    Conf *Config\n}\n<\/code><\/pre><p>于是，我们就只需要一个 <code>NewServer()<\/code> 的函数了，在使用前需要构造 <code>Config<\/code> 对象。<\/p><pre><code>func NewServer(addr string, port int, conf *Config) (*Server, error) {\n    \/\/...\n}\n\n\/\/Using the default configuratrion\nsrv1, _ := NewServer(&quot;localhost&quot;, 9000, nil) \n\nconf := ServerConfig{Protocol:&quot;tcp&quot;, Timeout: 60*time.Duration}\nsrv2, _ := NewServer(&quot;locahost&quot;, 9000, &amp;conf)\n<\/code><\/pre><p>这段代码算是不错了，大多数情况下，我们可能就止步于此了。但是，对于有洁癖的、有追求的程序员来说，他们会看到其中不太好的一点，那就是<code>Config<\/code> 并不是必需的，所以，你需要判断是否是 <code>nil<\/code> 或是 Empty——  <code>Config{}<\/code>会让我们的代码感觉不太干净。<\/p><h2>Builder模式<\/h2><p>如果你是一个Java程序员，熟悉设计模式的一定会很自然地使用Builder模式。比如下面的代码：<\/p><pre><code>User user = new User.Builder()\n  .name(&quot;Hao Chen&quot;)\n  .email(&quot;haoel@hotmail.com&quot;)\n  .nickname(&quot;左耳朵&quot;)\n  .build();\n<\/code><\/pre><p>仿照这个模式，我们可以把刚刚的代码改写成下面的样子（注：下面的代码没有考虑出错处理，其中关于出错处理的更多内容，你可以再回顾下<a href=\"https:\/\/time.geekbang.org\/column\/article\/332602\">上节课<\/a>）：<\/p><pre><code>\/\/使用一个builder类来做包装\ntype ServerBuilder struct {\n  Server\n}\n\nfunc (sb *ServerBuilder) Create(addr string, port int) *ServerBuilder {\n  sb.Server.Addr = addr\n  sb.Server.Port = port\n  \/\/其它代码设置其它成员的默认值\n  return sb\n}\n\nfunc (sb *ServerBuilder) WithProtocol(protocol string) *ServerBuilder {\n  sb.Server.Protocol = protocol \n  return sb\n}\n\nfunc (sb *ServerBuilder) WithMaxConn( maxconn int) *ServerBuilder {\n  sb.Server.MaxConns = maxconn\n  return sb\n}\n\nfunc (sb *ServerBuilder) WithTimeOut( timeout time.Duration) *ServerBuilder {\n  sb.Server.Timeout = timeout\n  return sb\n}\n\nfunc (sb *ServerBuilder) WithTLS( tls *tls.Config) *ServerBuilder {\n  sb.Server.TLS = tls\n  return sb\n}\n\nfunc (sb *ServerBuilder) Build() (Server) {\n  return  sb.Server\n}\n<\/code><\/pre><p>这样一来，就可以使用这样的方式了：<\/p><pre><code>sb := ServerBuilder{}\nserver, err := sb.Create(&quot;127.0.0.1&quot;, 8080).\n  WithProtocol(&quot;udp&quot;).\n  WithMaxConn(1024).\n  WithTimeOut(30*time.Second).\n  Build()\n<\/code><\/pre><p>这种方式也很清楚，不需要额外的Config类，使用链式的函数调用的方式来构造一个对象，只需要多加一个Builder类。你可能会觉得，这个Builder类似乎有点多余，我们似乎可以直接在<code>Server<\/code> 上进行这样的 Builder 构造，的确是这样的。但是，在处理错误的时候可能就有点麻烦，不如一个包装类更好一些。<\/p><p>如果我们想省掉这个包装的结构体，就要请出Functional Options上场了：函数式编程。<\/p><h2>Functional Options<\/h2><p>首先，我们定义一个函数类型：<\/p><pre><code>type Option func(*Server)\n<\/code><\/pre><p>然后，我们可以使用函数式的方式定义一组如下的函数：<\/p><pre><code>func Protocol(p string) Option {\n    return func(s *Server) {\n        s.Protocol = p\n    }\n}\nfunc Timeout(timeout time.Duration) Option {\n    return func(s *Server) {\n        s.Timeout = timeout\n    }\n}\nfunc MaxConns(maxconns int) Option {\n    return func(s *Server) {\n        s.MaxConns = maxconns\n    }\n}\nfunc TLS(tls *tls.Config) Option {\n    return func(s *Server) {\n        s.TLS = tls\n    }\n}\n<\/code><\/pre><p>这组代码传入一个参数，然后返回一个函数，返回的这个函数会设置自己的 <code>Server<\/code> 参数。例如，当我们调用其中的一个函数 <code>MaxConns(30)<\/code> 时，其返回值是一个 <code>func(s* Server) { s.MaxConns = 30 }<\/code> 的函数。<\/p><p>这个叫高阶函数。在数学上，这有点像是计算长方形面积的公式为： <code>rect(width, height) = width * height;<\/code> 这个函数需要两个参数，我们包装一下，就可以变成计算正方形面积的公式：<code>square(width) = rect(width, width)<\/code>  。也就是说，<code>squre(width)<\/code>返回了另外一个函数，这个函数就是<code>rect(w,h)<\/code> ，只不过它的两个参数是一样的，即：<code>f(x) = g(x, x)<\/code>。<\/p><p>好了，现在我们再定一个 <code>NewServer()<\/code>的函数，其中，有一个可变参数 <code>options<\/code>  ，它可以传出多个上面的函数，然后使用一个for-loop来设置我们的 <code>Server<\/code> 对象。<\/p><pre><code>func NewServer(addr string, port int, options ...func(*Server)) (*Server, error) {\n\n  srv := Server{\n    Addr:     addr,\n    Port:     port,\n    Protocol: &quot;tcp&quot;,\n    Timeout:  30 * time.Second,\n    MaxConns: 1000,\n    TLS:      nil,\n  }\n  for _, option := range options {\n    option(&amp;srv)\n  }\n  \/\/...\n  return &amp;srv, nil\n}\n<\/code><\/pre><p>于是，我们在创建 <code>Server<\/code> 对象的时候，就可以像下面这样：<\/p><pre><code>s1, _ := NewServer(&quot;localhost&quot;, 1024)\ns2, _ := NewServer(&quot;localhost&quot;, 2048, Protocol(&quot;udp&quot;))\ns3, _ := NewServer(&quot;0.0.0.0&quot;, 8080, Timeout(300*time.Second), MaxConns(1000))\n<\/code><\/pre><p>怎么样，是不是高度整洁和优雅？这不但解决了“使用 <code>Config<\/code> 对象方式的需要有一个config参数，但在不需要的时候，是放 <code>nil<\/code> 还是放 <code>Config{}<\/code>”的选择困难问题，也不需要引用一个Builder的控制对象，直接使用函数式编程，在代码阅读上也很优雅。<\/p><p>所以，以后，你要玩类似的代码时，我强烈推荐你使用Functional Options这种方式，这种方式至少带来了6个好处：<\/p><ul>\n<li>直觉式的编程；<\/li>\n<li>高度的可配置化；<\/li>\n<li>很容易维护和扩展；<\/li>\n<li>自文档；<\/li>\n<li>新来的人很容易上手；<\/li>\n<li>没有什么令人困惑的事（是nil 还是空）。<\/li>\n<\/ul><h2>参考文档<\/h2><ul>\n<li><a href=\"http:\/\/commandcenter.blogspot.com.au\/2014\/01\/self-referential-functions-and-design.html\">Self referential functions and design<\/a>， by Rob Pike<\/li>\n<\/ul><p>好了，这节课就到这里。如果你觉得今天的内容对你有所帮助，欢迎你帮我分享给更多人。<\/p>","footer_cover_data":{"img_url":"","mp_url":"","link_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":false,"rate":{},"product_id":100002201,"like_count":37,"had_liked":false,"article_subtitle":"","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/a0\/8f\/a0bffa5a0bc49ed39dc309bda3b1938f.mp3","id":332603,"had_viewed":false,"article_title":"109 | Go 编程模式：Functional Options","column_bgcolor":"#6091b2","share":{"content":"左耳朵耗子的专栏，20年骨灰级程序员，专栏涵盖程序员练级攻略、全栈程序员的体系化学习路线与进阶底图。专栏已有32000人加入学习，可以说是程序员必备宝典。","title":"陈皓 · 左耳听风","poster":"https:\/\/static001.geekbang.org\/resource\/image\/08\/c1\/084b2e8b8757ccb8401d6e6501ef8bc1.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/21\/da\/216b472de3f9027371576e107601c2da.jpg"},"is_video_preview":false,"article_summary":"Functional Options是目前Go语言中最流行的一种编程模式。","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/65\/ac\/65ddd3a21b9f3736281d0048bafffcac.jpeg","column_sale_type":2,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/21\/da\/216b472de3f9027371576e107601c2da.jpg","column_id":48,"audio_time_arr":{"m":"05","s":"40","h":"00"},"video_time":"","audio_title":"6.20 杨超 109_01.MP3","audio_md5":"a0bffa5a0bc49ed39dc309bda3b1938f","video_size":0,"text_read_percent":0,"comment_count":16,"cid":48,"article_sharetitle":"Go 编程模式：Functional Options","column_is_onboard":true,"article_cshort":"<p>你好，我是陈皓，网名左耳朵耗子。<\/p><p>这节课，我们来讨论一下Functional Options这个编程模式。这是一个函数式编程的应用案例，编程技巧也很好，是目前Go语言中最流行的一种编程模式。<\/p><p>但是，在正式讨论这个模式之前，我们先来看看要解决什么样的问题。<\/p><h2>配置选项问题<\/h2><p>在编程中，我们经常需要对一个对象（或是业务实体）进行相关的配置。比如下面这个业务实体（注意，这只是一个示例）：<\/p><pre><code>type Server struct {\n    Addr     string\n    Port     int\n    Protocol string\n    Timeout  time.Duration\n    MaxConns int\n    TLS      *tls.Config\n}\n<\/code><\/pre><p>在这个 <code>Server<\/code> 对象中，我们可以看到：<\/p><ul>\n<li>要有侦听的IP地址 <code>Addr<\/code> 和端口号 <code>Port<\/code> ，这两个配置选项是必填的（当然，IP地址和端口号都可以有默认值，不过这里我们用于举例，所以是没有默认值，而且不能为空，需要是必填的）。<\/li>\n<li>然后，还有协议 <code>Protocol<\/code> 、 <code>Timeout<\/code> 和<code>MaxConns<\/code> 字段，这几个字段是不能为空的，但是有默认值的，比如，协议是TCP，超时<code>30<\/code>秒 和 最大链接数<code>1024<\/code>个。<\/li>\n<li>还有一个 <code>TLS<\/code>  ，这个是安全链接，需要配置相关的证书和私钥。这个是可以为空的。<\/li>\n<\/ul><p>所以，针对这样的配置，我们需要有多种不同的创建不同配置 <code>Server<\/code> 的函数签名，如下所示：<\/p><pre><code>func NewDefaultServer(addr string, port int) (*Server, error) {\n  return &amp;Server{addr, port, &quot;tcp&quot;, 30 * time.Second, 100, nil}, nil\n}\n\nfunc NewTLSServer(addr string, port int, tls *tls.Config) (*Server, error) {\n  return &amp;Server{addr, port, &quot;tcp&quot;, 30 * time.Second, 100, tls}, nil\n}\n\nfunc NewServerWithTimeout(addr string, port int, timeout time.Duration) (*Server, error) {\n  return &amp;Server{addr, port, &quot;tcp&quot;, timeout, 100, nil}, nil\n}\n\nfunc NewTLSServerWithMaxConnAndTimeout(addr string, port int, maxconns int, timeout time.Duration, tls *tls.Config) (*Server, error) {\n  return &amp;Server{addr, port, &quot;tcp&quot;, 30 * time.Second, maxconns, tls}, nil\n}\n<\/code><\/pre><p>因为Go语言不支持重载函数，所以，你得用不同的函数名来应对不同的配置选项。<\/p>","video_width":0,"column_could_sub":true,"article_ctime":1610618520,"score":"121610618520","video_media_map":{},"video_preview":{},"video":0,"video_time_arr":{"m":"","s":"","h":""},"video_total_seconds":0},"extra":{},"error":{}}