{"code":0,"data":{"video_id":"","sku":"100002201","video_cover":"","author_name":"陈皓","text_read_version":0,"audio_size":3889147,"article_cover":"https:\/\/static001.geekbang.org\/resource\/image\/17\/14\/17b0f6a46a3ca24d8cc586dc74f77c14.jpg","subtitles":{},"product_type":"c1","audio_url":"https:\/\/res001.geekbang.org\/media\/audio\/83\/50\/83cdf0f5051da48dyy1a997ae687aa50\/ld\/ld.m3u8","chapter_id":"0","column_had_sub":true,"audio_dubber":"杨超","is_finished":false,"inline_video_subtitles":{},"like":{"had_done":false,"count":110},"neighbors":{"left":{"id":2752,"article_title":"39 | 编程范式游记（10）- 逻辑编程范式"},"right":{"id":3912,"article_title":"41 | 弹力设计篇之“认识故障和弹力设计”"}},"audio_time":"00:04:03","video_height":0,"rate_percent":0,"article_content":"<p>你好，我是陈皓，网名左耳朵耗子。<\/p><p>这个世界到今天已经有很多很多的编程范式，相当复杂。下面这个图比较好地描绘了这些各式各样的编程范式，这个图越往左边就越是“声明式的”，越往右边就越不是“声明式的”（指令式的），我们可以看到，函数式编程和逻辑编程，都在左边，而右边是指令式的，有状态的，有类型的。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/9d\/8d\/9d6ac4820cc070a6b567d3f514d9ea8d.png?wh=1502*1125\" alt=\"\"><\/p><p>上面这个图有点乱，不过总体说来，我们可以简单地把这世界上纷乱的编程范式，分成这几类：<strong>声明式<\/strong>、<strong>命令式<\/strong>、<strong>逻辑的<\/strong>、<strong>函数式<\/strong>、<strong>面向对象的<\/strong>、<strong>面向过程的<\/strong>。<\/p><p>于是我们归纳一下，就可以得到下面这个简单的图。简单描述一下：<\/p><ul>\n<li>中间两个声明式编程范式（函数式和逻辑式）偏向于你定义要什么，而不是怎么做。<\/li>\n<li>而两边的命令式编程范式和面向对象编程范式，偏向于怎么做，而不是要做什么。<\/li>\n<\/ul><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/4b\/3c\/4b764c2eab8f6f383525e6d1a386d93c.jpg?wh=1860x1353\" alt=\"\"><br>\n我们再归纳一下，基本上来说，就是两大分支，一边是在解决数据和算法，一边是在解决逻辑和控制。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/bf\/ef\/bf6945c2ca2ec5564ecbbf1c81503eef.png?wh=1650*862\" alt=\"\"><\/p><p>下面再结合一张表格说明一下这世界上四大编程范式的类别，以及它们的特性和主要的编程语言。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/37\/25\/37215aac89a3fc78d1d99649a0f91a25.jpg?wh=1950x2010\" alt=\"\"><br>\n程序编程范式。一个是左脑，一个是右脑。我们程序员基本上是在用左脑，左脑是理性分析，喜欢数据证据，线性思维，陷入细节，具体化的，不抽象。但是，实际上玩儿出这些东西的都在右脑，函数式，还有像逻辑式的抽象能力都在右脑。所以我们非线性的想象力都在这边，而标准化教育把我们这边已经全部干掉了，我们只剩左边。我们陷入细节，我一说Java是最好的程序设计语言，一堆人就来了，找各种各样的细节问题跟你纠缠。<\/p><!-- [[[read_end]]] --><p>离我们最近的是函数式编程，但既然函数式编程这么好，为什么函数式编程火不起来呢？首先，这里有个逻辑上的问题，并不是用的人越多的东西就越好。因为还要看是不是大多数人都能理解的东西。函数式编程或是声明式编程，需要的是用我们的右脑，而指令式的则需要用我们的左脑。<\/p><p>参看下图：<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/11\/c7\/11f63d119d5954724b42024f9d6a64c7.png?wh=2000*1125\" alt=\"\"><\/p><p>我们可以看到，<\/p><p><strong>人的左脑的特性是<\/strong>：<\/p><ul>\n<li>理性分析型<\/li>\n<li>喜欢数据证据<\/li>\n<li>线性思维<\/li>\n<li>陷入细节<\/li>\n<li>具体化的<\/li>\n<\/ul><p><strong>人的右脑的特性是<\/strong>：<\/p><ul>\n<li>直觉型<\/li>\n<li>想象力<\/li>\n<li>非线性<\/li>\n<li>宏观思维<\/li>\n<li>抽象化的<\/li>\n<\/ul><p>人类社会中，绝大多数人都是左脑型的人，而只有少数人是右脑型的人，比如那些哲学家、艺术家，以及能够创造理论知识的人。这些人在这个世界上太少了。<\/p><p>这是为什么很多人理解和使用声明式的编程范式比较有困难，因为这要用你的右脑，但是我们习惯于用我们的左脑，左脑用多了以后右脑就有点跟不上了。<\/p><p>说到人类的大脑了，已经到了不是我专长的地方了，这个话题太大了，所以，也是时候结束《编程范式游记》这一系列文章了。希望你能从这一系列文章中有所收获。如果有什么疑问或是我有什么没有讲对的，还希望得到你的批评和指正。先谢谢了。<\/p><p>以下是《编程范式游记》系列文章的目录，方便你了解这一系列内容的全貌。<\/p><ul>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/301\">01 | 编程范式游记：起源<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/303\">02 | 编程范式游记：泛型编程<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/2017\">03 | 编程范式游记：类型系统和泛型的本质<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/2711\">04 | 编程范式游记：函数式编程<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/2723\">05 | 编程范式游记：修饰器模式<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/2729\">06 | 编程范式游记：面向对象编程<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/2741\">07 | 编程范式游记：基于原型的编程范式<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/2748\">08 | 编程范式游记：Go 语言的委托模式<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/2751\">09 | 编程范式游记：编程的本质<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/2752\">10 | 编程范式游记：逻辑编程范式<\/a><\/li>\n<li><a href=\"https:\/\/time.geekbang.org\/column\/article\/2754\">11 | 编程范式游记：程序世界里的编程范式<\/a><\/li>\n<\/ul>","footer_cover_data":{"img_url":"","mp_url":"","link_url":""},"article_cover_hidden":false,"column_is_experience":false,"is_required":true,"rate":{},"product_id":100002201,"like_count":122,"had_liked":false,"article_subtitle":"无","audio_download_url":"https:\/\/static001.geekbang.org\/resource\/audio\/83\/50\/83cdf0f5051da48dyy1a997ae687aa50.mp3","id":2754,"had_viewed":false,"article_title":"40 | 编程范式游记（11）- 程序世界里的编程范式","column_bgcolor":"#6091b2","share":{"content":"左耳朵耗子的专栏，20年骨灰级程序员，专栏涵盖程序员练级攻略、全栈程序员的体系化学习路线与进阶底图。专栏已有32000人加入学习，可以说是程序员必备宝典。","title":"陈皓 · 左耳听风","poster":"https:\/\/static001.geekbang.org\/resource\/image\/08\/c1\/084b2e8b8757ccb8401d6e6501ef8bc1.jpg","cover":"https:\/\/static001.geekbang.org\/resource\/image\/21\/da\/216b472de3f9027371576e107601c2da.jpg"},"is_video_preview":false,"article_summary":"既然函数式编程这么好，为什么函数式编程火不起来呢？","article_poster_wxlite":"https:\/\/static001.geekbang.org\/render\/screen\/67\/b7\/67b4e67e89262900403792bc3b3088b7.jpeg","column_sale_type":2,"article_features":0,"article_could_preview":false,"column_cover":"https:\/\/static001.geekbang.org\/resource\/image\/21\/da\/216b472de3f9027371576e107601c2da.jpg","column_id":48,"audio_time_arr":{"m":"04","s":"03","h":"00"},"video_time":"","audio_title":"2.16 杨超 040_01.MP3","audio_md5":"83cdf0f5051da48dyy1a997ae687aa50","video_size":0,"text_read_percent":0,"comment_count":26,"cid":48,"article_sharetitle":"编程范式游记（11）- 程序世界里的编程范式","column_is_onboard":true,"article_cshort":"<p>你好，我是陈皓，网名左耳朵耗子。<\/p><p>这个世界到今天已经有很多很多的编程范式，相当复杂。下面这个图比较好地描绘了这些各式各样的编程范式，这个图越往左边就越是“声明式的”，越往右边就越不是“声明式的”（指令式的），我们可以看到，函数式编程和逻辑编程，都在左边，而右边是指令式的，有状态的，有类型的。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/9d\/8d\/9d6ac4820cc070a6b567d3f514d9ea8d.png?wh=1502*1125\" alt=\"\"><\/p><p>上面这个图有点乱，不过总体说来，我们可以简单地把这世界上纷乱的编程范式，分成这几类：<strong>声明式<\/strong>、<strong>命令式<\/strong>、<strong>逻辑的<\/strong>、<strong>函数式<\/strong>、<strong>面向对象的<\/strong>、<strong>面向过程的<\/strong>。<\/p><p>于是我们归纳一下，就可以得到下面这个简单的图。简单描述一下：<\/p><ul>\n<li>中间两个声明式编程范式（函数式和逻辑式）偏向于你定义要什么，而不是怎么做。<\/li>\n<li>而两边的命令式编程范式和面向对象编程范式，偏向于怎么做，而不是要做什么。<\/li>\n<\/ul><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/4b\/3c\/4b764c2eab8f6f383525e6d1a386d93c.jpg?wh=1860x1353\" alt=\"\"><br>\n我们再归纳一下，基本上来说，就是两大分支，一边是在解决数据和算法，一边是在解决逻辑和控制。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/bf\/ef\/bf6945c2ca2ec5564ecbbf1c81503eef.png?wh=1650*862\" alt=\"\"><\/p><p>下面再结合一张表格说明一下这世界上四大编程范式的类别，以及它们的特性和主要的编程语言。<\/p><p><img src=\"https:\/\/static001.geekbang.org\/resource\/image\/37\/25\/37215aac89a3fc78d1d99649a0f91a25.jpg?wh=1950x2010\" alt=\"\"><br>\n程序编程范式。一个是左脑，一个是右脑。我们程序员基本上是在用左脑，左脑是理性分析，喜欢数据证据，线性思维，陷入细节，具体化的，不抽象。但是，实际上玩儿出这些东西的都在右脑，函数式，还有像逻辑式的抽象能力都在右脑。所以我们非线性的想象力都在这边，而标准化教育把我们这边已经全部干掉了，我们只剩左边。我们陷入细节，我一说Java是最好的程序设计语言，一堆人就来了，找各种各样的细节问题跟你纠缠。<\/p>","video_width":0,"column_could_sub":true,"article_ctime":1518649200,"score":"31518649200","video_media_map":{},"video_preview":{},"video":0,"video_time_arr":{"m":"","s":"","h":""},"video_total_seconds":0},"extra":{},"error":{}}